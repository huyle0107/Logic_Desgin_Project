
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080051c8  080051c8  000151c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080055d4  080055d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d4  080055d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080055dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001dc  080057b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080057b8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1e9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  0002a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000232f  00000000  00000000  0002d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9e7  00000000  00000000  0002f69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876ae  00000000  00000000  0003a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000c1788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080051ac 	.word	0x080051ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080051ac 	.word	0x080051ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <send8bitstoLCD>:
	operand[15] = data;
	LCD_Put_Cur(0,0);
	for(int z = 0; z < 16; z++) LCD_Send_Data(operand[z]);
}

void send8bitstoLCD(char vee){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	int b0,b1,b2,b3,b4,b5,b6,b7;

	b0 = vee & 1;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
	b1 = vee & 2;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
	b2 = vee & 4;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	61fb      	str	r3, [r7, #28]
	b3 = vee & 8;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	61bb      	str	r3, [r7, #24]
	b4 = vee & 16;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	617b      	str	r3, [r7, #20]
	b5 = vee & 32;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	613b      	str	r3, [r7, #16]
	b6 = vee & 64;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	60fb      	str	r3, [r7, #12]
	b7 = vee & 128;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad0:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, b0);
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2108      	movs	r1, #8
 8000ada:	481d      	ldr	r0, [pc, #116]	; (8000b50 <send8bitstoLCD+0xc8>)
 8000adc:	f000 fe7a 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, b1);
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4819      	ldr	r0, [pc, #100]	; (8000b50 <send8bitstoLCD+0xc8>)
 8000aea:	f000 fe73 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, b2);
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4815      	ldr	r0, [pc, #84]	; (8000b50 <send8bitstoLCD+0xc8>)
 8000afa:	f000 fe6b 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, b3);
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	2108      	movs	r1, #8
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <send8bitstoLCD+0xcc>)
 8000b08:	f000 fe64 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, b4);
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	2120      	movs	r1, #32
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <send8bitstoLCD+0xcc>)
 8000b16:	f000 fe5d 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, b5);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2110      	movs	r1, #16
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <send8bitstoLCD+0xcc>)
 8000b24:	f000 fe56 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, b6);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <send8bitstoLCD+0xcc>)
 8000b34:	f000 fe4e 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, b7);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <send8bitstoLCD+0xc8>)
 8000b44:	f000 fe46 	bl	80017d4 <HAL_GPIO_WritePin>

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <LCD_Init>:

void LCD_Init(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8000b5c:	2014      	movs	r0, #20
 8000b5e:	f000 fb8d 	bl	800127c <HAL_Delay>
	LCD_Send_CMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 8000b62:	2038      	movs	r0, #56	; 0x38
 8000b64:	f000 f80e 	bl	8000b84 <LCD_Send_CMD>
	LCD_Send_CMD(0x0C);		/* Display ON Cursor OFF */
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f000 f80b 	bl	8000b84 <LCD_Send_CMD>
	LCD_Send_CMD(0x06);		/* Auto Increment cursor */
 8000b6e:	2006      	movs	r0, #6
 8000b70:	f000 f808 	bl	8000b84 <LCD_Send_CMD>
	LCD_Send_CMD(0x01);		/* Clear display */
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 f805 	bl	8000b84 <LCD_Send_CMD>
	LCD_Send_CMD(0x80);		/* Cursor at home position */
 8000b7a:	2080      	movs	r0, #128	; 0x80
 8000b7c:	f000 f802 	bl	8000b84 <LCD_Send_CMD>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <LCD_Send_CMD>:

void LCD_Send_CMD(char cmd){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f000 fb74 	bl	800127c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 0); // RS = 0 nean send command
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LCD_Send_CMD+0x44>)
 8000b9c:	f000 fe1a 	bl	80017d4 <HAL_GPIO_WritePin>
	send8bitstoLCD(cmd);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff70 	bl	8000a88 <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <LCD_Send_CMD+0x44>)
 8000bb0:	f000 fe10 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <LCD_Send_CMD+0x44>)
 8000bbc:	f000 fe0a 	bl	80017d4 <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800

08000bcc <LCD_Send_Data>:

void LCD_Send_Data(char data){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8000bd6:	2014      	movs	r0, #20
 8000bd8:	f000 fb50 	bl	800127c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 1); // RS = 1 send data
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <LCD_Send_Data+0x44>)
 8000be4:	f000 fdf6 	bl	80017d4 <HAL_GPIO_WritePin>
	send8bitstoLCD(data);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff4c 	bl	8000a88 <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <LCD_Send_Data+0x44>)
 8000bf8:	f000 fdec 	bl	80017d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <LCD_Send_Data+0x44>)
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40010800 	.word	0x40010800

08000c14 <LCD_Send_String>:

void LCD_Send_String(char *str){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i] != '\0'; i++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e009      	b.n	8000c36 <LCD_Send_String+0x22>
		LCD_Send_Data(str[i]);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ffce 	bl	8000bcc <LCD_Send_Data>
	for (int i = 0; str[i] != '\0'; i++){
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1ef      	bne.n	8000c22 <LCD_Send_String+0xe>
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <LCD_Clear>:
		break;
	}
	LCD_Send_CMD(col);
}

void LCD_Clear(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	LCD_Send_CMD(0x01);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff ff97 	bl	8000b84 <LCD_Send_CMD>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 faaa 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f818 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 f89e 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c6c:	f000 f850 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <main+0x34>)
 8000c72:	f001 f9ff 	bl	8002074 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 8000c76:	f7ff ff6f 	bl	8000b58 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */
//	  Key_Read();
//	  HAL_Delay(300);
	  LCD_Send_String("537401");
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <main+0x38>)
 8000c7c:	f7ff ffca 	bl	8000c14 <LCD_Send_String>
	  HAL_Delay(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c84:	f000 fafa 	bl	800127c <HAL_Delay>
	  LCD_Clear();
 8000c88:	f7ff ffe0 	bl	8000c4c <LCD_Clear>
	  LCD_Send_String("537401");
 8000c8c:	e7f5      	b.n	8000c7a <main+0x1e>
 8000c8e:	bf00      	nop
 8000c90:	2000020c 	.word	0x2000020c
 8000c94:	080051c8 	.word	0x080051c8

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2228      	movs	r2, #40	; 0x28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fda2 	bl	80027f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fd98 	bl	8001804 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cda:	f000 f8d9 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f804 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8c5 	bl	8000e90 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f001 f93d 	bl	8001fd4 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f896 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fad3 	bl	800231c <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f888 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f001 fc9b 	bl	80026c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f87a 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000020c 	.word	0x2000020c

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_GPIO_Init+0xc8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|D1_Pin|D0_Pin
 8000dec:	2200      	movs	r2, #0
 8000dee:	f641 511f 	movw	r1, #7455	; 0x1d1f
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_GPIO_Init+0xcc>)
 8000df4:	f000 fcee 	bl	80017d4 <HAL_GPIO_WritePin>
                          |C2_Pin|D7_Pin|D2_Pin|RS_Pin
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C3_Pin|D6_Pin|D3_Pin|D5_Pin
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f240 4139 	movw	r1, #1081	; 0x439
 8000dfe:	481e      	ldr	r0, [pc, #120]	; (8000e78 <MX_GPIO_Init+0xd0>)
 8000e00:	f000 fce8 	bl	80017d4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB,R0_Pin|R1_Pin|R2_Pin|R3_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e0a:	481b      	ldr	r0, [pc, #108]	; (8000e78 <MX_GPIO_Init+0xd0>)
 8000e0c:	f000 fce2 	bl	80017d4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : C0_Pin C1_Pin D1_Pin D0_Pin
                           C2_Pin D7_Pin D2_Pin RS_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|D1_Pin|D0_Pin
 8000e10:	f641 531f 	movw	r3, #7455	; 0x1d1f
 8000e14:	60bb      	str	r3, [r7, #8]
                          |C2_Pin|D7_Pin|D2_Pin|RS_Pin
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	4812      	ldr	r0, [pc, #72]	; (8000e74 <MX_GPIO_Init+0xcc>)
 8000e2a:	f000 fb59 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin R0_Pin R1_Pin D6_Pin
                           R2_Pin R3_Pin D3_Pin */
  GPIO_InitStruct.Pin = C3_Pin|R0_Pin|R1_Pin|D6_Pin
 8000e2e:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8000e32:	60bb      	str	r3, [r7, #8]
                          |R2_Pin|R3_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_GPIO_Init+0xd0>)
 8000e48:	f000 fb4a 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000e4c:	2330      	movs	r3, #48	; 0x30
 8000e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_GPIO_Init+0xd0>)
 8000e64:	f000 fb3c 	bl	80014e0 <HAL_GPIO_Init>

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00

08000e7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e84:	f000 f80a 	bl	8000e9c <timerRun>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <timerRun>:
void setTimer1(int duration){
	timer1_counter = duration / TIMER_CYCLE;
	timer1_flag = 0;
}

void timerRun(){
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <timerRun+0x2c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dd0b      	ble.n	8000ec0 <timerRun+0x24>
		timer1_counter--;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <timerRun+0x2c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <timerRun+0x2c>)
 8000eb0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <timerRun+0x2c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dc02      	bgt.n	8000ec0 <timerRun+0x24>
			timer1_flag = 1;
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <timerRun+0x30>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	200001fc 	.word	0x200001fc
 8000ecc:	200001f8 	.word	0x200001f8

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_MspInit+0x5c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x60>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_MspInit+0x60>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d113      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 fa85 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 fa9e 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f93f 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f001 f89b 	bl	800210c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000020c 	.word	0x2000020c

08000fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return 1;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <_kill>:

int _kill(int pid, int sig)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ff8:	f001 fbd0 	bl	800279c <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2216      	movs	r2, #22
 8001000:	601a      	str	r2, [r3, #0]
	return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_exit>:

void _exit (int status)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffe7 	bl	8000fee <_kill>
	while (1) {}		/* Make sure we hang here */
 8001020:	e7fe      	b.n	8001020 <_exit+0x12>

08001022 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e00a      	b.n	800104a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001034:	f3af 8000 	nop.w
 8001038:	4601      	mov	r1, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	60ba      	str	r2, [r7, #8]
 8001040:	b2ca      	uxtb	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbf0      	blt.n	8001034 <_read+0x12>
	}

return len;
 8001052:	687b      	ldr	r3, [r7, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e009      	b.n	8001082 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	60ba      	str	r2, [r7, #8]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbf1      	blt.n	800106e <_write+0x12>
	}
	return len;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_close>:

int _close(int file)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	return -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	605a      	str	r2, [r3, #4]
	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <_isatty>:

int _isatty(int file)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f001 fb3a 	bl	800279c <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002800 	.word	0x20002800
 8001154:	00000400 	.word	0x00000400
 8001158:	20000200 	.word	0x20000200
 800115c:	20000268 	.word	0x20000268

08001160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001192:	f7ff ffe5 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f001 fb07 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fd5f 	bl	8000c5c <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80011a8:	080055dc 	.word	0x080055dc
  ldr r2, =_sbss
 80011ac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80011b0:	20000268 	.word	0x20000268

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f947 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe7c 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f95f 	bl	80014c6 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f927 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000008 	.word	0x20000008
 8001264:	20000254 	.word	0x20000254

08001268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000254 	.word	0x20000254

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff fff0 	bl	8001268 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffe0 	bl	8001268 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4906      	ldr	r1, [pc, #24]	; (800135c <__NVIC_EnableIRQ+0x34>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff90 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff2d 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff42 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff35 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e148      	b.n	8001786 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8137 	bne.w	8001780 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4aa3      	ldr	r2, [pc, #652]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800151c:	4aa1      	ldr	r2, [pc, #644]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d875      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001522:	4aa1      	ldr	r2, [pc, #644]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d058      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001528:	4a9f      	ldr	r2, [pc, #636]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d86f      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800152e:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d052      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001534:	4a9d      	ldr	r2, [pc, #628]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d869      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800153a:	4a9d      	ldr	r2, [pc, #628]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d04c      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001540:	4a9b      	ldr	r2, [pc, #620]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d863      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001546:	4a9b      	ldr	r2, [pc, #620]	; (80017b4 <HAL_GPIO_Init+0x2d4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d046      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800154c:	4a99      	ldr	r2, [pc, #612]	; (80017b4 <HAL_GPIO_Init+0x2d4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d85d      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d82a      	bhi.n	80015ac <HAL_GPIO_Init+0xcc>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d859      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_GPIO_Init+0x80>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015db 	.word	0x080015db
 8001564:	080015b5 	.word	0x080015b5
 8001568:	080015c7 	.word	0x080015c7
 800156c:	08001609 	.word	0x08001609
 8001570:	0800160f 	.word	0x0800160f
 8001574:	0800160f 	.word	0x0800160f
 8001578:	0800160f 	.word	0x0800160f
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800160f 	.word	0x0800160f
 8001588:	0800160f 	.word	0x0800160f
 800158c:	0800160f 	.word	0x0800160f
 8001590:	0800160f 	.word	0x0800160f
 8001594:	0800160f 	.word	0x0800160f
 8001598:	0800160f 	.word	0x0800160f
 800159c:	0800160f 	.word	0x0800160f
 80015a0:	0800160f 	.word	0x0800160f
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	4a82      	ldr	r2, [pc, #520]	; (80017b8 <HAL_GPIO_Init+0x2d8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e02c      	b.n	800160e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e029      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	3304      	adds	r3, #4
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e024      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	3308      	adds	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e01f      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	330c      	adds	r3, #12
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e01a      	b.n	8001610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e2:	2304      	movs	r3, #4
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e013      	b.n	8001610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	611a      	str	r2, [r3, #16]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	615a      	str	r2, [r3, #20]
          break;
 8001606:	e003      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x130>
          break;
 800160e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d801      	bhi.n	800161a <HAL_GPIO_Init+0x13a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e001      	b.n	800161e <HAL_GPIO_Init+0x13e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d802      	bhi.n	800162c <HAL_GPIO_Init+0x14c>
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x152>
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	210f      	movs	r1, #15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8090 	beq.w	8001780 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_GPIO_Init+0x2e0>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_GPIO_Init+0x2e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1dc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_GPIO_Init+0x2ec>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1d8>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016c0:	2300      	movs	r3, #0
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d2:	493b      	ldr	r1, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x2e0>)
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4937      	ldr	r1, [pc, #220]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4933      	ldr	r1, [pc, #204]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001704:	4013      	ands	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4923      	ldr	r1, [pc, #140]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491f      	ldr	r1, [pc, #124]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001754:	4013      	ands	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4919      	ldr	r1, [pc, #100]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3301      	adds	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f aeaf 	bne.w	80014f4 <HAL_GPIO_Init+0x14>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	372c      	adds	r7, #44	; 0x2c
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	10320000 	.word	0x10320000
 80017a8:	10310000 	.word	0x10310000
 80017ac:	10220000 	.word	0x10220000
 80017b0:	10210000 	.word	0x10210000
 80017b4:	10120000 	.word	0x10120000
 80017b8:	10110000 	.word	0x10110000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f0:	e003      	b.n	80017fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e26c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e246      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fcc2 	bl	8001268 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fcbe 	bl	8001268 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1fa      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fcae 	bl	8001268 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fcaa 	bl	8001268 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1e6      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1ba      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fc63 	bl	8001268 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc5f 	bl	8001268 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e19b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc42 	bl	8001268 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fc3e 	bl	8001268 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e17a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fc22 	bl	8001268 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc1e 	bl	8001268 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e15a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 faa6 	bl	8001f98 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fc08 	bl	8001268 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc04 	bl	8001268 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e140      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b9e      	ldr	r3, [pc, #632]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a93      	ldr	r2, [pc, #588]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b91      	ldr	r3, [pc, #580]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b8e      	ldr	r3, [pc, #568]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a8a      	ldr	r2, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbc5 	bl	8001268 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fbc1 	bl	8001268 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0fd      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b81      	ldr	r3, [pc, #516]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a75      	ldr	r2, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a6c      	ldr	r2, [pc, #432]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a66      	ldr	r2, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb75 	bl	8001268 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb71 	bl	8001268 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0ab      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb5f 	bl	8001268 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fb5b 	bl	8001268 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e095      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8081 	beq.w	8001cee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb2f 	bl	8001268 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fb2b 	bl	8001268 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e067      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	492d      	ldr	r1, [pc, #180]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	4927      	ldr	r1, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff faff 	bl	8001268 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff fafb 	bl	8001268 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e037      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e02f      	b.n	8001cee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fae8 	bl	8001268 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fae4 	bl	8001268 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e020      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e018      	b.n	8001cee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420060 	.word	0x42420060

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff fa38 	bl	8001268 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff fa34 	bl	8001268 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4922      	ldr	r1, [pc, #136]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f996 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	080051e0 	.word	0x080051e0
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b490      	push	{r4, r7}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ee0:	1d3c      	adds	r4, r7, #4
 8001ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee8:	f240 2301 	movw	r3, #513	; 0x201
 8001eec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x46>
 8001f16:	e02d      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	e02d      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0c5b      	lsrs	r3, r3, #17
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f56:	fb02 f203 	mul.w	r2, r2, r3
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	e004      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	623b      	str	r3, [r7, #32]
      break;
 8001f72:	e002      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f76:	623b      	str	r3, [r7, #32]
      break;
 8001f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc90      	pop	{r4, r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	080051d0 	.word	0x080051d0
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	003d0900 	.word	0x003d0900

08001f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <RCC_Delay+0x34>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <RCC_Delay+0x38>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fb4:	bf00      	nop
  }
  while (Delay --);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <RCC_Delay+0x1c>
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e041      	b.n	800206a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe ff9a 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f000 fa6a 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e035      	b.n	80020f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_TIM_Base_Start_IT+0x90>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x4e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d004      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x4e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_TIM_Base_Start_IT+0x94>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d111      	bne.n	80020e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d010      	beq.n	80020f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e4:	e007      	b.n	80020f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400

0800210c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0202 	mvn.w	r2, #2
 8002138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9b1 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f9a4 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f9b3 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0204 	mvn.w	r2, #4
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f987 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f97a 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f989 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0208 	mvn.w	r2, #8
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2204      	movs	r2, #4
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f95d 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f950 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f95f 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b10      	cmp	r3, #16
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b10      	cmp	r3, #16
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0210 	mvn.w	r2, #16
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2208      	movs	r2, #8
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f933 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f926 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f935 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0201 	mvn.w	r2, #1
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fdf6 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa67 	bl	800278a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d10e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8f9 	bl	80024da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d10e      	bne.n	8002314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d107      	bne.n	8002314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0220 	mvn.w	r2, #32
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa32 	bl	8002778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e0b3      	b.n	800249c <HAL_TIM_ConfigClockSource+0x180>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236c:	d03e      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0xd0>
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	f200 8087 	bhi.w	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	f000 8085 	beq.w	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	d87f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d01a      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xa2>
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d87b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d050      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x116>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d877      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d03c      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0xf6>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d873      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d058      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x136>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d86f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d064      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d86b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d060      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d867      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d05a      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023bc:	e062      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f000 f95c 	bl	800268a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
      break;
 80023ea:	e04e      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f000 f945 	bl	800268a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240e:	609a      	str	r2, [r3, #8]
      break;
 8002410:	e03b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f000 f8bc 	bl	800259c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2150      	movs	r1, #80	; 0x50
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f913 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 8002430:	e02b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 f8da 	bl	80025f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2160      	movs	r1, #96	; 0x60
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f903 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 8002450:	e01b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f000 f89c 	bl	800259c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f8f3 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 8002470:	e00b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f000 f8ea 	bl	8002656 <TIM_ITRx_SetConfig>
        break;
 8002482:	e002      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002488:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <TIM_Base_SetConfig+0xac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a17      	ldr	r2, [pc, #92]	; (8002598 <TIM_Base_SetConfig+0xac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400

0800259c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0201 	bic.w	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 030a 	bic.w	r3, r3, #10
 80025d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 0210 	bic.w	r2, r3, #16
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	621a      	str	r2, [r3, #32]
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	f043 0307 	orr.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800268a:	b480      	push	{r7}
 800268c:	b087      	sub	sp, #28
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	609a      	str	r2, [r3, #8]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e041      	b.n	8002764 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d004      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10c      	bne.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400

08002778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <__errno>:
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <__errno+0x8>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	2600      	movs	r6, #0
 80027ac:	4d0c      	ldr	r5, [pc, #48]	; (80027e0 <__libc_init_array+0x38>)
 80027ae:	4c0d      	ldr	r4, [pc, #52]	; (80027e4 <__libc_init_array+0x3c>)
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	f002 fcf8 	bl	80051ac <_init>
 80027bc:	2600      	movs	r6, #0
 80027be:	4d0a      	ldr	r5, [pc, #40]	; (80027e8 <__libc_init_array+0x40>)
 80027c0:	4c0a      	ldr	r4, [pc, #40]	; (80027ec <__libc_init_array+0x44>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	080055d4 	.word	0x080055d4
 80027e4:	080055d4 	.word	0x080055d4
 80027e8:	080055d4 	.word	0x080055d4
 80027ec:	080055d8 	.word	0x080055d8

080027f0 <memset>:
 80027f0:	4603      	mov	r3, r0
 80027f2:	4402      	add	r2, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <__cvt>:
 8002800:	2b00      	cmp	r3, #0
 8002802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002806:	461f      	mov	r7, r3
 8002808:	bfbb      	ittet	lt
 800280a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800280e:	461f      	movlt	r7, r3
 8002810:	2300      	movge	r3, #0
 8002812:	232d      	movlt	r3, #45	; 0x2d
 8002814:	b088      	sub	sp, #32
 8002816:	4614      	mov	r4, r2
 8002818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800281a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800281c:	7013      	strb	r3, [r2, #0]
 800281e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002820:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002824:	f023 0820 	bic.w	r8, r3, #32
 8002828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800282c:	d005      	beq.n	800283a <__cvt+0x3a>
 800282e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002832:	d100      	bne.n	8002836 <__cvt+0x36>
 8002834:	3501      	adds	r5, #1
 8002836:	2302      	movs	r3, #2
 8002838:	e000      	b.n	800283c <__cvt+0x3c>
 800283a:	2303      	movs	r3, #3
 800283c:	aa07      	add	r2, sp, #28
 800283e:	9204      	str	r2, [sp, #16]
 8002840:	aa06      	add	r2, sp, #24
 8002842:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002846:	e9cd 3500 	strd	r3, r5, [sp]
 800284a:	4622      	mov	r2, r4
 800284c:	463b      	mov	r3, r7
 800284e:	f000 fcc7 	bl	80031e0 <_dtoa_r>
 8002852:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002856:	4606      	mov	r6, r0
 8002858:	d102      	bne.n	8002860 <__cvt+0x60>
 800285a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800285c:	07db      	lsls	r3, r3, #31
 800285e:	d522      	bpl.n	80028a6 <__cvt+0xa6>
 8002860:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002864:	eb06 0905 	add.w	r9, r6, r5
 8002868:	d110      	bne.n	800288c <__cvt+0x8c>
 800286a:	7833      	ldrb	r3, [r6, #0]
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d10a      	bne.n	8002886 <__cvt+0x86>
 8002870:	2200      	movs	r2, #0
 8002872:	2300      	movs	r3, #0
 8002874:	4620      	mov	r0, r4
 8002876:	4639      	mov	r1, r7
 8002878:	f7fe f896 	bl	80009a8 <__aeabi_dcmpeq>
 800287c:	b918      	cbnz	r0, 8002886 <__cvt+0x86>
 800287e:	f1c5 0501 	rsb	r5, r5, #1
 8002882:	f8ca 5000 	str.w	r5, [sl]
 8002886:	f8da 3000 	ldr.w	r3, [sl]
 800288a:	4499      	add	r9, r3
 800288c:	2200      	movs	r2, #0
 800288e:	2300      	movs	r3, #0
 8002890:	4620      	mov	r0, r4
 8002892:	4639      	mov	r1, r7
 8002894:	f7fe f888 	bl	80009a8 <__aeabi_dcmpeq>
 8002898:	b108      	cbz	r0, 800289e <__cvt+0x9e>
 800289a:	f8cd 901c 	str.w	r9, [sp, #28]
 800289e:	2230      	movs	r2, #48	; 0x30
 80028a0:	9b07      	ldr	r3, [sp, #28]
 80028a2:	454b      	cmp	r3, r9
 80028a4:	d307      	bcc.n	80028b6 <__cvt+0xb6>
 80028a6:	4630      	mov	r0, r6
 80028a8:	9b07      	ldr	r3, [sp, #28]
 80028aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80028ac:	1b9b      	subs	r3, r3, r6
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	b008      	add	sp, #32
 80028b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	9107      	str	r1, [sp, #28]
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e7f0      	b.n	80028a0 <__cvt+0xa0>

080028be <__exponent>:
 80028be:	4603      	mov	r3, r0
 80028c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028c2:	2900      	cmp	r1, #0
 80028c4:	f803 2b02 	strb.w	r2, [r3], #2
 80028c8:	bfb6      	itet	lt
 80028ca:	222d      	movlt	r2, #45	; 0x2d
 80028cc:	222b      	movge	r2, #43	; 0x2b
 80028ce:	4249      	neglt	r1, r1
 80028d0:	2909      	cmp	r1, #9
 80028d2:	7042      	strb	r2, [r0, #1]
 80028d4:	dd2b      	ble.n	800292e <__exponent+0x70>
 80028d6:	f10d 0407 	add.w	r4, sp, #7
 80028da:	46a4      	mov	ip, r4
 80028dc:	270a      	movs	r7, #10
 80028de:	fb91 f6f7 	sdiv	r6, r1, r7
 80028e2:	460a      	mov	r2, r1
 80028e4:	46a6      	mov	lr, r4
 80028e6:	fb07 1516 	mls	r5, r7, r6, r1
 80028ea:	2a63      	cmp	r2, #99	; 0x63
 80028ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80028f0:	4631      	mov	r1, r6
 80028f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80028f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80028fa:	dcf0      	bgt.n	80028de <__exponent+0x20>
 80028fc:	3130      	adds	r1, #48	; 0x30
 80028fe:	f1ae 0502 	sub.w	r5, lr, #2
 8002902:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002906:	4629      	mov	r1, r5
 8002908:	1c44      	adds	r4, r0, #1
 800290a:	4561      	cmp	r1, ip
 800290c:	d30a      	bcc.n	8002924 <__exponent+0x66>
 800290e:	f10d 0209 	add.w	r2, sp, #9
 8002912:	eba2 020e 	sub.w	r2, r2, lr
 8002916:	4565      	cmp	r5, ip
 8002918:	bf88      	it	hi
 800291a:	2200      	movhi	r2, #0
 800291c:	4413      	add	r3, r2
 800291e:	1a18      	subs	r0, r3, r0
 8002920:	b003      	add	sp, #12
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002928:	f804 2f01 	strb.w	r2, [r4, #1]!
 800292c:	e7ed      	b.n	800290a <__exponent+0x4c>
 800292e:	2330      	movs	r3, #48	; 0x30
 8002930:	3130      	adds	r1, #48	; 0x30
 8002932:	7083      	strb	r3, [r0, #2]
 8002934:	70c1      	strb	r1, [r0, #3]
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	e7f1      	b.n	800291e <__exponent+0x60>
	...

0800293c <_printf_float>:
 800293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002940:	b091      	sub	sp, #68	; 0x44
 8002942:	460c      	mov	r4, r1
 8002944:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002948:	4616      	mov	r6, r2
 800294a:	461f      	mov	r7, r3
 800294c:	4605      	mov	r5, r0
 800294e:	f001 fa35 	bl	8003dbc <_localeconv_r>
 8002952:	6803      	ldr	r3, [r0, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	9309      	str	r3, [sp, #36]	; 0x24
 8002958:	f7fd fbfa 	bl	8000150 <strlen>
 800295c:	2300      	movs	r3, #0
 800295e:	930e      	str	r3, [sp, #56]	; 0x38
 8002960:	f8d8 3000 	ldr.w	r3, [r8]
 8002964:	900a      	str	r0, [sp, #40]	; 0x28
 8002966:	3307      	adds	r3, #7
 8002968:	f023 0307 	bic.w	r3, r3, #7
 800296c:	f103 0208 	add.w	r2, r3, #8
 8002970:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002974:	f8d4 b000 	ldr.w	fp, [r4]
 8002978:	f8c8 2000 	str.w	r2, [r8]
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002984:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002988:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800298c:	930b      	str	r3, [sp, #44]	; 0x2c
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	4640      	mov	r0, r8
 8002994:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <_printf_float+0x2cc>)
 8002996:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002998:	f7fe f838 	bl	8000a0c <__aeabi_dcmpun>
 800299c:	bb70      	cbnz	r0, 80029fc <_printf_float+0xc0>
 800299e:	f04f 32ff 	mov.w	r2, #4294967295
 80029a2:	4640      	mov	r0, r8
 80029a4:	4b98      	ldr	r3, [pc, #608]	; (8002c08 <_printf_float+0x2cc>)
 80029a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029a8:	f7fe f812 	bl	80009d0 <__aeabi_dcmple>
 80029ac:	bb30      	cbnz	r0, 80029fc <_printf_float+0xc0>
 80029ae:	2200      	movs	r2, #0
 80029b0:	2300      	movs	r3, #0
 80029b2:	4640      	mov	r0, r8
 80029b4:	4651      	mov	r1, sl
 80029b6:	f7fe f801 	bl	80009bc <__aeabi_dcmplt>
 80029ba:	b110      	cbz	r0, 80029c2 <_printf_float+0x86>
 80029bc:	232d      	movs	r3, #45	; 0x2d
 80029be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c2:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <_printf_float+0x2d0>)
 80029c4:	4892      	ldr	r0, [pc, #584]	; (8002c10 <_printf_float+0x2d4>)
 80029c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80029ca:	bf94      	ite	ls
 80029cc:	4698      	movls	r8, r3
 80029ce:	4680      	movhi	r8, r0
 80029d0:	2303      	movs	r3, #3
 80029d2:	f04f 0a00 	mov.w	sl, #0
 80029d6:	6123      	str	r3, [r4, #16]
 80029d8:	f02b 0304 	bic.w	r3, fp, #4
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	4633      	mov	r3, r6
 80029e0:	4621      	mov	r1, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	9700      	str	r7, [sp, #0]
 80029e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80029e8:	f000 f9d4 	bl	8002d94 <_printf_common>
 80029ec:	3001      	adds	r0, #1
 80029ee:	f040 8090 	bne.w	8002b12 <_printf_float+0x1d6>
 80029f2:	f04f 30ff 	mov.w	r0, #4294967295
 80029f6:	b011      	add	sp, #68	; 0x44
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fc:	4642      	mov	r2, r8
 80029fe:	4653      	mov	r3, sl
 8002a00:	4640      	mov	r0, r8
 8002a02:	4651      	mov	r1, sl
 8002a04:	f7fe f802 	bl	8000a0c <__aeabi_dcmpun>
 8002a08:	b148      	cbz	r0, 8002a1e <_printf_float+0xe2>
 8002a0a:	f1ba 0f00 	cmp.w	sl, #0
 8002a0e:	bfb8      	it	lt
 8002a10:	232d      	movlt	r3, #45	; 0x2d
 8002a12:	4880      	ldr	r0, [pc, #512]	; (8002c14 <_printf_float+0x2d8>)
 8002a14:	bfb8      	it	lt
 8002a16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <_printf_float+0x2dc>)
 8002a1c:	e7d3      	b.n	80029c6 <_printf_float+0x8a>
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	d142      	bne.n	8002aae <_printf_float+0x172>
 8002a28:	2306      	movs	r3, #6
 8002a2a:	6063      	str	r3, [r4, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	9206      	str	r2, [sp, #24]
 8002a30:	aa0e      	add	r2, sp, #56	; 0x38
 8002a32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002a36:	aa0d      	add	r2, sp, #52	; 0x34
 8002a38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002a3c:	9203      	str	r2, [sp, #12]
 8002a3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002a42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	4642      	mov	r2, r8
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4653      	mov	r3, sl
 8002a52:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a54:	f7ff fed4 	bl	8002800 <__cvt>
 8002a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a5a:	4680      	mov	r8, r0
 8002a5c:	2947      	cmp	r1, #71	; 0x47
 8002a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a60:	d108      	bne.n	8002a74 <_printf_float+0x138>
 8002a62:	1cc8      	adds	r0, r1, #3
 8002a64:	db02      	blt.n	8002a6c <_printf_float+0x130>
 8002a66:	6863      	ldr	r3, [r4, #4]
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	dd40      	ble.n	8002aee <_printf_float+0x1b2>
 8002a6c:	f1a9 0902 	sub.w	r9, r9, #2
 8002a70:	fa5f f989 	uxtb.w	r9, r9
 8002a74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002a78:	d81f      	bhi.n	8002aba <_printf_float+0x17e>
 8002a7a:	464a      	mov	r2, r9
 8002a7c:	3901      	subs	r1, #1
 8002a7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a82:	910d      	str	r1, [sp, #52]	; 0x34
 8002a84:	f7ff ff1b 	bl	80028be <__exponent>
 8002a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a8a:	4682      	mov	sl, r0
 8002a8c:	1813      	adds	r3, r2, r0
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	6123      	str	r3, [r4, #16]
 8002a92:	dc02      	bgt.n	8002a9a <_printf_float+0x15e>
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	07d2      	lsls	r2, r2, #31
 8002a98:	d501      	bpl.n	8002a9e <_printf_float+0x162>
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d09b      	beq.n	80029de <_printf_float+0xa2>
 8002aa6:	232d      	movs	r3, #45	; 0x2d
 8002aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aac:	e797      	b.n	80029de <_printf_float+0xa2>
 8002aae:	2947      	cmp	r1, #71	; 0x47
 8002ab0:	d1bc      	bne.n	8002a2c <_printf_float+0xf0>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ba      	bne.n	8002a2c <_printf_float+0xf0>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e7b7      	b.n	8002a2a <_printf_float+0xee>
 8002aba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002abe:	d118      	bne.n	8002af2 <_printf_float+0x1b6>
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	6863      	ldr	r3, [r4, #4]
 8002ac4:	dd0b      	ble.n	8002ade <_printf_float+0x1a2>
 8002ac6:	6121      	str	r1, [r4, #16]
 8002ac8:	b913      	cbnz	r3, 8002ad0 <_printf_float+0x194>
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	07d0      	lsls	r0, r2, #31
 8002ace:	d502      	bpl.n	8002ad6 <_printf_float+0x19a>
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	6123      	str	r3, [r4, #16]
 8002ad6:	f04f 0a00 	mov.w	sl, #0
 8002ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8002adc:	e7df      	b.n	8002a9e <_printf_float+0x162>
 8002ade:	b913      	cbnz	r3, 8002ae6 <_printf_float+0x1aa>
 8002ae0:	6822      	ldr	r2, [r4, #0]
 8002ae2:	07d2      	lsls	r2, r2, #31
 8002ae4:	d501      	bpl.n	8002aea <_printf_float+0x1ae>
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	e7f4      	b.n	8002ad4 <_printf_float+0x198>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e7f2      	b.n	8002ad4 <_printf_float+0x198>
 8002aee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002af4:	4299      	cmp	r1, r3
 8002af6:	db05      	blt.n	8002b04 <_printf_float+0x1c8>
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	6121      	str	r1, [r4, #16]
 8002afc:	07d8      	lsls	r0, r3, #31
 8002afe:	d5ea      	bpl.n	8002ad6 <_printf_float+0x19a>
 8002b00:	1c4b      	adds	r3, r1, #1
 8002b02:	e7e7      	b.n	8002ad4 <_printf_float+0x198>
 8002b04:	2900      	cmp	r1, #0
 8002b06:	bfcc      	ite	gt
 8002b08:	2201      	movgt	r2, #1
 8002b0a:	f1c1 0202 	rsble	r2, r1, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	e7e0      	b.n	8002ad4 <_printf_float+0x198>
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	055a      	lsls	r2, r3, #21
 8002b16:	d407      	bmi.n	8002b28 <_printf_float+0x1ec>
 8002b18:	6923      	ldr	r3, [r4, #16]
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	4631      	mov	r1, r6
 8002b1e:	4628      	mov	r0, r5
 8002b20:	47b8      	blx	r7
 8002b22:	3001      	adds	r0, #1
 8002b24:	d12b      	bne.n	8002b7e <_printf_float+0x242>
 8002b26:	e764      	b.n	80029f2 <_printf_float+0xb6>
 8002b28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b2c:	f240 80dd 	bls.w	8002cea <_printf_float+0x3ae>
 8002b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b34:	2200      	movs	r2, #0
 8002b36:	2300      	movs	r3, #0
 8002b38:	f7fd ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d033      	beq.n	8002ba8 <_printf_float+0x26c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4631      	mov	r1, r6
 8002b44:	4628      	mov	r0, r5
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <_printf_float+0x2e0>)
 8002b48:	47b8      	blx	r7
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	f43f af51 	beq.w	80029f2 <_printf_float+0xb6>
 8002b50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b54:	429a      	cmp	r2, r3
 8002b56:	db02      	blt.n	8002b5e <_printf_float+0x222>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	07d8      	lsls	r0, r3, #31
 8002b5c:	d50f      	bpl.n	8002b7e <_printf_float+0x242>
 8002b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b62:	4631      	mov	r1, r6
 8002b64:	4628      	mov	r0, r5
 8002b66:	47b8      	blx	r7
 8002b68:	3001      	adds	r0, #1
 8002b6a:	f43f af42 	beq.w	80029f2 <_printf_float+0xb6>
 8002b6e:	f04f 0800 	mov.w	r8, #0
 8002b72:	f104 091a 	add.w	r9, r4, #26
 8002b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4543      	cmp	r3, r8
 8002b7c:	dc09      	bgt.n	8002b92 <_printf_float+0x256>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	079b      	lsls	r3, r3, #30
 8002b82:	f100 8102 	bmi.w	8002d8a <_printf_float+0x44e>
 8002b86:	68e0      	ldr	r0, [r4, #12]
 8002b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	bfb8      	it	lt
 8002b8e:	4618      	movlt	r0, r3
 8002b90:	e731      	b.n	80029f6 <_printf_float+0xba>
 8002b92:	2301      	movs	r3, #1
 8002b94:	464a      	mov	r2, r9
 8002b96:	4631      	mov	r1, r6
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b8      	blx	r7
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f43f af28 	beq.w	80029f2 <_printf_float+0xb6>
 8002ba2:	f108 0801 	add.w	r8, r8, #1
 8002ba6:	e7e6      	b.n	8002b76 <_printf_float+0x23a>
 8002ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dc38      	bgt.n	8002c20 <_printf_float+0x2e4>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <_printf_float+0x2e0>)
 8002bb6:	47b8      	blx	r7
 8002bb8:	3001      	adds	r0, #1
 8002bba:	f43f af1a 	beq.w	80029f2 <_printf_float+0xb6>
 8002bbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	d102      	bne.n	8002bcc <_printf_float+0x290>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	07d9      	lsls	r1, r3, #31
 8002bca:	d5d8      	bpl.n	8002b7e <_printf_float+0x242>
 8002bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	47b8      	blx	r7
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	f43f af0b 	beq.w	80029f2 <_printf_float+0xb6>
 8002bdc:	f04f 0900 	mov.w	r9, #0
 8002be0:	f104 0a1a 	add.w	sl, r4, #26
 8002be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002be6:	425b      	negs	r3, r3
 8002be8:	454b      	cmp	r3, r9
 8002bea:	dc01      	bgt.n	8002bf0 <_printf_float+0x2b4>
 8002bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bee:	e794      	b.n	8002b1a <_printf_float+0x1de>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4652      	mov	r2, sl
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	47b8      	blx	r7
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	f43f aef9 	beq.w	80029f2 <_printf_float+0xb6>
 8002c00:	f109 0901 	add.w	r9, r9, #1
 8002c04:	e7ee      	b.n	8002be4 <_printf_float+0x2a8>
 8002c06:	bf00      	nop
 8002c08:	7fefffff 	.word	0x7fefffff
 8002c0c:	080051f4 	.word	0x080051f4
 8002c10:	080051f8 	.word	0x080051f8
 8002c14:	08005200 	.word	0x08005200
 8002c18:	080051fc 	.word	0x080051fc
 8002c1c:	08005204 	.word	0x08005204
 8002c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c24:	429a      	cmp	r2, r3
 8002c26:	bfa8      	it	ge
 8002c28:	461a      	movge	r2, r3
 8002c2a:	2a00      	cmp	r2, #0
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	dc37      	bgt.n	8002ca0 <_printf_float+0x364>
 8002c30:	f04f 0b00 	mov.w	fp, #0
 8002c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c38:	f104 021a 	add.w	r2, r4, #26
 8002c3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002c40:	ebaa 0309 	sub.w	r3, sl, r9
 8002c44:	455b      	cmp	r3, fp
 8002c46:	dc33      	bgt.n	8002cb0 <_printf_float+0x374>
 8002c48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	db3b      	blt.n	8002cc8 <_printf_float+0x38c>
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	07da      	lsls	r2, r3, #31
 8002c54:	d438      	bmi.n	8002cc8 <_printf_float+0x38c>
 8002c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c5a:	eba2 030a 	sub.w	r3, r2, sl
 8002c5e:	eba2 0901 	sub.w	r9, r2, r1
 8002c62:	4599      	cmp	r9, r3
 8002c64:	bfa8      	it	ge
 8002c66:	4699      	movge	r9, r3
 8002c68:	f1b9 0f00 	cmp.w	r9, #0
 8002c6c:	dc34      	bgt.n	8002cd8 <_printf_float+0x39c>
 8002c6e:	f04f 0800 	mov.w	r8, #0
 8002c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c76:	f104 0a1a 	add.w	sl, r4, #26
 8002c7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	eba3 0309 	sub.w	r3, r3, r9
 8002c84:	4543      	cmp	r3, r8
 8002c86:	f77f af7a 	ble.w	8002b7e <_printf_float+0x242>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4652      	mov	r2, sl
 8002c8e:	4631      	mov	r1, r6
 8002c90:	4628      	mov	r0, r5
 8002c92:	47b8      	blx	r7
 8002c94:	3001      	adds	r0, #1
 8002c96:	f43f aeac 	beq.w	80029f2 <_printf_float+0xb6>
 8002c9a:	f108 0801 	add.w	r8, r8, #1
 8002c9e:	e7ec      	b.n	8002c7a <_printf_float+0x33e>
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	47b8      	blx	r7
 8002caa:	3001      	adds	r0, #1
 8002cac:	d1c0      	bne.n	8002c30 <_printf_float+0x2f4>
 8002cae:	e6a0      	b.n	80029f2 <_printf_float+0xb6>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8002cb8:	47b8      	blx	r7
 8002cba:	3001      	adds	r0, #1
 8002cbc:	f43f ae99 	beq.w	80029f2 <_printf_float+0xb6>
 8002cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cc2:	f10b 0b01 	add.w	fp, fp, #1
 8002cc6:	e7b9      	b.n	8002c3c <_printf_float+0x300>
 8002cc8:	4631      	mov	r1, r6
 8002cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cce:	4628      	mov	r0, r5
 8002cd0:	47b8      	blx	r7
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d1bf      	bne.n	8002c56 <_printf_float+0x31a>
 8002cd6:	e68c      	b.n	80029f2 <_printf_float+0xb6>
 8002cd8:	464b      	mov	r3, r9
 8002cda:	4631      	mov	r1, r6
 8002cdc:	4628      	mov	r0, r5
 8002cde:	eb08 020a 	add.w	r2, r8, sl
 8002ce2:	47b8      	blx	r7
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d1c2      	bne.n	8002c6e <_printf_float+0x332>
 8002ce8:	e683      	b.n	80029f2 <_printf_float+0xb6>
 8002cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cec:	2a01      	cmp	r2, #1
 8002cee:	dc01      	bgt.n	8002cf4 <_printf_float+0x3b8>
 8002cf0:	07db      	lsls	r3, r3, #31
 8002cf2:	d537      	bpl.n	8002d64 <_printf_float+0x428>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	4642      	mov	r2, r8
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	47b8      	blx	r7
 8002cfe:	3001      	adds	r0, #1
 8002d00:	f43f ae77 	beq.w	80029f2 <_printf_float+0xb6>
 8002d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d08:	4631      	mov	r1, r6
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	47b8      	blx	r7
 8002d0e:	3001      	adds	r0, #1
 8002d10:	f43f ae6f 	beq.w	80029f2 <_printf_float+0xb6>
 8002d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f7fd fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8002d20:	b9d8      	cbnz	r0, 8002d5a <_printf_float+0x41e>
 8002d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d24:	f108 0201 	add.w	r2, r8, #1
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	47b8      	blx	r7
 8002d30:	3001      	adds	r0, #1
 8002d32:	d10e      	bne.n	8002d52 <_printf_float+0x416>
 8002d34:	e65d      	b.n	80029f2 <_printf_float+0xb6>
 8002d36:	2301      	movs	r3, #1
 8002d38:	464a      	mov	r2, r9
 8002d3a:	4631      	mov	r1, r6
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	47b8      	blx	r7
 8002d40:	3001      	adds	r0, #1
 8002d42:	f43f ae56 	beq.w	80029f2 <_printf_float+0xb6>
 8002d46:	f108 0801 	add.w	r8, r8, #1
 8002d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	4543      	cmp	r3, r8
 8002d50:	dcf1      	bgt.n	8002d36 <_printf_float+0x3fa>
 8002d52:	4653      	mov	r3, sl
 8002d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d58:	e6e0      	b.n	8002b1c <_printf_float+0x1e0>
 8002d5a:	f04f 0800 	mov.w	r8, #0
 8002d5e:	f104 091a 	add.w	r9, r4, #26
 8002d62:	e7f2      	b.n	8002d4a <_printf_float+0x40e>
 8002d64:	2301      	movs	r3, #1
 8002d66:	4642      	mov	r2, r8
 8002d68:	e7df      	b.n	8002d2a <_printf_float+0x3ee>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	464a      	mov	r2, r9
 8002d6e:	4631      	mov	r1, r6
 8002d70:	4628      	mov	r0, r5
 8002d72:	47b8      	blx	r7
 8002d74:	3001      	adds	r0, #1
 8002d76:	f43f ae3c 	beq.w	80029f2 <_printf_float+0xb6>
 8002d7a:	f108 0801 	add.w	r8, r8, #1
 8002d7e:	68e3      	ldr	r3, [r4, #12]
 8002d80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002d82:	1a5b      	subs	r3, r3, r1
 8002d84:	4543      	cmp	r3, r8
 8002d86:	dcf0      	bgt.n	8002d6a <_printf_float+0x42e>
 8002d88:	e6fd      	b.n	8002b86 <_printf_float+0x24a>
 8002d8a:	f04f 0800 	mov.w	r8, #0
 8002d8e:	f104 0919 	add.w	r9, r4, #25
 8002d92:	e7f4      	b.n	8002d7e <_printf_float+0x442>

08002d94 <_printf_common>:
 8002d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d98:	4616      	mov	r6, r2
 8002d9a:	4699      	mov	r9, r3
 8002d9c:	688a      	ldr	r2, [r1, #8]
 8002d9e:	690b      	ldr	r3, [r1, #16]
 8002da0:	4607      	mov	r7, r0
 8002da2:	4293      	cmp	r3, r2
 8002da4:	bfb8      	it	lt
 8002da6:	4613      	movlt	r3, r2
 8002da8:	6033      	str	r3, [r6, #0]
 8002daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dae:	460c      	mov	r4, r1
 8002db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002db4:	b10a      	cbz	r2, 8002dba <_printf_common+0x26>
 8002db6:	3301      	adds	r3, #1
 8002db8:	6033      	str	r3, [r6, #0]
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	0699      	lsls	r1, r3, #26
 8002dbe:	bf42      	ittt	mi
 8002dc0:	6833      	ldrmi	r3, [r6, #0]
 8002dc2:	3302      	addmi	r3, #2
 8002dc4:	6033      	strmi	r3, [r6, #0]
 8002dc6:	6825      	ldr	r5, [r4, #0]
 8002dc8:	f015 0506 	ands.w	r5, r5, #6
 8002dcc:	d106      	bne.n	8002ddc <_printf_common+0x48>
 8002dce:	f104 0a19 	add.w	sl, r4, #25
 8002dd2:	68e3      	ldr	r3, [r4, #12]
 8002dd4:	6832      	ldr	r2, [r6, #0]
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	42ab      	cmp	r3, r5
 8002dda:	dc28      	bgt.n	8002e2e <_printf_common+0x9a>
 8002ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002de0:	1e13      	subs	r3, r2, #0
 8002de2:	6822      	ldr	r2, [r4, #0]
 8002de4:	bf18      	it	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	0692      	lsls	r2, r2, #26
 8002dea:	d42d      	bmi.n	8002e48 <_printf_common+0xb4>
 8002dec:	4649      	mov	r1, r9
 8002dee:	4638      	mov	r0, r7
 8002df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002df4:	47c0      	blx	r8
 8002df6:	3001      	adds	r0, #1
 8002df8:	d020      	beq.n	8002e3c <_printf_common+0xa8>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	68e5      	ldr	r5, [r4, #12]
 8002dfe:	f003 0306 	and.w	r3, r3, #6
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf18      	it	ne
 8002e06:	2500      	movne	r5, #0
 8002e08:	6832      	ldr	r2, [r6, #0]
 8002e0a:	f04f 0600 	mov.w	r6, #0
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	bf08      	it	eq
 8002e12:	1aad      	subeq	r5, r5, r2
 8002e14:	6922      	ldr	r2, [r4, #16]
 8002e16:	bf08      	it	eq
 8002e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bfc4      	itt	gt
 8002e20:	1a9b      	subgt	r3, r3, r2
 8002e22:	18ed      	addgt	r5, r5, r3
 8002e24:	341a      	adds	r4, #26
 8002e26:	42b5      	cmp	r5, r6
 8002e28:	d11a      	bne.n	8002e60 <_printf_common+0xcc>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e008      	b.n	8002e40 <_printf_common+0xac>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4652      	mov	r2, sl
 8002e32:	4649      	mov	r1, r9
 8002e34:	4638      	mov	r0, r7
 8002e36:	47c0      	blx	r8
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d103      	bne.n	8002e44 <_printf_common+0xb0>
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7c4      	b.n	8002dd2 <_printf_common+0x3e>
 8002e48:	2030      	movs	r0, #48	; 0x30
 8002e4a:	18e1      	adds	r1, r4, r3
 8002e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e56:	4422      	add	r2, r4
 8002e58:	3302      	adds	r3, #2
 8002e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e5e:	e7c5      	b.n	8002dec <_printf_common+0x58>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4622      	mov	r2, r4
 8002e64:	4649      	mov	r1, r9
 8002e66:	4638      	mov	r0, r7
 8002e68:	47c0      	blx	r8
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d0e6      	beq.n	8002e3c <_printf_common+0xa8>
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7d9      	b.n	8002e26 <_printf_common+0x92>
	...

08002e74 <_printf_i>:
 8002e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	460c      	mov	r4, r1
 8002e7a:	7e27      	ldrb	r7, [r4, #24]
 8002e7c:	4691      	mov	r9, r2
 8002e7e:	2f78      	cmp	r7, #120	; 0x78
 8002e80:	4680      	mov	r8, r0
 8002e82:	469a      	mov	sl, r3
 8002e84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e8a:	d807      	bhi.n	8002e9c <_printf_i+0x28>
 8002e8c:	2f62      	cmp	r7, #98	; 0x62
 8002e8e:	d80a      	bhi.n	8002ea6 <_printf_i+0x32>
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	f000 80d9 	beq.w	8003048 <_printf_i+0x1d4>
 8002e96:	2f58      	cmp	r7, #88	; 0x58
 8002e98:	f000 80a4 	beq.w	8002fe4 <_printf_i+0x170>
 8002e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ea4:	e03a      	b.n	8002f1c <_printf_i+0xa8>
 8002ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eaa:	2b15      	cmp	r3, #21
 8002eac:	d8f6      	bhi.n	8002e9c <_printf_i+0x28>
 8002eae:	a001      	add	r0, pc, #4	; (adr r0, 8002eb4 <_printf_i+0x40>)
 8002eb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f21 	.word	0x08002f21
 8002ebc:	08002e9d 	.word	0x08002e9d
 8002ec0:	08002e9d 	.word	0x08002e9d
 8002ec4:	08002e9d 	.word	0x08002e9d
 8002ec8:	08002e9d 	.word	0x08002e9d
 8002ecc:	08002f21 	.word	0x08002f21
 8002ed0:	08002e9d 	.word	0x08002e9d
 8002ed4:	08002e9d 	.word	0x08002e9d
 8002ed8:	08002e9d 	.word	0x08002e9d
 8002edc:	08002e9d 	.word	0x08002e9d
 8002ee0:	0800302f 	.word	0x0800302f
 8002ee4:	08002f51 	.word	0x08002f51
 8002ee8:	08003011 	.word	0x08003011
 8002eec:	08002e9d 	.word	0x08002e9d
 8002ef0:	08002e9d 	.word	0x08002e9d
 8002ef4:	08003051 	.word	0x08003051
 8002ef8:	08002e9d 	.word	0x08002e9d
 8002efc:	08002f51 	.word	0x08002f51
 8002f00:	08002e9d 	.word	0x08002e9d
 8002f04:	08002e9d 	.word	0x08002e9d
 8002f08:	08003019 	.word	0x08003019
 8002f0c:	680b      	ldr	r3, [r1, #0]
 8002f0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f12:	1d1a      	adds	r2, r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	600a      	str	r2, [r1, #0]
 8002f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0a4      	b.n	800306a <_printf_i+0x1f6>
 8002f20:	6825      	ldr	r5, [r4, #0]
 8002f22:	6808      	ldr	r0, [r1, #0]
 8002f24:	062e      	lsls	r6, r5, #24
 8002f26:	f100 0304 	add.w	r3, r0, #4
 8002f2a:	d50a      	bpl.n	8002f42 <_printf_i+0xce>
 8002f2c:	6805      	ldr	r5, [r0, #0]
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	2d00      	cmp	r5, #0
 8002f32:	da03      	bge.n	8002f3c <_printf_i+0xc8>
 8002f34:	232d      	movs	r3, #45	; 0x2d
 8002f36:	426d      	negs	r5, r5
 8002f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3c:	230a      	movs	r3, #10
 8002f3e:	485e      	ldr	r0, [pc, #376]	; (80030b8 <_printf_i+0x244>)
 8002f40:	e019      	b.n	8002f76 <_printf_i+0x102>
 8002f42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f46:	6805      	ldr	r5, [r0, #0]
 8002f48:	600b      	str	r3, [r1, #0]
 8002f4a:	bf18      	it	ne
 8002f4c:	b22d      	sxthne	r5, r5
 8002f4e:	e7ef      	b.n	8002f30 <_printf_i+0xbc>
 8002f50:	680b      	ldr	r3, [r1, #0]
 8002f52:	6825      	ldr	r5, [r4, #0]
 8002f54:	1d18      	adds	r0, r3, #4
 8002f56:	6008      	str	r0, [r1, #0]
 8002f58:	0628      	lsls	r0, r5, #24
 8002f5a:	d501      	bpl.n	8002f60 <_printf_i+0xec>
 8002f5c:	681d      	ldr	r5, [r3, #0]
 8002f5e:	e002      	b.n	8002f66 <_printf_i+0xf2>
 8002f60:	0669      	lsls	r1, r5, #25
 8002f62:	d5fb      	bpl.n	8002f5c <_printf_i+0xe8>
 8002f64:	881d      	ldrh	r5, [r3, #0]
 8002f66:	2f6f      	cmp	r7, #111	; 0x6f
 8002f68:	bf0c      	ite	eq
 8002f6a:	2308      	moveq	r3, #8
 8002f6c:	230a      	movne	r3, #10
 8002f6e:	4852      	ldr	r0, [pc, #328]	; (80030b8 <_printf_i+0x244>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f76:	6866      	ldr	r6, [r4, #4]
 8002f78:	2e00      	cmp	r6, #0
 8002f7a:	bfa8      	it	ge
 8002f7c:	6821      	ldrge	r1, [r4, #0]
 8002f7e:	60a6      	str	r6, [r4, #8]
 8002f80:	bfa4      	itt	ge
 8002f82:	f021 0104 	bicge.w	r1, r1, #4
 8002f86:	6021      	strge	r1, [r4, #0]
 8002f88:	b90d      	cbnz	r5, 8002f8e <_printf_i+0x11a>
 8002f8a:	2e00      	cmp	r6, #0
 8002f8c:	d04d      	beq.n	800302a <_printf_i+0x1b6>
 8002f8e:	4616      	mov	r6, r2
 8002f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f94:	fb03 5711 	mls	r7, r3, r1, r5
 8002f98:	5dc7      	ldrb	r7, [r0, r7]
 8002f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f9e:	462f      	mov	r7, r5
 8002fa0:	42bb      	cmp	r3, r7
 8002fa2:	460d      	mov	r5, r1
 8002fa4:	d9f4      	bls.n	8002f90 <_printf_i+0x11c>
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d10b      	bne.n	8002fc2 <_printf_i+0x14e>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	07df      	lsls	r7, r3, #31
 8002fae:	d508      	bpl.n	8002fc2 <_printf_i+0x14e>
 8002fb0:	6923      	ldr	r3, [r4, #16]
 8002fb2:	6861      	ldr	r1, [r4, #4]
 8002fb4:	4299      	cmp	r1, r3
 8002fb6:	bfde      	ittt	le
 8002fb8:	2330      	movle	r3, #48	; 0x30
 8002fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fc2:	1b92      	subs	r2, r2, r6
 8002fc4:	6122      	str	r2, [r4, #16]
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4640      	mov	r0, r8
 8002fcc:	f8cd a000 	str.w	sl, [sp]
 8002fd0:	aa03      	add	r2, sp, #12
 8002fd2:	f7ff fedf 	bl	8002d94 <_printf_common>
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d14c      	bne.n	8003074 <_printf_i+0x200>
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	b004      	add	sp, #16
 8002fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe4:	4834      	ldr	r0, [pc, #208]	; (80030b8 <_printf_i+0x244>)
 8002fe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fea:	680e      	ldr	r6, [r1, #0]
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ff2:	061f      	lsls	r7, r3, #24
 8002ff4:	600e      	str	r6, [r1, #0]
 8002ff6:	d514      	bpl.n	8003022 <_printf_i+0x1ae>
 8002ff8:	07d9      	lsls	r1, r3, #31
 8002ffa:	bf44      	itt	mi
 8002ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8003000:	6023      	strmi	r3, [r4, #0]
 8003002:	b91d      	cbnz	r5, 800300c <_printf_i+0x198>
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	f023 0320 	bic.w	r3, r3, #32
 800300a:	6023      	str	r3, [r4, #0]
 800300c:	2310      	movs	r3, #16
 800300e:	e7af      	b.n	8002f70 <_printf_i+0xfc>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f043 0320 	orr.w	r3, r3, #32
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	2378      	movs	r3, #120	; 0x78
 800301a:	4828      	ldr	r0, [pc, #160]	; (80030bc <_printf_i+0x248>)
 800301c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003020:	e7e3      	b.n	8002fea <_printf_i+0x176>
 8003022:	065e      	lsls	r6, r3, #25
 8003024:	bf48      	it	mi
 8003026:	b2ad      	uxthmi	r5, r5
 8003028:	e7e6      	b.n	8002ff8 <_printf_i+0x184>
 800302a:	4616      	mov	r6, r2
 800302c:	e7bb      	b.n	8002fa6 <_printf_i+0x132>
 800302e:	680b      	ldr	r3, [r1, #0]
 8003030:	6826      	ldr	r6, [r4, #0]
 8003032:	1d1d      	adds	r5, r3, #4
 8003034:	6960      	ldr	r0, [r4, #20]
 8003036:	600d      	str	r5, [r1, #0]
 8003038:	0635      	lsls	r5, r6, #24
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	d501      	bpl.n	8003042 <_printf_i+0x1ce>
 800303e:	6018      	str	r0, [r3, #0]
 8003040:	e002      	b.n	8003048 <_printf_i+0x1d4>
 8003042:	0671      	lsls	r1, r6, #25
 8003044:	d5fb      	bpl.n	800303e <_printf_i+0x1ca>
 8003046:	8018      	strh	r0, [r3, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	4616      	mov	r6, r2
 800304c:	6123      	str	r3, [r4, #16]
 800304e:	e7ba      	b.n	8002fc6 <_printf_i+0x152>
 8003050:	680b      	ldr	r3, [r1, #0]
 8003052:	1d1a      	adds	r2, r3, #4
 8003054:	600a      	str	r2, [r1, #0]
 8003056:	681e      	ldr	r6, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4630      	mov	r0, r6
 800305c:	6862      	ldr	r2, [r4, #4]
 800305e:	f000 feb9 	bl	8003dd4 <memchr>
 8003062:	b108      	cbz	r0, 8003068 <_printf_i+0x1f4>
 8003064:	1b80      	subs	r0, r0, r6
 8003066:	6060      	str	r0, [r4, #4]
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	2300      	movs	r3, #0
 800306e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003072:	e7a8      	b.n	8002fc6 <_printf_i+0x152>
 8003074:	4632      	mov	r2, r6
 8003076:	4649      	mov	r1, r9
 8003078:	4640      	mov	r0, r8
 800307a:	6923      	ldr	r3, [r4, #16]
 800307c:	47d0      	blx	sl
 800307e:	3001      	adds	r0, #1
 8003080:	d0ab      	beq.n	8002fda <_printf_i+0x166>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	079b      	lsls	r3, r3, #30
 8003086:	d413      	bmi.n	80030b0 <_printf_i+0x23c>
 8003088:	68e0      	ldr	r0, [r4, #12]
 800308a:	9b03      	ldr	r3, [sp, #12]
 800308c:	4298      	cmp	r0, r3
 800308e:	bfb8      	it	lt
 8003090:	4618      	movlt	r0, r3
 8003092:	e7a4      	b.n	8002fde <_printf_i+0x16a>
 8003094:	2301      	movs	r3, #1
 8003096:	4632      	mov	r2, r6
 8003098:	4649      	mov	r1, r9
 800309a:	4640      	mov	r0, r8
 800309c:	47d0      	blx	sl
 800309e:	3001      	adds	r0, #1
 80030a0:	d09b      	beq.n	8002fda <_printf_i+0x166>
 80030a2:	3501      	adds	r5, #1
 80030a4:	68e3      	ldr	r3, [r4, #12]
 80030a6:	9903      	ldr	r1, [sp, #12]
 80030a8:	1a5b      	subs	r3, r3, r1
 80030aa:	42ab      	cmp	r3, r5
 80030ac:	dcf2      	bgt.n	8003094 <_printf_i+0x220>
 80030ae:	e7eb      	b.n	8003088 <_printf_i+0x214>
 80030b0:	2500      	movs	r5, #0
 80030b2:	f104 0619 	add.w	r6, r4, #25
 80030b6:	e7f5      	b.n	80030a4 <_printf_i+0x230>
 80030b8:	08005206 	.word	0x08005206
 80030bc:	08005217 	.word	0x08005217

080030c0 <quorem>:
 80030c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	6903      	ldr	r3, [r0, #16]
 80030c6:	690c      	ldr	r4, [r1, #16]
 80030c8:	4607      	mov	r7, r0
 80030ca:	42a3      	cmp	r3, r4
 80030cc:	f2c0 8083 	blt.w	80031d6 <quorem+0x116>
 80030d0:	3c01      	subs	r4, #1
 80030d2:	f100 0514 	add.w	r5, r0, #20
 80030d6:	f101 0814 	add.w	r8, r1, #20
 80030da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80030e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80030e8:	3301      	adds	r3, #1
 80030ea:	429a      	cmp	r2, r3
 80030ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80030f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80030f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80030f8:	d332      	bcc.n	8003160 <quorem+0xa0>
 80030fa:	f04f 0e00 	mov.w	lr, #0
 80030fe:	4640      	mov	r0, r8
 8003100:	46ac      	mov	ip, r5
 8003102:	46f2      	mov	sl, lr
 8003104:	f850 2b04 	ldr.w	r2, [r0], #4
 8003108:	b293      	uxth	r3, r2
 800310a:	fb06 e303 	mla	r3, r6, r3, lr
 800310e:	0c12      	lsrs	r2, r2, #16
 8003110:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003114:	fb06 e202 	mla	r2, r6, r2, lr
 8003118:	b29b      	uxth	r3, r3
 800311a:	ebaa 0303 	sub.w	r3, sl, r3
 800311e:	f8dc a000 	ldr.w	sl, [ip]
 8003122:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003126:	fa1f fa8a 	uxth.w	sl, sl
 800312a:	4453      	add	r3, sl
 800312c:	fa1f fa82 	uxth.w	sl, r2
 8003130:	f8dc 2000 	ldr.w	r2, [ip]
 8003134:	4581      	cmp	r9, r0
 8003136:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800313a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800313e:	b29b      	uxth	r3, r3
 8003140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003144:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003148:	f84c 3b04 	str.w	r3, [ip], #4
 800314c:	d2da      	bcs.n	8003104 <quorem+0x44>
 800314e:	f855 300b 	ldr.w	r3, [r5, fp]
 8003152:	b92b      	cbnz	r3, 8003160 <quorem+0xa0>
 8003154:	9b01      	ldr	r3, [sp, #4]
 8003156:	3b04      	subs	r3, #4
 8003158:	429d      	cmp	r5, r3
 800315a:	461a      	mov	r2, r3
 800315c:	d32f      	bcc.n	80031be <quorem+0xfe>
 800315e:	613c      	str	r4, [r7, #16]
 8003160:	4638      	mov	r0, r7
 8003162:	f001 f8cd 	bl	8004300 <__mcmp>
 8003166:	2800      	cmp	r0, #0
 8003168:	db25      	blt.n	80031b6 <quorem+0xf6>
 800316a:	4628      	mov	r0, r5
 800316c:	f04f 0c00 	mov.w	ip, #0
 8003170:	3601      	adds	r6, #1
 8003172:	f858 1b04 	ldr.w	r1, [r8], #4
 8003176:	f8d0 e000 	ldr.w	lr, [r0]
 800317a:	b28b      	uxth	r3, r1
 800317c:	ebac 0303 	sub.w	r3, ip, r3
 8003180:	fa1f f28e 	uxth.w	r2, lr
 8003184:	4413      	add	r3, r2
 8003186:	0c0a      	lsrs	r2, r1, #16
 8003188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800318c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003190:	b29b      	uxth	r3, r3
 8003192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003196:	45c1      	cmp	r9, r8
 8003198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800319c:	f840 3b04 	str.w	r3, [r0], #4
 80031a0:	d2e7      	bcs.n	8003172 <quorem+0xb2>
 80031a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031aa:	b922      	cbnz	r2, 80031b6 <quorem+0xf6>
 80031ac:	3b04      	subs	r3, #4
 80031ae:	429d      	cmp	r5, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	d30a      	bcc.n	80031ca <quorem+0x10a>
 80031b4:	613c      	str	r4, [r7, #16]
 80031b6:	4630      	mov	r0, r6
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	3b04      	subs	r3, #4
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d1cb      	bne.n	800315e <quorem+0x9e>
 80031c6:	3c01      	subs	r4, #1
 80031c8:	e7c6      	b.n	8003158 <quorem+0x98>
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	3b04      	subs	r3, #4
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d1f0      	bne.n	80031b4 <quorem+0xf4>
 80031d2:	3c01      	subs	r4, #1
 80031d4:	e7eb      	b.n	80031ae <quorem+0xee>
 80031d6:	2000      	movs	r0, #0
 80031d8:	e7ee      	b.n	80031b8 <quorem+0xf8>
 80031da:	0000      	movs	r0, r0
 80031dc:	0000      	movs	r0, r0
	...

080031e0 <_dtoa_r>:
 80031e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e4:	4616      	mov	r6, r2
 80031e6:	461f      	mov	r7, r3
 80031e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80031ea:	b099      	sub	sp, #100	; 0x64
 80031ec:	4605      	mov	r5, r0
 80031ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80031f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80031f6:	b974      	cbnz	r4, 8003216 <_dtoa_r+0x36>
 80031f8:	2010      	movs	r0, #16
 80031fa:	f000 fde3 	bl	8003dc4 <malloc>
 80031fe:	4602      	mov	r2, r0
 8003200:	6268      	str	r0, [r5, #36]	; 0x24
 8003202:	b920      	cbnz	r0, 800320e <_dtoa_r+0x2e>
 8003204:	21ea      	movs	r1, #234	; 0xea
 8003206:	4bae      	ldr	r3, [pc, #696]	; (80034c0 <_dtoa_r+0x2e0>)
 8003208:	48ae      	ldr	r0, [pc, #696]	; (80034c4 <_dtoa_r+0x2e4>)
 800320a:	f001 fa45 	bl	8004698 <__assert_func>
 800320e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003212:	6004      	str	r4, [r0, #0]
 8003214:	60c4      	str	r4, [r0, #12]
 8003216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	b151      	cbz	r1, 8003232 <_dtoa_r+0x52>
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	2301      	movs	r3, #1
 8003220:	4093      	lsls	r3, r2
 8003222:	604a      	str	r2, [r1, #4]
 8003224:	608b      	str	r3, [r1, #8]
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fe30 	bl	8003e8c <_Bfree>
 800322c:	2200      	movs	r2, #0
 800322e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	1e3b      	subs	r3, r7, #0
 8003234:	bfaf      	iteee	ge
 8003236:	2300      	movge	r3, #0
 8003238:	2201      	movlt	r2, #1
 800323a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800323e:	9305      	strlt	r3, [sp, #20]
 8003240:	bfa8      	it	ge
 8003242:	f8c8 3000 	strge.w	r3, [r8]
 8003246:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800324a:	4b9f      	ldr	r3, [pc, #636]	; (80034c8 <_dtoa_r+0x2e8>)
 800324c:	bfb8      	it	lt
 800324e:	f8c8 2000 	strlt.w	r2, [r8]
 8003252:	ea33 0309 	bics.w	r3, r3, r9
 8003256:	d119      	bne.n	800328c <_dtoa_r+0xac>
 8003258:	f242 730f 	movw	r3, #9999	; 0x270f
 800325c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003264:	4333      	orrs	r3, r6
 8003266:	f000 8580 	beq.w	8003d6a <_dtoa_r+0xb8a>
 800326a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800326c:	b953      	cbnz	r3, 8003284 <_dtoa_r+0xa4>
 800326e:	4b97      	ldr	r3, [pc, #604]	; (80034cc <_dtoa_r+0x2ec>)
 8003270:	e022      	b.n	80032b8 <_dtoa_r+0xd8>
 8003272:	4b97      	ldr	r3, [pc, #604]	; (80034d0 <_dtoa_r+0x2f0>)
 8003274:	9308      	str	r3, [sp, #32]
 8003276:	3308      	adds	r3, #8
 8003278:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	9808      	ldr	r0, [sp, #32]
 800327e:	b019      	add	sp, #100	; 0x64
 8003280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003284:	4b91      	ldr	r3, [pc, #580]	; (80034cc <_dtoa_r+0x2ec>)
 8003286:	9308      	str	r3, [sp, #32]
 8003288:	3303      	adds	r3, #3
 800328a:	e7f5      	b.n	8003278 <_dtoa_r+0x98>
 800328c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003290:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003298:	2200      	movs	r2, #0
 800329a:	2300      	movs	r3, #0
 800329c:	f7fd fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80032a0:	4680      	mov	r8, r0
 80032a2:	b158      	cbz	r0, 80032bc <_dtoa_r+0xdc>
 80032a4:	2301      	movs	r3, #1
 80032a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8559 	beq.w	8003d64 <_dtoa_r+0xb84>
 80032b2:	4888      	ldr	r0, [pc, #544]	; (80034d4 <_dtoa_r+0x2f4>)
 80032b4:	6018      	str	r0, [r3, #0]
 80032b6:	1e43      	subs	r3, r0, #1
 80032b8:	9308      	str	r3, [sp, #32]
 80032ba:	e7df      	b.n	800327c <_dtoa_r+0x9c>
 80032bc:	ab16      	add	r3, sp, #88	; 0x58
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	ab17      	add	r3, sp, #92	; 0x5c
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4628      	mov	r0, r5
 80032c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80032ca:	f001 f8c5 	bl	8004458 <__d2b>
 80032ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80032d2:	4682      	mov	sl, r0
 80032d4:	2c00      	cmp	r4, #0
 80032d6:	d07e      	beq.n	80033d6 <_dtoa_r+0x1f6>
 80032d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80032e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80032ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80032ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80032f2:	2200      	movs	r2, #0
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <_dtoa_r+0x2f8>)
 80032f6:	f7fc ff37 	bl	8000168 <__aeabi_dsub>
 80032fa:	a36b      	add	r3, pc, #428	; (adr r3, 80034a8 <_dtoa_r+0x2c8>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd f8ea 	bl	80004d8 <__aeabi_dmul>
 8003304:	a36a      	add	r3, pc, #424	; (adr r3, 80034b0 <_dtoa_r+0x2d0>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ff2f 	bl	800016c <__adddf3>
 800330e:	4606      	mov	r6, r0
 8003310:	4620      	mov	r0, r4
 8003312:	460f      	mov	r7, r1
 8003314:	f7fd f876 	bl	8000404 <__aeabi_i2d>
 8003318:	a367      	add	r3, pc, #412	; (adr r3, 80034b8 <_dtoa_r+0x2d8>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f8db 	bl	80004d8 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4630      	mov	r0, r6
 8003328:	4639      	mov	r1, r7
 800332a:	f7fc ff1f 	bl	800016c <__adddf3>
 800332e:	4606      	mov	r6, r0
 8003330:	460f      	mov	r7, r1
 8003332:	f7fd fb81 	bl	8000a38 <__aeabi_d2iz>
 8003336:	2200      	movs	r2, #0
 8003338:	4681      	mov	r9, r0
 800333a:	2300      	movs	r3, #0
 800333c:	4630      	mov	r0, r6
 800333e:	4639      	mov	r1, r7
 8003340:	f7fd fb3c 	bl	80009bc <__aeabi_dcmplt>
 8003344:	b148      	cbz	r0, 800335a <_dtoa_r+0x17a>
 8003346:	4648      	mov	r0, r9
 8003348:	f7fd f85c 	bl	8000404 <__aeabi_i2d>
 800334c:	4632      	mov	r2, r6
 800334e:	463b      	mov	r3, r7
 8003350:	f7fd fb2a 	bl	80009a8 <__aeabi_dcmpeq>
 8003354:	b908      	cbnz	r0, 800335a <_dtoa_r+0x17a>
 8003356:	f109 39ff 	add.w	r9, r9, #4294967295
 800335a:	f1b9 0f16 	cmp.w	r9, #22
 800335e:	d857      	bhi.n	8003410 <_dtoa_r+0x230>
 8003360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003364:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <_dtoa_r+0x2fc>)
 8003366:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fd fb25 	bl	80009bc <__aeabi_dcmplt>
 8003372:	2800      	cmp	r0, #0
 8003374:	d04e      	beq.n	8003414 <_dtoa_r+0x234>
 8003376:	2300      	movs	r3, #0
 8003378:	f109 39ff 	add.w	r9, r9, #4294967295
 800337c:	930f      	str	r3, [sp, #60]	; 0x3c
 800337e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003380:	1b1c      	subs	r4, r3, r4
 8003382:	1e63      	subs	r3, r4, #1
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	bf49      	itett	mi
 8003388:	f1c4 0301 	rsbmi	r3, r4, #1
 800338c:	2300      	movpl	r3, #0
 800338e:	9306      	strmi	r3, [sp, #24]
 8003390:	2300      	movmi	r3, #0
 8003392:	bf54      	ite	pl
 8003394:	9306      	strpl	r3, [sp, #24]
 8003396:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003398:	f1b9 0f00 	cmp.w	r9, #0
 800339c:	db3c      	blt.n	8003418 <_dtoa_r+0x238>
 800339e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80033a4:	444b      	add	r3, r9
 80033a6:	9309      	str	r3, [sp, #36]	; 0x24
 80033a8:	2300      	movs	r3, #0
 80033aa:	930a      	str	r3, [sp, #40]	; 0x28
 80033ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	d86c      	bhi.n	800348c <_dtoa_r+0x2ac>
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	bfc4      	itt	gt
 80033b6:	3b04      	subgt	r3, #4
 80033b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80033ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033bc:	bfc8      	it	gt
 80033be:	2400      	movgt	r4, #0
 80033c0:	f1a3 0302 	sub.w	r3, r3, #2
 80033c4:	bfd8      	it	le
 80033c6:	2401      	movle	r4, #1
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	f200 808b 	bhi.w	80034e4 <_dtoa_r+0x304>
 80033ce:	e8df f003 	tbb	[pc, r3]
 80033d2:	4f2d      	.short	0x4f2d
 80033d4:	5b4d      	.short	0x5b4d
 80033d6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80033da:	441c      	add	r4, r3
 80033dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	bfc3      	ittte	gt
 80033e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80033e8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80033ec:	fa09 f303 	lslgt.w	r3, r9, r3
 80033f0:	f1c3 0320 	rsble	r3, r3, #32
 80033f4:	bfc6      	itte	gt
 80033f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80033fa:	4318      	orrgt	r0, r3
 80033fc:	fa06 f003 	lslle.w	r0, r6, r3
 8003400:	f7fc fff0 	bl	80003e4 <__aeabi_ui2d>
 8003404:	2301      	movs	r3, #1
 8003406:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800340a:	3c01      	subs	r4, #1
 800340c:	9313      	str	r3, [sp, #76]	; 0x4c
 800340e:	e770      	b.n	80032f2 <_dtoa_r+0x112>
 8003410:	2301      	movs	r3, #1
 8003412:	e7b3      	b.n	800337c <_dtoa_r+0x19c>
 8003414:	900f      	str	r0, [sp, #60]	; 0x3c
 8003416:	e7b2      	b.n	800337e <_dtoa_r+0x19e>
 8003418:	9b06      	ldr	r3, [sp, #24]
 800341a:	eba3 0309 	sub.w	r3, r3, r9
 800341e:	9306      	str	r3, [sp, #24]
 8003420:	f1c9 0300 	rsb	r3, r9, #0
 8003424:	930a      	str	r3, [sp, #40]	; 0x28
 8003426:	2300      	movs	r3, #0
 8003428:	930e      	str	r3, [sp, #56]	; 0x38
 800342a:	e7bf      	b.n	80033ac <_dtoa_r+0x1cc>
 800342c:	2300      	movs	r3, #0
 800342e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003432:	2b00      	cmp	r3, #0
 8003434:	dc59      	bgt.n	80034ea <_dtoa_r+0x30a>
 8003436:	f04f 0b01 	mov.w	fp, #1
 800343a:	465b      	mov	r3, fp
 800343c:	f8cd b008 	str.w	fp, [sp, #8]
 8003440:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003444:	2200      	movs	r2, #0
 8003446:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003448:	6042      	str	r2, [r0, #4]
 800344a:	2204      	movs	r2, #4
 800344c:	f102 0614 	add.w	r6, r2, #20
 8003450:	429e      	cmp	r6, r3
 8003452:	6841      	ldr	r1, [r0, #4]
 8003454:	d94f      	bls.n	80034f6 <_dtoa_r+0x316>
 8003456:	4628      	mov	r0, r5
 8003458:	f000 fcd8 	bl	8003e0c <_Balloc>
 800345c:	9008      	str	r0, [sp, #32]
 800345e:	2800      	cmp	r0, #0
 8003460:	d14d      	bne.n	80034fe <_dtoa_r+0x31e>
 8003462:	4602      	mov	r2, r0
 8003464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <_dtoa_r+0x300>)
 800346a:	e6cd      	b.n	8003208 <_dtoa_r+0x28>
 800346c:	2301      	movs	r3, #1
 800346e:	e7de      	b.n	800342e <_dtoa_r+0x24e>
 8003470:	2300      	movs	r3, #0
 8003472:	930b      	str	r3, [sp, #44]	; 0x2c
 8003474:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003476:	eb09 0b03 	add.w	fp, r9, r3
 800347a:	f10b 0301 	add.w	r3, fp, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	bfb8      	it	lt
 8003484:	2301      	movlt	r3, #1
 8003486:	e7dd      	b.n	8003444 <_dtoa_r+0x264>
 8003488:	2301      	movs	r3, #1
 800348a:	e7f2      	b.n	8003472 <_dtoa_r+0x292>
 800348c:	2401      	movs	r4, #1
 800348e:	2300      	movs	r3, #0
 8003490:	940b      	str	r4, [sp, #44]	; 0x2c
 8003492:	9322      	str	r3, [sp, #136]	; 0x88
 8003494:	f04f 3bff 	mov.w	fp, #4294967295
 8003498:	2200      	movs	r2, #0
 800349a:	2312      	movs	r3, #18
 800349c:	f8cd b008 	str.w	fp, [sp, #8]
 80034a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80034a2:	e7cf      	b.n	8003444 <_dtoa_r+0x264>
 80034a4:	f3af 8000 	nop.w
 80034a8:	636f4361 	.word	0x636f4361
 80034ac:	3fd287a7 	.word	0x3fd287a7
 80034b0:	8b60c8b3 	.word	0x8b60c8b3
 80034b4:	3fc68a28 	.word	0x3fc68a28
 80034b8:	509f79fb 	.word	0x509f79fb
 80034bc:	3fd34413 	.word	0x3fd34413
 80034c0:	08005235 	.word	0x08005235
 80034c4:	0800524c 	.word	0x0800524c
 80034c8:	7ff00000 	.word	0x7ff00000
 80034cc:	08005231 	.word	0x08005231
 80034d0:	08005228 	.word	0x08005228
 80034d4:	08005205 	.word	0x08005205
 80034d8:	3ff80000 	.word	0x3ff80000
 80034dc:	08005348 	.word	0x08005348
 80034e0:	080052ab 	.word	0x080052ab
 80034e4:	2301      	movs	r3, #1
 80034e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034e8:	e7d4      	b.n	8003494 <_dtoa_r+0x2b4>
 80034ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80034ee:	465b      	mov	r3, fp
 80034f0:	f8cd b008 	str.w	fp, [sp, #8]
 80034f4:	e7a6      	b.n	8003444 <_dtoa_r+0x264>
 80034f6:	3101      	adds	r1, #1
 80034f8:	6041      	str	r1, [r0, #4]
 80034fa:	0052      	lsls	r2, r2, #1
 80034fc:	e7a6      	b.n	800344c <_dtoa_r+0x26c>
 80034fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003500:	9a08      	ldr	r2, [sp, #32]
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	2b0e      	cmp	r3, #14
 8003508:	f200 80a8 	bhi.w	800365c <_dtoa_r+0x47c>
 800350c:	2c00      	cmp	r4, #0
 800350e:	f000 80a5 	beq.w	800365c <_dtoa_r+0x47c>
 8003512:	f1b9 0f00 	cmp.w	r9, #0
 8003516:	dd34      	ble.n	8003582 <_dtoa_r+0x3a2>
 8003518:	4a9a      	ldr	r2, [pc, #616]	; (8003784 <_dtoa_r+0x5a4>)
 800351a:	f009 030f 	and.w	r3, r9, #15
 800351e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003522:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800352a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800352e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003532:	d016      	beq.n	8003562 <_dtoa_r+0x382>
 8003534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003538:	4b93      	ldr	r3, [pc, #588]	; (8003788 <_dtoa_r+0x5a8>)
 800353a:	2703      	movs	r7, #3
 800353c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003540:	f7fd f8f4 	bl	800072c <__aeabi_ddiv>
 8003544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003548:	f004 040f 	and.w	r4, r4, #15
 800354c:	4e8e      	ldr	r6, [pc, #568]	; (8003788 <_dtoa_r+0x5a8>)
 800354e:	b954      	cbnz	r4, 8003566 <_dtoa_r+0x386>
 8003550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003558:	f7fd f8e8 	bl	800072c <__aeabi_ddiv>
 800355c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003560:	e029      	b.n	80035b6 <_dtoa_r+0x3d6>
 8003562:	2702      	movs	r7, #2
 8003564:	e7f2      	b.n	800354c <_dtoa_r+0x36c>
 8003566:	07e1      	lsls	r1, r4, #31
 8003568:	d508      	bpl.n	800357c <_dtoa_r+0x39c>
 800356a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800356e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003572:	f7fc ffb1 	bl	80004d8 <__aeabi_dmul>
 8003576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800357a:	3701      	adds	r7, #1
 800357c:	1064      	asrs	r4, r4, #1
 800357e:	3608      	adds	r6, #8
 8003580:	e7e5      	b.n	800354e <_dtoa_r+0x36e>
 8003582:	f000 80a5 	beq.w	80036d0 <_dtoa_r+0x4f0>
 8003586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800358a:	f1c9 0400 	rsb	r4, r9, #0
 800358e:	4b7d      	ldr	r3, [pc, #500]	; (8003784 <_dtoa_r+0x5a4>)
 8003590:	f004 020f 	and.w	r2, r4, #15
 8003594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fc ff9c 	bl	80004d8 <__aeabi_dmul>
 80035a0:	2702      	movs	r7, #2
 80035a2:	2300      	movs	r3, #0
 80035a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035a8:	4e77      	ldr	r6, [pc, #476]	; (8003788 <_dtoa_r+0x5a8>)
 80035aa:	1124      	asrs	r4, r4, #4
 80035ac:	2c00      	cmp	r4, #0
 80035ae:	f040 8084 	bne.w	80036ba <_dtoa_r+0x4da>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1d2      	bne.n	800355c <_dtoa_r+0x37c>
 80035b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 808b 	beq.w	80036d4 <_dtoa_r+0x4f4>
 80035be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80035c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80035c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035ca:	2200      	movs	r2, #0
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <_dtoa_r+0x5ac>)
 80035ce:	f7fd f9f5 	bl	80009bc <__aeabi_dcmplt>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d07e      	beq.n	80036d4 <_dtoa_r+0x4f4>
 80035d6:	9b02      	ldr	r3, [sp, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d07b      	beq.n	80036d4 <_dtoa_r+0x4f4>
 80035dc:	f1bb 0f00 	cmp.w	fp, #0
 80035e0:	dd38      	ble.n	8003654 <_dtoa_r+0x474>
 80035e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035e6:	2200      	movs	r2, #0
 80035e8:	4b69      	ldr	r3, [pc, #420]	; (8003790 <_dtoa_r+0x5b0>)
 80035ea:	f7fc ff75 	bl	80004d8 <__aeabi_dmul>
 80035ee:	465c      	mov	r4, fp
 80035f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035f4:	f109 38ff 	add.w	r8, r9, #4294967295
 80035f8:	3701      	adds	r7, #1
 80035fa:	4638      	mov	r0, r7
 80035fc:	f7fc ff02 	bl	8000404 <__aeabi_i2d>
 8003600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003604:	f7fc ff68 	bl	80004d8 <__aeabi_dmul>
 8003608:	2200      	movs	r2, #0
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <_dtoa_r+0x5b4>)
 800360c:	f7fc fdae 	bl	800016c <__adddf3>
 8003610:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003614:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003618:	9611      	str	r6, [sp, #68]	; 0x44
 800361a:	2c00      	cmp	r4, #0
 800361c:	d15d      	bne.n	80036da <_dtoa_r+0x4fa>
 800361e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003622:	2200      	movs	r2, #0
 8003624:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <_dtoa_r+0x5b8>)
 8003626:	f7fc fd9f 	bl	8000168 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003632:	4633      	mov	r3, r6
 8003634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003636:	f7fd f9df 	bl	80009f8 <__aeabi_dcmpgt>
 800363a:	2800      	cmp	r0, #0
 800363c:	f040 829e 	bne.w	8003b7c <_dtoa_r+0x99c>
 8003640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003646:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800364a:	f7fd f9b7 	bl	80009bc <__aeabi_dcmplt>
 800364e:	2800      	cmp	r0, #0
 8003650:	f040 8292 	bne.w	8003b78 <_dtoa_r+0x998>
 8003654:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003658:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800365c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800365e:	2b00      	cmp	r3, #0
 8003660:	f2c0 8153 	blt.w	800390a <_dtoa_r+0x72a>
 8003664:	f1b9 0f0e 	cmp.w	r9, #14
 8003668:	f300 814f 	bgt.w	800390a <_dtoa_r+0x72a>
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <_dtoa_r+0x5a4>)
 800366e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003672:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003676:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800367a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800367c:	2b00      	cmp	r3, #0
 800367e:	f280 80db 	bge.w	8003838 <_dtoa_r+0x658>
 8003682:	9b02      	ldr	r3, [sp, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f300 80d7 	bgt.w	8003838 <_dtoa_r+0x658>
 800368a:	f040 8274 	bne.w	8003b76 <_dtoa_r+0x996>
 800368e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003692:	2200      	movs	r2, #0
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <_dtoa_r+0x5b8>)
 8003696:	f7fc ff1f 	bl	80004d8 <__aeabi_dmul>
 800369a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800369e:	f7fd f9a1 	bl	80009e4 <__aeabi_dcmpge>
 80036a2:	9c02      	ldr	r4, [sp, #8]
 80036a4:	4626      	mov	r6, r4
 80036a6:	2800      	cmp	r0, #0
 80036a8:	f040 824a 	bne.w	8003b40 <_dtoa_r+0x960>
 80036ac:	2331      	movs	r3, #49	; 0x31
 80036ae:	9f08      	ldr	r7, [sp, #32]
 80036b0:	f109 0901 	add.w	r9, r9, #1
 80036b4:	f807 3b01 	strb.w	r3, [r7], #1
 80036b8:	e246      	b.n	8003b48 <_dtoa_r+0x968>
 80036ba:	07e2      	lsls	r2, r4, #31
 80036bc:	d505      	bpl.n	80036ca <_dtoa_r+0x4ea>
 80036be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80036c2:	f7fc ff09 	bl	80004d8 <__aeabi_dmul>
 80036c6:	2301      	movs	r3, #1
 80036c8:	3701      	adds	r7, #1
 80036ca:	1064      	asrs	r4, r4, #1
 80036cc:	3608      	adds	r6, #8
 80036ce:	e76d      	b.n	80035ac <_dtoa_r+0x3cc>
 80036d0:	2702      	movs	r7, #2
 80036d2:	e770      	b.n	80035b6 <_dtoa_r+0x3d6>
 80036d4:	46c8      	mov	r8, r9
 80036d6:	9c02      	ldr	r4, [sp, #8]
 80036d8:	e78f      	b.n	80035fa <_dtoa_r+0x41a>
 80036da:	9908      	ldr	r1, [sp, #32]
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <_dtoa_r+0x5a4>)
 80036de:	4421      	add	r1, r4
 80036e0:	9112      	str	r1, [sp, #72]	; 0x48
 80036e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80036ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d055      	beq.n	80037a0 <_dtoa_r+0x5c0>
 80036f4:	2000      	movs	r0, #0
 80036f6:	4929      	ldr	r1, [pc, #164]	; (800379c <_dtoa_r+0x5bc>)
 80036f8:	f7fd f818 	bl	800072c <__aeabi_ddiv>
 80036fc:	463b      	mov	r3, r7
 80036fe:	4632      	mov	r2, r6
 8003700:	f7fc fd32 	bl	8000168 <__aeabi_dsub>
 8003704:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003708:	9f08      	ldr	r7, [sp, #32]
 800370a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800370e:	f7fd f993 	bl	8000a38 <__aeabi_d2iz>
 8003712:	4604      	mov	r4, r0
 8003714:	f7fc fe76 	bl	8000404 <__aeabi_i2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003720:	f7fc fd22 	bl	8000168 <__aeabi_dsub>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	3430      	adds	r4, #48	; 0x30
 800372a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800372e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003732:	f807 4b01 	strb.w	r4, [r7], #1
 8003736:	f7fd f941 	bl	80009bc <__aeabi_dcmplt>
 800373a:	2800      	cmp	r0, #0
 800373c:	d174      	bne.n	8003828 <_dtoa_r+0x648>
 800373e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003742:	2000      	movs	r0, #0
 8003744:	4911      	ldr	r1, [pc, #68]	; (800378c <_dtoa_r+0x5ac>)
 8003746:	f7fc fd0f 	bl	8000168 <__aeabi_dsub>
 800374a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800374e:	f7fd f935 	bl	80009bc <__aeabi_dcmplt>
 8003752:	2800      	cmp	r0, #0
 8003754:	f040 80b6 	bne.w	80038c4 <_dtoa_r+0x6e4>
 8003758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800375a:	429f      	cmp	r7, r3
 800375c:	f43f af7a 	beq.w	8003654 <_dtoa_r+0x474>
 8003760:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003764:	2200      	movs	r2, #0
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <_dtoa_r+0x5b0>)
 8003768:	f7fc feb6 	bl	80004d8 <__aeabi_dmul>
 800376c:	2200      	movs	r2, #0
 800376e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <_dtoa_r+0x5b0>)
 8003778:	f7fc feae 	bl	80004d8 <__aeabi_dmul>
 800377c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003780:	e7c3      	b.n	800370a <_dtoa_r+0x52a>
 8003782:	bf00      	nop
 8003784:	08005348 	.word	0x08005348
 8003788:	08005320 	.word	0x08005320
 800378c:	3ff00000 	.word	0x3ff00000
 8003790:	40240000 	.word	0x40240000
 8003794:	401c0000 	.word	0x401c0000
 8003798:	40140000 	.word	0x40140000
 800379c:	3fe00000 	.word	0x3fe00000
 80037a0:	4630      	mov	r0, r6
 80037a2:	4639      	mov	r1, r7
 80037a4:	f7fc fe98 	bl	80004d8 <__aeabi_dmul>
 80037a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037ae:	9c08      	ldr	r4, [sp, #32]
 80037b0:	9314      	str	r3, [sp, #80]	; 0x50
 80037b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037b6:	f7fd f93f 	bl	8000a38 <__aeabi_d2iz>
 80037ba:	9015      	str	r0, [sp, #84]	; 0x54
 80037bc:	f7fc fe22 	bl	8000404 <__aeabi_i2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037c8:	f7fc fcce 	bl	8000168 <__aeabi_dsub>
 80037cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037ce:	4606      	mov	r6, r0
 80037d0:	3330      	adds	r3, #48	; 0x30
 80037d2:	f804 3b01 	strb.w	r3, [r4], #1
 80037d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037d8:	460f      	mov	r7, r1
 80037da:	429c      	cmp	r4, r3
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	d124      	bne.n	800382c <_dtoa_r+0x64c>
 80037e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037e6:	4bb3      	ldr	r3, [pc, #716]	; (8003ab4 <_dtoa_r+0x8d4>)
 80037e8:	f7fc fcc0 	bl	800016c <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4630      	mov	r0, r6
 80037f2:	4639      	mov	r1, r7
 80037f4:	f7fd f900 	bl	80009f8 <__aeabi_dcmpgt>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d162      	bne.n	80038c2 <_dtoa_r+0x6e2>
 80037fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003800:	2000      	movs	r0, #0
 8003802:	49ac      	ldr	r1, [pc, #688]	; (8003ab4 <_dtoa_r+0x8d4>)
 8003804:	f7fc fcb0 	bl	8000168 <__aeabi_dsub>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4630      	mov	r0, r6
 800380e:	4639      	mov	r1, r7
 8003810:	f7fd f8d4 	bl	80009bc <__aeabi_dcmplt>
 8003814:	2800      	cmp	r0, #0
 8003816:	f43f af1d 	beq.w	8003654 <_dtoa_r+0x474>
 800381a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800381c:	1e7b      	subs	r3, r7, #1
 800381e:	9314      	str	r3, [sp, #80]	; 0x50
 8003820:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003824:	2b30      	cmp	r3, #48	; 0x30
 8003826:	d0f8      	beq.n	800381a <_dtoa_r+0x63a>
 8003828:	46c1      	mov	r9, r8
 800382a:	e03a      	b.n	80038a2 <_dtoa_r+0x6c2>
 800382c:	4ba2      	ldr	r3, [pc, #648]	; (8003ab8 <_dtoa_r+0x8d8>)
 800382e:	f7fc fe53 	bl	80004d8 <__aeabi_dmul>
 8003832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003836:	e7bc      	b.n	80037b2 <_dtoa_r+0x5d2>
 8003838:	9f08      	ldr	r7, [sp, #32]
 800383a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800383e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003842:	f7fc ff73 	bl	800072c <__aeabi_ddiv>
 8003846:	f7fd f8f7 	bl	8000a38 <__aeabi_d2iz>
 800384a:	4604      	mov	r4, r0
 800384c:	f7fc fdda 	bl	8000404 <__aeabi_i2d>
 8003850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003854:	f7fc fe40 	bl	80004d8 <__aeabi_dmul>
 8003858:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800385c:	460b      	mov	r3, r1
 800385e:	4602      	mov	r2, r0
 8003860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003864:	f7fc fc80 	bl	8000168 <__aeabi_dsub>
 8003868:	f807 6b01 	strb.w	r6, [r7], #1
 800386c:	9e08      	ldr	r6, [sp, #32]
 800386e:	9b02      	ldr	r3, [sp, #8]
 8003870:	1bbe      	subs	r6, r7, r6
 8003872:	42b3      	cmp	r3, r6
 8003874:	d13a      	bne.n	80038ec <_dtoa_r+0x70c>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	f7fc fc77 	bl	800016c <__adddf3>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800388a:	f7fd f8b5 	bl	80009f8 <__aeabi_dcmpgt>
 800388e:	bb58      	cbnz	r0, 80038e8 <_dtoa_r+0x708>
 8003890:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003898:	f7fd f886 	bl	80009a8 <__aeabi_dcmpeq>
 800389c:	b108      	cbz	r0, 80038a2 <_dtoa_r+0x6c2>
 800389e:	07e1      	lsls	r1, r4, #31
 80038a0:	d422      	bmi.n	80038e8 <_dtoa_r+0x708>
 80038a2:	4628      	mov	r0, r5
 80038a4:	4651      	mov	r1, sl
 80038a6:	f000 faf1 	bl	8003e8c <_Bfree>
 80038aa:	2300      	movs	r3, #0
 80038ac:	703b      	strb	r3, [r7, #0]
 80038ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80038b0:	f109 0001 	add.w	r0, r9, #1
 80038b4:	6018      	str	r0, [r3, #0]
 80038b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f43f acdf 	beq.w	800327c <_dtoa_r+0x9c>
 80038be:	601f      	str	r7, [r3, #0]
 80038c0:	e4dc      	b.n	800327c <_dtoa_r+0x9c>
 80038c2:	4627      	mov	r7, r4
 80038c4:	463b      	mov	r3, r7
 80038c6:	461f      	mov	r7, r3
 80038c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038cc:	2a39      	cmp	r2, #57	; 0x39
 80038ce:	d107      	bne.n	80038e0 <_dtoa_r+0x700>
 80038d0:	9a08      	ldr	r2, [sp, #32]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d1f7      	bne.n	80038c6 <_dtoa_r+0x6e6>
 80038d6:	2230      	movs	r2, #48	; 0x30
 80038d8:	9908      	ldr	r1, [sp, #32]
 80038da:	f108 0801 	add.w	r8, r8, #1
 80038de:	700a      	strb	r2, [r1, #0]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	3201      	adds	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e79f      	b.n	8003828 <_dtoa_r+0x648>
 80038e8:	46c8      	mov	r8, r9
 80038ea:	e7eb      	b.n	80038c4 <_dtoa_r+0x6e4>
 80038ec:	2200      	movs	r2, #0
 80038ee:	4b72      	ldr	r3, [pc, #456]	; (8003ab8 <_dtoa_r+0x8d8>)
 80038f0:	f7fc fdf2 	bl	80004d8 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2300      	movs	r3, #0
 8003900:	f7fd f852 	bl	80009a8 <__aeabi_dcmpeq>
 8003904:	2800      	cmp	r0, #0
 8003906:	d098      	beq.n	800383a <_dtoa_r+0x65a>
 8003908:	e7cb      	b.n	80038a2 <_dtoa_r+0x6c2>
 800390a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800390c:	2a00      	cmp	r2, #0
 800390e:	f000 80cd 	beq.w	8003aac <_dtoa_r+0x8cc>
 8003912:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003914:	2a01      	cmp	r2, #1
 8003916:	f300 80af 	bgt.w	8003a78 <_dtoa_r+0x898>
 800391a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800391c:	2a00      	cmp	r2, #0
 800391e:	f000 80a7 	beq.w	8003a70 <_dtoa_r+0x890>
 8003922:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003928:	9f06      	ldr	r7, [sp, #24]
 800392a:	9a06      	ldr	r2, [sp, #24]
 800392c:	2101      	movs	r1, #1
 800392e:	441a      	add	r2, r3
 8003930:	9206      	str	r2, [sp, #24]
 8003932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003934:	4628      	mov	r0, r5
 8003936:	441a      	add	r2, r3
 8003938:	9209      	str	r2, [sp, #36]	; 0x24
 800393a:	f000 fb61 	bl	8004000 <__i2b>
 800393e:	4606      	mov	r6, r0
 8003940:	2f00      	cmp	r7, #0
 8003942:	dd0c      	ble.n	800395e <_dtoa_r+0x77e>
 8003944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	dd09      	ble.n	800395e <_dtoa_r+0x77e>
 800394a:	42bb      	cmp	r3, r7
 800394c:	bfa8      	it	ge
 800394e:	463b      	movge	r3, r7
 8003950:	9a06      	ldr	r2, [sp, #24]
 8003952:	1aff      	subs	r7, r7, r3
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	9206      	str	r2, [sp, #24]
 8003958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	9309      	str	r3, [sp, #36]	; 0x24
 800395e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003960:	b1f3      	cbz	r3, 80039a0 <_dtoa_r+0x7c0>
 8003962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a9 	beq.w	8003abc <_dtoa_r+0x8dc>
 800396a:	2c00      	cmp	r4, #0
 800396c:	dd10      	ble.n	8003990 <_dtoa_r+0x7b0>
 800396e:	4631      	mov	r1, r6
 8003970:	4622      	mov	r2, r4
 8003972:	4628      	mov	r0, r5
 8003974:	f000 fbfe 	bl	8004174 <__pow5mult>
 8003978:	4652      	mov	r2, sl
 800397a:	4601      	mov	r1, r0
 800397c:	4606      	mov	r6, r0
 800397e:	4628      	mov	r0, r5
 8003980:	f000 fb54 	bl	800402c <__multiply>
 8003984:	4680      	mov	r8, r0
 8003986:	4651      	mov	r1, sl
 8003988:	4628      	mov	r0, r5
 800398a:	f000 fa7f 	bl	8003e8c <_Bfree>
 800398e:	46c2      	mov	sl, r8
 8003990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003992:	1b1a      	subs	r2, r3, r4
 8003994:	d004      	beq.n	80039a0 <_dtoa_r+0x7c0>
 8003996:	4651      	mov	r1, sl
 8003998:	4628      	mov	r0, r5
 800399a:	f000 fbeb 	bl	8004174 <__pow5mult>
 800399e:	4682      	mov	sl, r0
 80039a0:	2101      	movs	r1, #1
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 fb2c 	bl	8004000 <__i2b>
 80039a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039aa:	4604      	mov	r4, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f340 8087 	ble.w	8003ac0 <_dtoa_r+0x8e0>
 80039b2:	461a      	mov	r2, r3
 80039b4:	4601      	mov	r1, r0
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 fbdc 	bl	8004174 <__pow5mult>
 80039bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039be:	4604      	mov	r4, r0
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	f340 8080 	ble.w	8003ac6 <_dtoa_r+0x8e6>
 80039c6:	f04f 0800 	mov.w	r8, #0
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80039d0:	6918      	ldr	r0, [r3, #16]
 80039d2:	f000 fac7 	bl	8003f64 <__hi0bits>
 80039d6:	f1c0 0020 	rsb	r0, r0, #32
 80039da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039dc:	4418      	add	r0, r3
 80039de:	f010 001f 	ands.w	r0, r0, #31
 80039e2:	f000 8092 	beq.w	8003b0a <_dtoa_r+0x92a>
 80039e6:	f1c0 0320 	rsb	r3, r0, #32
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	f340 808a 	ble.w	8003b04 <_dtoa_r+0x924>
 80039f0:	f1c0 001c 	rsb	r0, r0, #28
 80039f4:	9b06      	ldr	r3, [sp, #24]
 80039f6:	4407      	add	r7, r0
 80039f8:	4403      	add	r3, r0
 80039fa:	9306      	str	r3, [sp, #24]
 80039fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fe:	4403      	add	r3, r0
 8003a00:	9309      	str	r3, [sp, #36]	; 0x24
 8003a02:	9b06      	ldr	r3, [sp, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dd05      	ble.n	8003a14 <_dtoa_r+0x834>
 8003a08:	4651      	mov	r1, sl
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f000 fc0b 	bl	8004228 <__lshift>
 8003a12:	4682      	mov	sl, r0
 8003a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	dd05      	ble.n	8003a26 <_dtoa_r+0x846>
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 fc02 	bl	8004228 <__lshift>
 8003a24:	4604      	mov	r4, r0
 8003a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d070      	beq.n	8003b0e <_dtoa_r+0x92e>
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4650      	mov	r0, sl
 8003a30:	f000 fc66 	bl	8004300 <__mcmp>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	da6a      	bge.n	8003b0e <_dtoa_r+0x92e>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	220a      	movs	r2, #10
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f000 fa46 	bl	8003ed0 <__multadd>
 8003a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a46:	4682      	mov	sl, r0
 8003a48:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8193 	beq.w	8003d78 <_dtoa_r+0xb98>
 8003a52:	4631      	mov	r1, r6
 8003a54:	2300      	movs	r3, #0
 8003a56:	220a      	movs	r2, #10
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 fa39 	bl	8003ed0 <__multadd>
 8003a5e:	f1bb 0f00 	cmp.w	fp, #0
 8003a62:	4606      	mov	r6, r0
 8003a64:	f300 8093 	bgt.w	8003b8e <_dtoa_r+0x9ae>
 8003a68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	dc57      	bgt.n	8003b1e <_dtoa_r+0x93e>
 8003a6e:	e08e      	b.n	8003b8e <_dtoa_r+0x9ae>
 8003a70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a76:	e756      	b.n	8003926 <_dtoa_r+0x746>
 8003a78:	9b02      	ldr	r3, [sp, #8]
 8003a7a:	1e5c      	subs	r4, r3, #1
 8003a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	bfb7      	itett	lt
 8003a82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003a84:	1b1c      	subge	r4, r3, r4
 8003a86:	1ae2      	sublt	r2, r4, r3
 8003a88:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003a8a:	bfbe      	ittt	lt
 8003a8c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003a8e:	189b      	addlt	r3, r3, r2
 8003a90:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003a92:	9b02      	ldr	r3, [sp, #8]
 8003a94:	bfb8      	it	lt
 8003a96:	2400      	movlt	r4, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bfbb      	ittet	lt
 8003a9c:	9b06      	ldrlt	r3, [sp, #24]
 8003a9e:	9a02      	ldrlt	r2, [sp, #8]
 8003aa0:	9f06      	ldrge	r7, [sp, #24]
 8003aa2:	1a9f      	sublt	r7, r3, r2
 8003aa4:	bfac      	ite	ge
 8003aa6:	9b02      	ldrge	r3, [sp, #8]
 8003aa8:	2300      	movlt	r3, #0
 8003aaa:	e73e      	b.n	800392a <_dtoa_r+0x74a>
 8003aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003aae:	9f06      	ldr	r7, [sp, #24]
 8003ab0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003ab2:	e745      	b.n	8003940 <_dtoa_r+0x760>
 8003ab4:	3fe00000 	.word	0x3fe00000
 8003ab8:	40240000 	.word	0x40240000
 8003abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003abe:	e76a      	b.n	8003996 <_dtoa_r+0x7b6>
 8003ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	dc19      	bgt.n	8003afa <_dtoa_r+0x91a>
 8003ac6:	9b04      	ldr	r3, [sp, #16]
 8003ac8:	b9bb      	cbnz	r3, 8003afa <_dtoa_r+0x91a>
 8003aca:	9b05      	ldr	r3, [sp, #20]
 8003acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad0:	b99b      	cbnz	r3, 8003afa <_dtoa_r+0x91a>
 8003ad2:	9b05      	ldr	r3, [sp, #20]
 8003ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	051b      	lsls	r3, r3, #20
 8003adc:	b183      	cbz	r3, 8003b00 <_dtoa_r+0x920>
 8003ade:	f04f 0801 	mov.w	r8, #1
 8003ae2:	9b06      	ldr	r3, [sp, #24]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	9306      	str	r3, [sp, #24]
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	3301      	adds	r3, #1
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af6a 	bne.w	80039ca <_dtoa_r+0x7ea>
 8003af6:	2001      	movs	r0, #1
 8003af8:	e76f      	b.n	80039da <_dtoa_r+0x7fa>
 8003afa:	f04f 0800 	mov.w	r8, #0
 8003afe:	e7f6      	b.n	8003aee <_dtoa_r+0x90e>
 8003b00:	4698      	mov	r8, r3
 8003b02:	e7f4      	b.n	8003aee <_dtoa_r+0x90e>
 8003b04:	f43f af7d 	beq.w	8003a02 <_dtoa_r+0x822>
 8003b08:	4618      	mov	r0, r3
 8003b0a:	301c      	adds	r0, #28
 8003b0c:	e772      	b.n	80039f4 <_dtoa_r+0x814>
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dc36      	bgt.n	8003b82 <_dtoa_r+0x9a2>
 8003b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	dd33      	ble.n	8003b82 <_dtoa_r+0x9a2>
 8003b1a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003b1e:	f1bb 0f00 	cmp.w	fp, #0
 8003b22:	d10d      	bne.n	8003b40 <_dtoa_r+0x960>
 8003b24:	4621      	mov	r1, r4
 8003b26:	465b      	mov	r3, fp
 8003b28:	2205      	movs	r2, #5
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 f9d0 	bl	8003ed0 <__multadd>
 8003b30:	4601      	mov	r1, r0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4650      	mov	r0, sl
 8003b36:	f000 fbe3 	bl	8004300 <__mcmp>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f73f adb6 	bgt.w	80036ac <_dtoa_r+0x4cc>
 8003b40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b42:	9f08      	ldr	r7, [sp, #32]
 8003b44:	ea6f 0903 	mvn.w	r9, r3
 8003b48:	f04f 0800 	mov.w	r8, #0
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f000 f99c 	bl	8003e8c <_Bfree>
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	f43f aea4 	beq.w	80038a2 <_dtoa_r+0x6c2>
 8003b5a:	f1b8 0f00 	cmp.w	r8, #0
 8003b5e:	d005      	beq.n	8003b6c <_dtoa_r+0x98c>
 8003b60:	45b0      	cmp	r8, r6
 8003b62:	d003      	beq.n	8003b6c <_dtoa_r+0x98c>
 8003b64:	4641      	mov	r1, r8
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f990 	bl	8003e8c <_Bfree>
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f98c 	bl	8003e8c <_Bfree>
 8003b74:	e695      	b.n	80038a2 <_dtoa_r+0x6c2>
 8003b76:	2400      	movs	r4, #0
 8003b78:	4626      	mov	r6, r4
 8003b7a:	e7e1      	b.n	8003b40 <_dtoa_r+0x960>
 8003b7c:	46c1      	mov	r9, r8
 8003b7e:	4626      	mov	r6, r4
 8003b80:	e594      	b.n	80036ac <_dtoa_r+0x4cc>
 8003b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b84:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80fc 	beq.w	8003d86 <_dtoa_r+0xba6>
 8003b8e:	2f00      	cmp	r7, #0
 8003b90:	dd05      	ble.n	8003b9e <_dtoa_r+0x9be>
 8003b92:	4631      	mov	r1, r6
 8003b94:	463a      	mov	r2, r7
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 fb46 	bl	8004228 <__lshift>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ba2:	d05c      	beq.n	8003c5e <_dtoa_r+0xa7e>
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	6871      	ldr	r1, [r6, #4]
 8003ba8:	f000 f930 	bl	8003e0c <_Balloc>
 8003bac:	4607      	mov	r7, r0
 8003bae:	b928      	cbnz	r0, 8003bbc <_dtoa_r+0x9dc>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003bb6:	4b7e      	ldr	r3, [pc, #504]	; (8003db0 <_dtoa_r+0xbd0>)
 8003bb8:	f7ff bb26 	b.w	8003208 <_dtoa_r+0x28>
 8003bbc:	6932      	ldr	r2, [r6, #16]
 8003bbe:	f106 010c 	add.w	r1, r6, #12
 8003bc2:	3202      	adds	r2, #2
 8003bc4:	0092      	lsls	r2, r2, #2
 8003bc6:	300c      	adds	r0, #12
 8003bc8:	f000 f912 	bl	8003df0 <memcpy>
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4639      	mov	r1, r7
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fb29 	bl	8004228 <__lshift>
 8003bd6:	46b0      	mov	r8, r6
 8003bd8:	4606      	mov	r6, r0
 8003bda:	9b08      	ldr	r3, [sp, #32]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	9b08      	ldr	r3, [sp, #32]
 8003be2:	445b      	add	r3, fp
 8003be4:	930a      	str	r3, [sp, #40]	; 0x28
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	9309      	str	r3, [sp, #36]	; 0x24
 8003bee:	9b02      	ldr	r3, [sp, #8]
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	f103 3bff 	add.w	fp, r3, #4294967295
 8003bf8:	f7ff fa62 	bl	80030c0 <quorem>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4641      	mov	r1, r8
 8003c00:	3330      	adds	r3, #48	; 0x30
 8003c02:	9004      	str	r0, [sp, #16]
 8003c04:	4650      	mov	r0, sl
 8003c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c08:	f000 fb7a 	bl	8004300 <__mcmp>
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	9006      	str	r0, [sp, #24]
 8003c10:	4621      	mov	r1, r4
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 fb90 	bl	8004338 <__mdiff>
 8003c18:	68c2      	ldr	r2, [r0, #12]
 8003c1a:	4607      	mov	r7, r0
 8003c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c1e:	bb02      	cbnz	r2, 8003c62 <_dtoa_r+0xa82>
 8003c20:	4601      	mov	r1, r0
 8003c22:	4650      	mov	r0, sl
 8003c24:	f000 fb6c 	bl	8004300 <__mcmp>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	4628      	mov	r0, r5
 8003c30:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003c34:	f000 f92a 	bl	8003e8c <_Bfree>
 8003c38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c3c:	9f02      	ldr	r7, [sp, #8]
 8003c3e:	ea43 0102 	orr.w	r1, r3, r2
 8003c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c44:	430b      	orrs	r3, r1
 8003c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c48:	d10d      	bne.n	8003c66 <_dtoa_r+0xa86>
 8003c4a:	2b39      	cmp	r3, #57	; 0x39
 8003c4c:	d027      	beq.n	8003c9e <_dtoa_r+0xabe>
 8003c4e:	9a06      	ldr	r2, [sp, #24]
 8003c50:	2a00      	cmp	r2, #0
 8003c52:	dd01      	ble.n	8003c58 <_dtoa_r+0xa78>
 8003c54:	9b04      	ldr	r3, [sp, #16]
 8003c56:	3331      	adds	r3, #49	; 0x31
 8003c58:	f88b 3000 	strb.w	r3, [fp]
 8003c5c:	e776      	b.n	8003b4c <_dtoa_r+0x96c>
 8003c5e:	4630      	mov	r0, r6
 8003c60:	e7b9      	b.n	8003bd6 <_dtoa_r+0x9f6>
 8003c62:	2201      	movs	r2, #1
 8003c64:	e7e2      	b.n	8003c2c <_dtoa_r+0xa4c>
 8003c66:	9906      	ldr	r1, [sp, #24]
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	db04      	blt.n	8003c76 <_dtoa_r+0xa96>
 8003c6c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003c6e:	4301      	orrs	r1, r0
 8003c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c72:	4301      	orrs	r1, r0
 8003c74:	d120      	bne.n	8003cb8 <_dtoa_r+0xad8>
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	ddee      	ble.n	8003c58 <_dtoa_r+0xa78>
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4628      	mov	r0, r5
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	f000 fad1 	bl	8004228 <__lshift>
 8003c86:	4621      	mov	r1, r4
 8003c88:	4682      	mov	sl, r0
 8003c8a:	f000 fb39 	bl	8004300 <__mcmp>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	9b02      	ldr	r3, [sp, #8]
 8003c92:	dc02      	bgt.n	8003c9a <_dtoa_r+0xaba>
 8003c94:	d1e0      	bne.n	8003c58 <_dtoa_r+0xa78>
 8003c96:	07da      	lsls	r2, r3, #31
 8003c98:	d5de      	bpl.n	8003c58 <_dtoa_r+0xa78>
 8003c9a:	2b39      	cmp	r3, #57	; 0x39
 8003c9c:	d1da      	bne.n	8003c54 <_dtoa_r+0xa74>
 8003c9e:	2339      	movs	r3, #57	; 0x39
 8003ca0:	f88b 3000 	strb.w	r3, [fp]
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	2a39      	cmp	r2, #57	; 0x39
 8003cb0:	d050      	beq.n	8003d54 <_dtoa_r+0xb74>
 8003cb2:	3201      	adds	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e749      	b.n	8003b4c <_dtoa_r+0x96c>
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	dd03      	ble.n	8003cc4 <_dtoa_r+0xae4>
 8003cbc:	2b39      	cmp	r3, #57	; 0x39
 8003cbe:	d0ee      	beq.n	8003c9e <_dtoa_r+0xabe>
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e7c9      	b.n	8003c58 <_dtoa_r+0xa78>
 8003cc4:	9a02      	ldr	r2, [sp, #8]
 8003cc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cc8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ccc:	428a      	cmp	r2, r1
 8003cce:	d02a      	beq.n	8003d26 <_dtoa_r+0xb46>
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 f8fa 	bl	8003ed0 <__multadd>
 8003cdc:	45b0      	cmp	r8, r6
 8003cde:	4682      	mov	sl, r0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	f04f 020a 	mov.w	r2, #10
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4628      	mov	r0, r5
 8003cec:	d107      	bne.n	8003cfe <_dtoa_r+0xb1e>
 8003cee:	f000 f8ef 	bl	8003ed0 <__multadd>
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	9b02      	ldr	r3, [sp, #8]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	9302      	str	r3, [sp, #8]
 8003cfc:	e777      	b.n	8003bee <_dtoa_r+0xa0e>
 8003cfe:	f000 f8e7 	bl	8003ed0 <__multadd>
 8003d02:	4631      	mov	r1, r6
 8003d04:	4680      	mov	r8, r0
 8003d06:	2300      	movs	r3, #0
 8003d08:	220a      	movs	r2, #10
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f8e0 	bl	8003ed0 <__multadd>
 8003d10:	4606      	mov	r6, r0
 8003d12:	e7f0      	b.n	8003cf6 <_dtoa_r+0xb16>
 8003d14:	f1bb 0f00 	cmp.w	fp, #0
 8003d18:	bfcc      	ite	gt
 8003d1a:	465f      	movgt	r7, fp
 8003d1c:	2701      	movle	r7, #1
 8003d1e:	f04f 0800 	mov.w	r8, #0
 8003d22:	9a08      	ldr	r2, [sp, #32]
 8003d24:	4417      	add	r7, r2
 8003d26:	4651      	mov	r1, sl
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	9302      	str	r3, [sp, #8]
 8003d2e:	f000 fa7b 	bl	8004228 <__lshift>
 8003d32:	4621      	mov	r1, r4
 8003d34:	4682      	mov	sl, r0
 8003d36:	f000 fae3 	bl	8004300 <__mcmp>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	dcb2      	bgt.n	8003ca4 <_dtoa_r+0xac4>
 8003d3e:	d102      	bne.n	8003d46 <_dtoa_r+0xb66>
 8003d40:	9b02      	ldr	r3, [sp, #8]
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d4ae      	bmi.n	8003ca4 <_dtoa_r+0xac4>
 8003d46:	463b      	mov	r3, r7
 8003d48:	461f      	mov	r7, r3
 8003d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d4e:	2a30      	cmp	r2, #48	; 0x30
 8003d50:	d0fa      	beq.n	8003d48 <_dtoa_r+0xb68>
 8003d52:	e6fb      	b.n	8003b4c <_dtoa_r+0x96c>
 8003d54:	9a08      	ldr	r2, [sp, #32]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d1a5      	bne.n	8003ca6 <_dtoa_r+0xac6>
 8003d5a:	2331      	movs	r3, #49	; 0x31
 8003d5c:	f109 0901 	add.w	r9, r9, #1
 8003d60:	7013      	strb	r3, [r2, #0]
 8003d62:	e6f3      	b.n	8003b4c <_dtoa_r+0x96c>
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <_dtoa_r+0xbd4>)
 8003d66:	f7ff baa7 	b.w	80032b8 <_dtoa_r+0xd8>
 8003d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f aa80 	bne.w	8003272 <_dtoa_r+0x92>
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <_dtoa_r+0xbd8>)
 8003d74:	f7ff baa0 	b.w	80032b8 <_dtoa_r+0xd8>
 8003d78:	f1bb 0f00 	cmp.w	fp, #0
 8003d7c:	dc03      	bgt.n	8003d86 <_dtoa_r+0xba6>
 8003d7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f73f aecc 	bgt.w	8003b1e <_dtoa_r+0x93e>
 8003d86:	9f08      	ldr	r7, [sp, #32]
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4650      	mov	r0, sl
 8003d8c:	f7ff f998 	bl	80030c0 <quorem>
 8003d90:	9a08      	ldr	r2, [sp, #32]
 8003d92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003d96:	f807 3b01 	strb.w	r3, [r7], #1
 8003d9a:	1aba      	subs	r2, r7, r2
 8003d9c:	4593      	cmp	fp, r2
 8003d9e:	ddb9      	ble.n	8003d14 <_dtoa_r+0xb34>
 8003da0:	4651      	mov	r1, sl
 8003da2:	2300      	movs	r3, #0
 8003da4:	220a      	movs	r2, #10
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 f892 	bl	8003ed0 <__multadd>
 8003dac:	4682      	mov	sl, r0
 8003dae:	e7eb      	b.n	8003d88 <_dtoa_r+0xba8>
 8003db0:	080052ab 	.word	0x080052ab
 8003db4:	08005204 	.word	0x08005204
 8003db8:	08005228 	.word	0x08005228

08003dbc <_localeconv_r>:
 8003dbc:	4800      	ldr	r0, [pc, #0]	; (8003dc0 <_localeconv_r+0x4>)
 8003dbe:	4770      	bx	lr
 8003dc0:	20000160 	.word	0x20000160

08003dc4 <malloc>:
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <malloc+0xc>)
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f000 bbfb 	b.w	80045c4 <_malloc_r>
 8003dce:	bf00      	nop
 8003dd0:	2000000c 	.word	0x2000000c

08003dd4 <memchr>:
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	b2c9      	uxtb	r1, r1
 8003dda:	4402      	add	r2, r0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	d101      	bne.n	8003de6 <memchr+0x12>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e003      	b.n	8003dee <memchr+0x1a>
 8003de6:	7804      	ldrb	r4, [r0, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	428c      	cmp	r4, r1
 8003dec:	d1f6      	bne.n	8003ddc <memchr+0x8>
 8003dee:	bd10      	pop	{r4, pc}

08003df0 <memcpy>:
 8003df0:	440a      	add	r2, r1
 8003df2:	4291      	cmp	r1, r2
 8003df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003df8:	d100      	bne.n	8003dfc <memcpy+0xc>
 8003dfa:	4770      	bx	lr
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e02:	4291      	cmp	r1, r2
 8003e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e08:	d1f9      	bne.n	8003dfe <memcpy+0xe>
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <_Balloc>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e10:	4604      	mov	r4, r0
 8003e12:	460d      	mov	r5, r1
 8003e14:	b976      	cbnz	r6, 8003e34 <_Balloc+0x28>
 8003e16:	2010      	movs	r0, #16
 8003e18:	f7ff ffd4 	bl	8003dc4 <malloc>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6260      	str	r0, [r4, #36]	; 0x24
 8003e20:	b920      	cbnz	r0, 8003e2c <_Balloc+0x20>
 8003e22:	2166      	movs	r1, #102	; 0x66
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <_Balloc+0x78>)
 8003e26:	4818      	ldr	r0, [pc, #96]	; (8003e88 <_Balloc+0x7c>)
 8003e28:	f000 fc36 	bl	8004698 <__assert_func>
 8003e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e30:	6006      	str	r6, [r0, #0]
 8003e32:	60c6      	str	r6, [r0, #12]
 8003e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e36:	68f3      	ldr	r3, [r6, #12]
 8003e38:	b183      	cbz	r3, 8003e5c <_Balloc+0x50>
 8003e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e42:	b9b8      	cbnz	r0, 8003e74 <_Balloc+0x68>
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f605 	lsl.w	r6, r1, r5
 8003e4a:	1d72      	adds	r2, r6, #5
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	0092      	lsls	r2, r2, #2
 8003e50:	f000 fb5e 	bl	8004510 <_calloc_r>
 8003e54:	b160      	cbz	r0, 8003e70 <_Balloc+0x64>
 8003e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e5a:	e00e      	b.n	8003e7a <_Balloc+0x6e>
 8003e5c:	2221      	movs	r2, #33	; 0x21
 8003e5e:	2104      	movs	r1, #4
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 fb55 	bl	8004510 <_calloc_r>
 8003e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e68:	60f0      	str	r0, [r6, #12]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e4      	bne.n	8003e3a <_Balloc+0x2e>
 8003e70:	2000      	movs	r0, #0
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	6802      	ldr	r2, [r0, #0]
 8003e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e80:	e7f7      	b.n	8003e72 <_Balloc+0x66>
 8003e82:	bf00      	nop
 8003e84:	08005235 	.word	0x08005235
 8003e88:	080052bc 	.word	0x080052bc

08003e8c <_Bfree>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e90:	4605      	mov	r5, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	b976      	cbnz	r6, 8003eb4 <_Bfree+0x28>
 8003e96:	2010      	movs	r0, #16
 8003e98:	f7ff ff94 	bl	8003dc4 <malloc>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6268      	str	r0, [r5, #36]	; 0x24
 8003ea0:	b920      	cbnz	r0, 8003eac <_Bfree+0x20>
 8003ea2:	218a      	movs	r1, #138	; 0x8a
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <_Bfree+0x3c>)
 8003ea6:	4809      	ldr	r0, [pc, #36]	; (8003ecc <_Bfree+0x40>)
 8003ea8:	f000 fbf6 	bl	8004698 <__assert_func>
 8003eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003eb0:	6006      	str	r6, [r0, #0]
 8003eb2:	60c6      	str	r6, [r0, #12]
 8003eb4:	b13c      	cbz	r4, 8003ec6 <_Bfree+0x3a>
 8003eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ec0:	6021      	str	r1, [r4, #0]
 8003ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	08005235 	.word	0x08005235
 8003ecc:	080052bc 	.word	0x080052bc

08003ed0 <__multadd>:
 8003ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed4:	4698      	mov	r8, r3
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	2300      	movs	r3, #0
 8003eda:	690e      	ldr	r6, [r1, #16]
 8003edc:	4607      	mov	r7, r0
 8003ede:	f101 0014 	add.w	r0, r1, #20
 8003ee2:	6805      	ldr	r5, [r0, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b2a9      	uxth	r1, r5
 8003ee8:	fb02 8101 	mla	r1, r2, r1, r8
 8003eec:	0c2d      	lsrs	r5, r5, #16
 8003eee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003ef2:	fb02 c505 	mla	r5, r2, r5, ip
 8003ef6:	b289      	uxth	r1, r1
 8003ef8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003efc:	429e      	cmp	r6, r3
 8003efe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003f02:	f840 1b04 	str.w	r1, [r0], #4
 8003f06:	dcec      	bgt.n	8003ee2 <__multadd+0x12>
 8003f08:	f1b8 0f00 	cmp.w	r8, #0
 8003f0c:	d022      	beq.n	8003f54 <__multadd+0x84>
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	42b3      	cmp	r3, r6
 8003f12:	dc19      	bgt.n	8003f48 <__multadd+0x78>
 8003f14:	6861      	ldr	r1, [r4, #4]
 8003f16:	4638      	mov	r0, r7
 8003f18:	3101      	adds	r1, #1
 8003f1a:	f7ff ff77 	bl	8003e0c <_Balloc>
 8003f1e:	4605      	mov	r5, r0
 8003f20:	b928      	cbnz	r0, 8003f2e <__multadd+0x5e>
 8003f22:	4602      	mov	r2, r0
 8003f24:	21b5      	movs	r1, #181	; 0xb5
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <__multadd+0x8c>)
 8003f28:	480d      	ldr	r0, [pc, #52]	; (8003f60 <__multadd+0x90>)
 8003f2a:	f000 fbb5 	bl	8004698 <__assert_func>
 8003f2e:	6922      	ldr	r2, [r4, #16]
 8003f30:	f104 010c 	add.w	r1, r4, #12
 8003f34:	3202      	adds	r2, #2
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	300c      	adds	r0, #12
 8003f3a:	f7ff ff59 	bl	8003df0 <memcpy>
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff ffa3 	bl	8003e8c <_Bfree>
 8003f46:	462c      	mov	r4, r5
 8003f48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8003f52:	6126      	str	r6, [r4, #16]
 8003f54:	4620      	mov	r0, r4
 8003f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f5a:	bf00      	nop
 8003f5c:	080052ab 	.word	0x080052ab
 8003f60:	080052bc 	.word	0x080052bc

08003f64 <__hi0bits>:
 8003f64:	0c02      	lsrs	r2, r0, #16
 8003f66:	0412      	lsls	r2, r2, #16
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b9ca      	cbnz	r2, 8003fa0 <__hi0bits+0x3c>
 8003f6c:	0403      	lsls	r3, r0, #16
 8003f6e:	2010      	movs	r0, #16
 8003f70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003f74:	bf04      	itt	eq
 8003f76:	021b      	lsleq	r3, r3, #8
 8003f78:	3008      	addeq	r0, #8
 8003f7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003f7e:	bf04      	itt	eq
 8003f80:	011b      	lsleq	r3, r3, #4
 8003f82:	3004      	addeq	r0, #4
 8003f84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003f88:	bf04      	itt	eq
 8003f8a:	009b      	lsleq	r3, r3, #2
 8003f8c:	3002      	addeq	r0, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db05      	blt.n	8003f9e <__hi0bits+0x3a>
 8003f92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003f96:	f100 0001 	add.w	r0, r0, #1
 8003f9a:	bf08      	it	eq
 8003f9c:	2020      	moveq	r0, #32
 8003f9e:	4770      	bx	lr
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	e7e5      	b.n	8003f70 <__hi0bits+0xc>

08003fa4 <__lo0bits>:
 8003fa4:	6803      	ldr	r3, [r0, #0]
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	f013 0007 	ands.w	r0, r3, #7
 8003fac:	d00b      	beq.n	8003fc6 <__lo0bits+0x22>
 8003fae:	07d9      	lsls	r1, r3, #31
 8003fb0:	d422      	bmi.n	8003ff8 <__lo0bits+0x54>
 8003fb2:	0798      	lsls	r0, r3, #30
 8003fb4:	bf49      	itett	mi
 8003fb6:	085b      	lsrmi	r3, r3, #1
 8003fb8:	089b      	lsrpl	r3, r3, #2
 8003fba:	2001      	movmi	r0, #1
 8003fbc:	6013      	strmi	r3, [r2, #0]
 8003fbe:	bf5c      	itt	pl
 8003fc0:	2002      	movpl	r0, #2
 8003fc2:	6013      	strpl	r3, [r2, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	b299      	uxth	r1, r3
 8003fc8:	b909      	cbnz	r1, 8003fce <__lo0bits+0x2a>
 8003fca:	2010      	movs	r0, #16
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003fd2:	bf04      	itt	eq
 8003fd4:	0a1b      	lsreq	r3, r3, #8
 8003fd6:	3008      	addeq	r0, #8
 8003fd8:	0719      	lsls	r1, r3, #28
 8003fda:	bf04      	itt	eq
 8003fdc:	091b      	lsreq	r3, r3, #4
 8003fde:	3004      	addeq	r0, #4
 8003fe0:	0799      	lsls	r1, r3, #30
 8003fe2:	bf04      	itt	eq
 8003fe4:	089b      	lsreq	r3, r3, #2
 8003fe6:	3002      	addeq	r0, #2
 8003fe8:	07d9      	lsls	r1, r3, #31
 8003fea:	d403      	bmi.n	8003ff4 <__lo0bits+0x50>
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	f100 0001 	add.w	r0, r0, #1
 8003ff2:	d003      	beq.n	8003ffc <__lo0bits+0x58>
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4770      	bx	lr
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4770      	bx	lr
 8003ffc:	2020      	movs	r0, #32
 8003ffe:	4770      	bx	lr

08004000 <__i2b>:
 8004000:	b510      	push	{r4, lr}
 8004002:	460c      	mov	r4, r1
 8004004:	2101      	movs	r1, #1
 8004006:	f7ff ff01 	bl	8003e0c <_Balloc>
 800400a:	4602      	mov	r2, r0
 800400c:	b928      	cbnz	r0, 800401a <__i2b+0x1a>
 800400e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <__i2b+0x24>)
 8004014:	4804      	ldr	r0, [pc, #16]	; (8004028 <__i2b+0x28>)
 8004016:	f000 fb3f 	bl	8004698 <__assert_func>
 800401a:	2301      	movs	r3, #1
 800401c:	6144      	str	r4, [r0, #20]
 800401e:	6103      	str	r3, [r0, #16]
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	080052ab 	.word	0x080052ab
 8004028:	080052bc 	.word	0x080052bc

0800402c <__multiply>:
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	4614      	mov	r4, r2
 8004032:	690a      	ldr	r2, [r1, #16]
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	460d      	mov	r5, r1
 8004038:	429a      	cmp	r2, r3
 800403a:	bfbe      	ittt	lt
 800403c:	460b      	movlt	r3, r1
 800403e:	4625      	movlt	r5, r4
 8004040:	461c      	movlt	r4, r3
 8004042:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004046:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800404a:	68ab      	ldr	r3, [r5, #8]
 800404c:	6869      	ldr	r1, [r5, #4]
 800404e:	eb0a 0709 	add.w	r7, sl, r9
 8004052:	42bb      	cmp	r3, r7
 8004054:	b085      	sub	sp, #20
 8004056:	bfb8      	it	lt
 8004058:	3101      	addlt	r1, #1
 800405a:	f7ff fed7 	bl	8003e0c <_Balloc>
 800405e:	b930      	cbnz	r0, 800406e <__multiply+0x42>
 8004060:	4602      	mov	r2, r0
 8004062:	f240 115d 	movw	r1, #349	; 0x15d
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <__multiply+0x140>)
 8004068:	4841      	ldr	r0, [pc, #260]	; (8004170 <__multiply+0x144>)
 800406a:	f000 fb15 	bl	8004698 <__assert_func>
 800406e:	f100 0614 	add.w	r6, r0, #20
 8004072:	4633      	mov	r3, r6
 8004074:	2200      	movs	r2, #0
 8004076:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800407a:	4543      	cmp	r3, r8
 800407c:	d31e      	bcc.n	80040bc <__multiply+0x90>
 800407e:	f105 0c14 	add.w	ip, r5, #20
 8004082:	f104 0314 	add.w	r3, r4, #20
 8004086:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800408a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800408e:	9202      	str	r2, [sp, #8]
 8004090:	ebac 0205 	sub.w	r2, ip, r5
 8004094:	3a15      	subs	r2, #21
 8004096:	f022 0203 	bic.w	r2, r2, #3
 800409a:	3204      	adds	r2, #4
 800409c:	f105 0115 	add.w	r1, r5, #21
 80040a0:	458c      	cmp	ip, r1
 80040a2:	bf38      	it	cc
 80040a4:	2204      	movcc	r2, #4
 80040a6:	9201      	str	r2, [sp, #4]
 80040a8:	9a02      	ldr	r2, [sp, #8]
 80040aa:	9303      	str	r3, [sp, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d808      	bhi.n	80040c2 <__multiply+0x96>
 80040b0:	2f00      	cmp	r7, #0
 80040b2:	dc55      	bgt.n	8004160 <__multiply+0x134>
 80040b4:	6107      	str	r7, [r0, #16]
 80040b6:	b005      	add	sp, #20
 80040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040bc:	f843 2b04 	str.w	r2, [r3], #4
 80040c0:	e7db      	b.n	800407a <__multiply+0x4e>
 80040c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80040c6:	f1ba 0f00 	cmp.w	sl, #0
 80040ca:	d020      	beq.n	800410e <__multiply+0xe2>
 80040cc:	46b1      	mov	r9, r6
 80040ce:	2200      	movs	r2, #0
 80040d0:	f105 0e14 	add.w	lr, r5, #20
 80040d4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80040d8:	f8d9 b000 	ldr.w	fp, [r9]
 80040dc:	b2a1      	uxth	r1, r4
 80040de:	fa1f fb8b 	uxth.w	fp, fp
 80040e2:	fb0a b101 	mla	r1, sl, r1, fp
 80040e6:	4411      	add	r1, r2
 80040e8:	f8d9 2000 	ldr.w	r2, [r9]
 80040ec:	0c24      	lsrs	r4, r4, #16
 80040ee:	0c12      	lsrs	r2, r2, #16
 80040f0:	fb0a 2404 	mla	r4, sl, r4, r2
 80040f4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80040f8:	b289      	uxth	r1, r1
 80040fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80040fe:	45f4      	cmp	ip, lr
 8004100:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004104:	f849 1b04 	str.w	r1, [r9], #4
 8004108:	d8e4      	bhi.n	80040d4 <__multiply+0xa8>
 800410a:	9901      	ldr	r1, [sp, #4]
 800410c:	5072      	str	r2, [r6, r1]
 800410e:	9a03      	ldr	r2, [sp, #12]
 8004110:	3304      	adds	r3, #4
 8004112:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004116:	f1b9 0f00 	cmp.w	r9, #0
 800411a:	d01f      	beq.n	800415c <__multiply+0x130>
 800411c:	46b6      	mov	lr, r6
 800411e:	f04f 0a00 	mov.w	sl, #0
 8004122:	6834      	ldr	r4, [r6, #0]
 8004124:	f105 0114 	add.w	r1, r5, #20
 8004128:	880a      	ldrh	r2, [r1, #0]
 800412a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800412e:	b2a4      	uxth	r4, r4
 8004130:	fb09 b202 	mla	r2, r9, r2, fp
 8004134:	4492      	add	sl, r2
 8004136:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800413a:	f84e 4b04 	str.w	r4, [lr], #4
 800413e:	f851 4b04 	ldr.w	r4, [r1], #4
 8004142:	f8be 2000 	ldrh.w	r2, [lr]
 8004146:	0c24      	lsrs	r4, r4, #16
 8004148:	fb09 2404 	mla	r4, r9, r4, r2
 800414c:	458c      	cmp	ip, r1
 800414e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004152:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004156:	d8e7      	bhi.n	8004128 <__multiply+0xfc>
 8004158:	9a01      	ldr	r2, [sp, #4]
 800415a:	50b4      	str	r4, [r6, r2]
 800415c:	3604      	adds	r6, #4
 800415e:	e7a3      	b.n	80040a8 <__multiply+0x7c>
 8004160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1a5      	bne.n	80040b4 <__multiply+0x88>
 8004168:	3f01      	subs	r7, #1
 800416a:	e7a1      	b.n	80040b0 <__multiply+0x84>
 800416c:	080052ab 	.word	0x080052ab
 8004170:	080052bc 	.word	0x080052bc

08004174 <__pow5mult>:
 8004174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	4615      	mov	r5, r2
 800417a:	f012 0203 	ands.w	r2, r2, #3
 800417e:	4606      	mov	r6, r0
 8004180:	460f      	mov	r7, r1
 8004182:	d007      	beq.n	8004194 <__pow5mult+0x20>
 8004184:	4c25      	ldr	r4, [pc, #148]	; (800421c <__pow5mult+0xa8>)
 8004186:	3a01      	subs	r2, #1
 8004188:	2300      	movs	r3, #0
 800418a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800418e:	f7ff fe9f 	bl	8003ed0 <__multadd>
 8004192:	4607      	mov	r7, r0
 8004194:	10ad      	asrs	r5, r5, #2
 8004196:	d03d      	beq.n	8004214 <__pow5mult+0xa0>
 8004198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800419a:	b97c      	cbnz	r4, 80041bc <__pow5mult+0x48>
 800419c:	2010      	movs	r0, #16
 800419e:	f7ff fe11 	bl	8003dc4 <malloc>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6270      	str	r0, [r6, #36]	; 0x24
 80041a6:	b928      	cbnz	r0, 80041b4 <__pow5mult+0x40>
 80041a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <__pow5mult+0xac>)
 80041ae:	481d      	ldr	r0, [pc, #116]	; (8004224 <__pow5mult+0xb0>)
 80041b0:	f000 fa72 	bl	8004698 <__assert_func>
 80041b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041b8:	6004      	str	r4, [r0, #0]
 80041ba:	60c4      	str	r4, [r0, #12]
 80041bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80041c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80041c4:	b94c      	cbnz	r4, 80041da <__pow5mult+0x66>
 80041c6:	f240 2171 	movw	r1, #625	; 0x271
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7ff ff18 	bl	8004000 <__i2b>
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80041d8:	6003      	str	r3, [r0, #0]
 80041da:	f04f 0900 	mov.w	r9, #0
 80041de:	07eb      	lsls	r3, r5, #31
 80041e0:	d50a      	bpl.n	80041f8 <__pow5mult+0x84>
 80041e2:	4639      	mov	r1, r7
 80041e4:	4622      	mov	r2, r4
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff ff20 	bl	800402c <__multiply>
 80041ec:	4680      	mov	r8, r0
 80041ee:	4639      	mov	r1, r7
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff fe4b 	bl	8003e8c <_Bfree>
 80041f6:	4647      	mov	r7, r8
 80041f8:	106d      	asrs	r5, r5, #1
 80041fa:	d00b      	beq.n	8004214 <__pow5mult+0xa0>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	b938      	cbnz	r0, 8004210 <__pow5mult+0x9c>
 8004200:	4622      	mov	r2, r4
 8004202:	4621      	mov	r1, r4
 8004204:	4630      	mov	r0, r6
 8004206:	f7ff ff11 	bl	800402c <__multiply>
 800420a:	6020      	str	r0, [r4, #0]
 800420c:	f8c0 9000 	str.w	r9, [r0]
 8004210:	4604      	mov	r4, r0
 8004212:	e7e4      	b.n	80041de <__pow5mult+0x6a>
 8004214:	4638      	mov	r0, r7
 8004216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800421a:	bf00      	nop
 800421c:	08005410 	.word	0x08005410
 8004220:	08005235 	.word	0x08005235
 8004224:	080052bc 	.word	0x080052bc

08004228 <__lshift>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	460c      	mov	r4, r1
 800422e:	4607      	mov	r7, r0
 8004230:	4691      	mov	r9, r2
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6849      	ldr	r1, [r1, #4]
 8004236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004240:	f108 0601 	add.w	r6, r8, #1
 8004244:	42b3      	cmp	r3, r6
 8004246:	db0b      	blt.n	8004260 <__lshift+0x38>
 8004248:	4638      	mov	r0, r7
 800424a:	f7ff fddf 	bl	8003e0c <_Balloc>
 800424e:	4605      	mov	r5, r0
 8004250:	b948      	cbnz	r0, 8004266 <__lshift+0x3e>
 8004252:	4602      	mov	r2, r0
 8004254:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <__lshift+0xd0>)
 800425a:	4828      	ldr	r0, [pc, #160]	; (80042fc <__lshift+0xd4>)
 800425c:	f000 fa1c 	bl	8004698 <__assert_func>
 8004260:	3101      	adds	r1, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	e7ee      	b.n	8004244 <__lshift+0x1c>
 8004266:	2300      	movs	r3, #0
 8004268:	f100 0114 	add.w	r1, r0, #20
 800426c:	f100 0210 	add.w	r2, r0, #16
 8004270:	4618      	mov	r0, r3
 8004272:	4553      	cmp	r3, sl
 8004274:	db33      	blt.n	80042de <__lshift+0xb6>
 8004276:	6920      	ldr	r0, [r4, #16]
 8004278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800427c:	f104 0314 	add.w	r3, r4, #20
 8004280:	f019 091f 	ands.w	r9, r9, #31
 8004284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800428c:	d02b      	beq.n	80042e6 <__lshift+0xbe>
 800428e:	468a      	mov	sl, r1
 8004290:	2200      	movs	r2, #0
 8004292:	f1c9 0e20 	rsb	lr, r9, #32
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	fa00 f009 	lsl.w	r0, r0, r9
 800429c:	4302      	orrs	r2, r0
 800429e:	f84a 2b04 	str.w	r2, [sl], #4
 80042a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a6:	459c      	cmp	ip, r3
 80042a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80042ac:	d8f3      	bhi.n	8004296 <__lshift+0x6e>
 80042ae:	ebac 0304 	sub.w	r3, ip, r4
 80042b2:	3b15      	subs	r3, #21
 80042b4:	f023 0303 	bic.w	r3, r3, #3
 80042b8:	3304      	adds	r3, #4
 80042ba:	f104 0015 	add.w	r0, r4, #21
 80042be:	4584      	cmp	ip, r0
 80042c0:	bf38      	it	cc
 80042c2:	2304      	movcc	r3, #4
 80042c4:	50ca      	str	r2, [r1, r3]
 80042c6:	b10a      	cbz	r2, 80042cc <__lshift+0xa4>
 80042c8:	f108 0602 	add.w	r6, r8, #2
 80042cc:	3e01      	subs	r6, #1
 80042ce:	4638      	mov	r0, r7
 80042d0:	4621      	mov	r1, r4
 80042d2:	612e      	str	r6, [r5, #16]
 80042d4:	f7ff fdda 	bl	8003e8c <_Bfree>
 80042d8:	4628      	mov	r0, r5
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042de:	f842 0f04 	str.w	r0, [r2, #4]!
 80042e2:	3301      	adds	r3, #1
 80042e4:	e7c5      	b.n	8004272 <__lshift+0x4a>
 80042e6:	3904      	subs	r1, #4
 80042e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ec:	459c      	cmp	ip, r3
 80042ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80042f2:	d8f9      	bhi.n	80042e8 <__lshift+0xc0>
 80042f4:	e7ea      	b.n	80042cc <__lshift+0xa4>
 80042f6:	bf00      	nop
 80042f8:	080052ab 	.word	0x080052ab
 80042fc:	080052bc 	.word	0x080052bc

08004300 <__mcmp>:
 8004300:	4603      	mov	r3, r0
 8004302:	690a      	ldr	r2, [r1, #16]
 8004304:	6900      	ldr	r0, [r0, #16]
 8004306:	b530      	push	{r4, r5, lr}
 8004308:	1a80      	subs	r0, r0, r2
 800430a:	d10d      	bne.n	8004328 <__mcmp+0x28>
 800430c:	3314      	adds	r3, #20
 800430e:	3114      	adds	r1, #20
 8004310:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004314:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800431c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004320:	4295      	cmp	r5, r2
 8004322:	d002      	beq.n	800432a <__mcmp+0x2a>
 8004324:	d304      	bcc.n	8004330 <__mcmp+0x30>
 8004326:	2001      	movs	r0, #1
 8004328:	bd30      	pop	{r4, r5, pc}
 800432a:	42a3      	cmp	r3, r4
 800432c:	d3f4      	bcc.n	8004318 <__mcmp+0x18>
 800432e:	e7fb      	b.n	8004328 <__mcmp+0x28>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	e7f8      	b.n	8004328 <__mcmp+0x28>
	...

08004338 <__mdiff>:
 8004338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	460c      	mov	r4, r1
 800433e:	4606      	mov	r6, r0
 8004340:	4611      	mov	r1, r2
 8004342:	4620      	mov	r0, r4
 8004344:	4692      	mov	sl, r2
 8004346:	f7ff ffdb 	bl	8004300 <__mcmp>
 800434a:	1e05      	subs	r5, r0, #0
 800434c:	d111      	bne.n	8004372 <__mdiff+0x3a>
 800434e:	4629      	mov	r1, r5
 8004350:	4630      	mov	r0, r6
 8004352:	f7ff fd5b 	bl	8003e0c <_Balloc>
 8004356:	4602      	mov	r2, r0
 8004358:	b928      	cbnz	r0, 8004366 <__mdiff+0x2e>
 800435a:	f240 2132 	movw	r1, #562	; 0x232
 800435e:	4b3c      	ldr	r3, [pc, #240]	; (8004450 <__mdiff+0x118>)
 8004360:	483c      	ldr	r0, [pc, #240]	; (8004454 <__mdiff+0x11c>)
 8004362:	f000 f999 	bl	8004698 <__assert_func>
 8004366:	2301      	movs	r3, #1
 8004368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800436c:	4610      	mov	r0, r2
 800436e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	bfa4      	itt	ge
 8004374:	4653      	movge	r3, sl
 8004376:	46a2      	movge	sl, r4
 8004378:	4630      	mov	r0, r6
 800437a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800437e:	bfa6      	itte	ge
 8004380:	461c      	movge	r4, r3
 8004382:	2500      	movge	r5, #0
 8004384:	2501      	movlt	r5, #1
 8004386:	f7ff fd41 	bl	8003e0c <_Balloc>
 800438a:	4602      	mov	r2, r0
 800438c:	b918      	cbnz	r0, 8004396 <__mdiff+0x5e>
 800438e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <__mdiff+0x118>)
 8004394:	e7e4      	b.n	8004360 <__mdiff+0x28>
 8004396:	f100 0814 	add.w	r8, r0, #20
 800439a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800439e:	60c5      	str	r5, [r0, #12]
 80043a0:	f04f 0c00 	mov.w	ip, #0
 80043a4:	f10a 0514 	add.w	r5, sl, #20
 80043a8:	f10a 0010 	add.w	r0, sl, #16
 80043ac:	46c2      	mov	sl, r8
 80043ae:	6926      	ldr	r6, [r4, #16]
 80043b0:	f104 0914 	add.w	r9, r4, #20
 80043b4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80043b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80043bc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80043c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80043c4:	fa1f f18b 	uxth.w	r1, fp
 80043c8:	4461      	add	r1, ip
 80043ca:	fa1f fc83 	uxth.w	ip, r3
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	eba1 010c 	sub.w	r1, r1, ip
 80043d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80043d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80043dc:	b289      	uxth	r1, r1
 80043de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80043e2:	454e      	cmp	r6, r9
 80043e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80043e8:	f84a 3b04 	str.w	r3, [sl], #4
 80043ec:	d8e6      	bhi.n	80043bc <__mdiff+0x84>
 80043ee:	1b33      	subs	r3, r6, r4
 80043f0:	3b15      	subs	r3, #21
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	3415      	adds	r4, #21
 80043f8:	3304      	adds	r3, #4
 80043fa:	42a6      	cmp	r6, r4
 80043fc:	bf38      	it	cc
 80043fe:	2304      	movcc	r3, #4
 8004400:	441d      	add	r5, r3
 8004402:	4443      	add	r3, r8
 8004404:	461e      	mov	r6, r3
 8004406:	462c      	mov	r4, r5
 8004408:	4574      	cmp	r4, lr
 800440a:	d30e      	bcc.n	800442a <__mdiff+0xf2>
 800440c:	f10e 0103 	add.w	r1, lr, #3
 8004410:	1b49      	subs	r1, r1, r5
 8004412:	f021 0103 	bic.w	r1, r1, #3
 8004416:	3d03      	subs	r5, #3
 8004418:	45ae      	cmp	lr, r5
 800441a:	bf38      	it	cc
 800441c:	2100      	movcc	r1, #0
 800441e:	4419      	add	r1, r3
 8004420:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004424:	b18b      	cbz	r3, 800444a <__mdiff+0x112>
 8004426:	6117      	str	r7, [r2, #16]
 8004428:	e7a0      	b.n	800436c <__mdiff+0x34>
 800442a:	f854 8b04 	ldr.w	r8, [r4], #4
 800442e:	fa1f f188 	uxth.w	r1, r8
 8004432:	4461      	add	r1, ip
 8004434:	1408      	asrs	r0, r1, #16
 8004436:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800443a:	b289      	uxth	r1, r1
 800443c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004444:	f846 1b04 	str.w	r1, [r6], #4
 8004448:	e7de      	b.n	8004408 <__mdiff+0xd0>
 800444a:	3f01      	subs	r7, #1
 800444c:	e7e8      	b.n	8004420 <__mdiff+0xe8>
 800444e:	bf00      	nop
 8004450:	080052ab 	.word	0x080052ab
 8004454:	080052bc 	.word	0x080052bc

08004458 <__d2b>:
 8004458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800445c:	2101      	movs	r1, #1
 800445e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004462:	4690      	mov	r8, r2
 8004464:	461d      	mov	r5, r3
 8004466:	f7ff fcd1 	bl	8003e0c <_Balloc>
 800446a:	4604      	mov	r4, r0
 800446c:	b930      	cbnz	r0, 800447c <__d2b+0x24>
 800446e:	4602      	mov	r2, r0
 8004470:	f240 310a 	movw	r1, #778	; 0x30a
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <__d2b+0xb0>)
 8004476:	4825      	ldr	r0, [pc, #148]	; (800450c <__d2b+0xb4>)
 8004478:	f000 f90e 	bl	8004698 <__assert_func>
 800447c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004480:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004484:	bb2d      	cbnz	r5, 80044d2 <__d2b+0x7a>
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	f1b8 0300 	subs.w	r3, r8, #0
 800448c:	d026      	beq.n	80044dc <__d2b+0x84>
 800448e:	4668      	mov	r0, sp
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	f7ff fd87 	bl	8003fa4 <__lo0bits>
 8004496:	9900      	ldr	r1, [sp, #0]
 8004498:	b1f0      	cbz	r0, 80044d8 <__d2b+0x80>
 800449a:	9a01      	ldr	r2, [sp, #4]
 800449c:	f1c0 0320 	rsb	r3, r0, #32
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	430b      	orrs	r3, r1
 80044a6:	40c2      	lsrs	r2, r0
 80044a8:	6163      	str	r3, [r4, #20]
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	9b01      	ldr	r3, [sp, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2102      	movne	r1, #2
 80044b4:	2101      	moveq	r1, #1
 80044b6:	61a3      	str	r3, [r4, #24]
 80044b8:	6121      	str	r1, [r4, #16]
 80044ba:	b1c5      	cbz	r5, 80044ee <__d2b+0x96>
 80044bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80044c0:	4405      	add	r5, r0
 80044c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80044c6:	603d      	str	r5, [r7, #0]
 80044c8:	6030      	str	r0, [r6, #0]
 80044ca:	4620      	mov	r0, r4
 80044cc:	b002      	add	sp, #8
 80044ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d6:	e7d6      	b.n	8004486 <__d2b+0x2e>
 80044d8:	6161      	str	r1, [r4, #20]
 80044da:	e7e7      	b.n	80044ac <__d2b+0x54>
 80044dc:	a801      	add	r0, sp, #4
 80044de:	f7ff fd61 	bl	8003fa4 <__lo0bits>
 80044e2:	2101      	movs	r1, #1
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	6121      	str	r1, [r4, #16]
 80044e8:	6163      	str	r3, [r4, #20]
 80044ea:	3020      	adds	r0, #32
 80044ec:	e7e5      	b.n	80044ba <__d2b+0x62>
 80044ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80044f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80044f6:	6038      	str	r0, [r7, #0]
 80044f8:	6918      	ldr	r0, [r3, #16]
 80044fa:	f7ff fd33 	bl	8003f64 <__hi0bits>
 80044fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004502:	6031      	str	r1, [r6, #0]
 8004504:	e7e1      	b.n	80044ca <__d2b+0x72>
 8004506:	bf00      	nop
 8004508:	080052ab 	.word	0x080052ab
 800450c:	080052bc 	.word	0x080052bc

08004510 <_calloc_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	fb02 f501 	mul.w	r5, r2, r1
 8004516:	4629      	mov	r1, r5
 8004518:	f000 f854 	bl	80045c4 <_malloc_r>
 800451c:	4604      	mov	r4, r0
 800451e:	b118      	cbz	r0, 8004528 <_calloc_r+0x18>
 8004520:	462a      	mov	r2, r5
 8004522:	2100      	movs	r1, #0
 8004524:	f7fe f964 	bl	80027f0 <memset>
 8004528:	4620      	mov	r0, r4
 800452a:	bd38      	pop	{r3, r4, r5, pc}

0800452c <_free_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4605      	mov	r5, r0
 8004530:	2900      	cmp	r1, #0
 8004532:	d043      	beq.n	80045bc <_free_r+0x90>
 8004534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004538:	1f0c      	subs	r4, r1, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	bfb8      	it	lt
 800453e:	18e4      	addlt	r4, r4, r3
 8004540:	f000 f8ec 	bl	800471c <__malloc_lock>
 8004544:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <_free_r+0x94>)
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	4610      	mov	r0, r2
 800454a:	b933      	cbnz	r3, 800455a <_free_r+0x2e>
 800454c:	6063      	str	r3, [r4, #4]
 800454e:	6014      	str	r4, [r2, #0]
 8004550:	4628      	mov	r0, r5
 8004552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004556:	f000 b8e7 	b.w	8004728 <__malloc_unlock>
 800455a:	42a3      	cmp	r3, r4
 800455c:	d90a      	bls.n	8004574 <_free_r+0x48>
 800455e:	6821      	ldr	r1, [r4, #0]
 8004560:	1862      	adds	r2, r4, r1
 8004562:	4293      	cmp	r3, r2
 8004564:	bf01      	itttt	eq
 8004566:	681a      	ldreq	r2, [r3, #0]
 8004568:	685b      	ldreq	r3, [r3, #4]
 800456a:	1852      	addeq	r2, r2, r1
 800456c:	6022      	streq	r2, [r4, #0]
 800456e:	6063      	str	r3, [r4, #4]
 8004570:	6004      	str	r4, [r0, #0]
 8004572:	e7ed      	b.n	8004550 <_free_r+0x24>
 8004574:	461a      	mov	r2, r3
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	b10b      	cbz	r3, 800457e <_free_r+0x52>
 800457a:	42a3      	cmp	r3, r4
 800457c:	d9fa      	bls.n	8004574 <_free_r+0x48>
 800457e:	6811      	ldr	r1, [r2, #0]
 8004580:	1850      	adds	r0, r2, r1
 8004582:	42a0      	cmp	r0, r4
 8004584:	d10b      	bne.n	800459e <_free_r+0x72>
 8004586:	6820      	ldr	r0, [r4, #0]
 8004588:	4401      	add	r1, r0
 800458a:	1850      	adds	r0, r2, r1
 800458c:	4283      	cmp	r3, r0
 800458e:	6011      	str	r1, [r2, #0]
 8004590:	d1de      	bne.n	8004550 <_free_r+0x24>
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4401      	add	r1, r0
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	6053      	str	r3, [r2, #4]
 800459c:	e7d8      	b.n	8004550 <_free_r+0x24>
 800459e:	d902      	bls.n	80045a6 <_free_r+0x7a>
 80045a0:	230c      	movs	r3, #12
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	e7d4      	b.n	8004550 <_free_r+0x24>
 80045a6:	6820      	ldr	r0, [r4, #0]
 80045a8:	1821      	adds	r1, r4, r0
 80045aa:	428b      	cmp	r3, r1
 80045ac:	bf01      	itttt	eq
 80045ae:	6819      	ldreq	r1, [r3, #0]
 80045b0:	685b      	ldreq	r3, [r3, #4]
 80045b2:	1809      	addeq	r1, r1, r0
 80045b4:	6021      	streq	r1, [r4, #0]
 80045b6:	6063      	str	r3, [r4, #4]
 80045b8:	6054      	str	r4, [r2, #4]
 80045ba:	e7c9      	b.n	8004550 <_free_r+0x24>
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	bf00      	nop
 80045c0:	20000204 	.word	0x20000204

080045c4 <_malloc_r>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	1ccd      	adds	r5, r1, #3
 80045c8:	f025 0503 	bic.w	r5, r5, #3
 80045cc:	3508      	adds	r5, #8
 80045ce:	2d0c      	cmp	r5, #12
 80045d0:	bf38      	it	cc
 80045d2:	250c      	movcc	r5, #12
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	4606      	mov	r6, r0
 80045d8:	db01      	blt.n	80045de <_malloc_r+0x1a>
 80045da:	42a9      	cmp	r1, r5
 80045dc:	d903      	bls.n	80045e6 <_malloc_r+0x22>
 80045de:	230c      	movs	r3, #12
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	2000      	movs	r0, #0
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e6:	f000 f899 	bl	800471c <__malloc_lock>
 80045ea:	4921      	ldr	r1, [pc, #132]	; (8004670 <_malloc_r+0xac>)
 80045ec:	680a      	ldr	r2, [r1, #0]
 80045ee:	4614      	mov	r4, r2
 80045f0:	b99c      	cbnz	r4, 800461a <_malloc_r+0x56>
 80045f2:	4f20      	ldr	r7, [pc, #128]	; (8004674 <_malloc_r+0xb0>)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b923      	cbnz	r3, 8004602 <_malloc_r+0x3e>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4630      	mov	r0, r6
 80045fc:	f000 f83c 	bl	8004678 <_sbrk_r>
 8004600:	6038      	str	r0, [r7, #0]
 8004602:	4629      	mov	r1, r5
 8004604:	4630      	mov	r0, r6
 8004606:	f000 f837 	bl	8004678 <_sbrk_r>
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	d123      	bne.n	8004656 <_malloc_r+0x92>
 800460e:	230c      	movs	r3, #12
 8004610:	4630      	mov	r0, r6
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	f000 f888 	bl	8004728 <__malloc_unlock>
 8004618:	e7e3      	b.n	80045e2 <_malloc_r+0x1e>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	1b5b      	subs	r3, r3, r5
 800461e:	d417      	bmi.n	8004650 <_malloc_r+0x8c>
 8004620:	2b0b      	cmp	r3, #11
 8004622:	d903      	bls.n	800462c <_malloc_r+0x68>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	441c      	add	r4, r3
 8004628:	6025      	str	r5, [r4, #0]
 800462a:	e004      	b.n	8004636 <_malloc_r+0x72>
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	42a2      	cmp	r2, r4
 8004630:	bf0c      	ite	eq
 8004632:	600b      	streq	r3, [r1, #0]
 8004634:	6053      	strne	r3, [r2, #4]
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f876 	bl	8004728 <__malloc_unlock>
 800463c:	f104 000b 	add.w	r0, r4, #11
 8004640:	1d23      	adds	r3, r4, #4
 8004642:	f020 0007 	bic.w	r0, r0, #7
 8004646:	1ac2      	subs	r2, r0, r3
 8004648:	d0cc      	beq.n	80045e4 <_malloc_r+0x20>
 800464a:	1a1b      	subs	r3, r3, r0
 800464c:	50a3      	str	r3, [r4, r2]
 800464e:	e7c9      	b.n	80045e4 <_malloc_r+0x20>
 8004650:	4622      	mov	r2, r4
 8004652:	6864      	ldr	r4, [r4, #4]
 8004654:	e7cc      	b.n	80045f0 <_malloc_r+0x2c>
 8004656:	1cc4      	adds	r4, r0, #3
 8004658:	f024 0403 	bic.w	r4, r4, #3
 800465c:	42a0      	cmp	r0, r4
 800465e:	d0e3      	beq.n	8004628 <_malloc_r+0x64>
 8004660:	1a21      	subs	r1, r4, r0
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f808 	bl	8004678 <_sbrk_r>
 8004668:	3001      	adds	r0, #1
 800466a:	d1dd      	bne.n	8004628 <_malloc_r+0x64>
 800466c:	e7cf      	b.n	800460e <_malloc_r+0x4a>
 800466e:	bf00      	nop
 8004670:	20000204 	.word	0x20000204
 8004674:	20000208 	.word	0x20000208

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	2300      	movs	r3, #0
 800467c:	4d05      	ldr	r5, [pc, #20]	; (8004694 <_sbrk_r+0x1c>)
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7fc fd36 	bl	80010f4 <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	20000258 	.word	0x20000258

08004698 <__assert_func>:
 8004698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800469a:	4614      	mov	r4, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <__assert_func+0x2c>)
 80046a0:	4605      	mov	r5, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68d8      	ldr	r0, [r3, #12]
 80046a6:	b14c      	cbz	r4, 80046bc <__assert_func+0x24>
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <__assert_func+0x30>)
 80046aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046ae:	9100      	str	r1, [sp, #0]
 80046b0:	462b      	mov	r3, r5
 80046b2:	4906      	ldr	r1, [pc, #24]	; (80046cc <__assert_func+0x34>)
 80046b4:	f000 f80e 	bl	80046d4 <fiprintf>
 80046b8:	f000 fa62 	bl	8004b80 <abort>
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <__assert_func+0x38>)
 80046be:	461c      	mov	r4, r3
 80046c0:	e7f3      	b.n	80046aa <__assert_func+0x12>
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	0800541c 	.word	0x0800541c
 80046cc:	08005429 	.word	0x08005429
 80046d0:	08005457 	.word	0x08005457

080046d4 <fiprintf>:
 80046d4:	b40e      	push	{r1, r2, r3}
 80046d6:	b503      	push	{r0, r1, lr}
 80046d8:	4601      	mov	r1, r0
 80046da:	ab03      	add	r3, sp, #12
 80046dc:	4805      	ldr	r0, [pc, #20]	; (80046f4 <fiprintf+0x20>)
 80046de:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	f000 f84d 	bl	8004784 <_vfiprintf_r>
 80046ea:	b002      	add	sp, #8
 80046ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f0:	b003      	add	sp, #12
 80046f2:	4770      	bx	lr
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <__ascii_mbtowc>:
 80046f8:	b082      	sub	sp, #8
 80046fa:	b901      	cbnz	r1, 80046fe <__ascii_mbtowc+0x6>
 80046fc:	a901      	add	r1, sp, #4
 80046fe:	b142      	cbz	r2, 8004712 <__ascii_mbtowc+0x1a>
 8004700:	b14b      	cbz	r3, 8004716 <__ascii_mbtowc+0x1e>
 8004702:	7813      	ldrb	r3, [r2, #0]
 8004704:	600b      	str	r3, [r1, #0]
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	1e10      	subs	r0, r2, #0
 800470a:	bf18      	it	ne
 800470c:	2001      	movne	r0, #1
 800470e:	b002      	add	sp, #8
 8004710:	4770      	bx	lr
 8004712:	4610      	mov	r0, r2
 8004714:	e7fb      	b.n	800470e <__ascii_mbtowc+0x16>
 8004716:	f06f 0001 	mvn.w	r0, #1
 800471a:	e7f8      	b.n	800470e <__ascii_mbtowc+0x16>

0800471c <__malloc_lock>:
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <__malloc_lock+0x8>)
 800471e:	f000 bbef 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 8004722:	bf00      	nop
 8004724:	20000260 	.word	0x20000260

08004728 <__malloc_unlock>:
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <__malloc_unlock+0x8>)
 800472a:	f000 bbea 	b.w	8004f02 <__retarget_lock_release_recursive>
 800472e:	bf00      	nop
 8004730:	20000260 	.word	0x20000260

08004734 <__sfputc_r>:
 8004734:	6893      	ldr	r3, [r2, #8]
 8004736:	b410      	push	{r4}
 8004738:	3b01      	subs	r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	6093      	str	r3, [r2, #8]
 800473e:	da07      	bge.n	8004750 <__sfputc_r+0x1c>
 8004740:	6994      	ldr	r4, [r2, #24]
 8004742:	42a3      	cmp	r3, r4
 8004744:	db01      	blt.n	800474a <__sfputc_r+0x16>
 8004746:	290a      	cmp	r1, #10
 8004748:	d102      	bne.n	8004750 <__sfputc_r+0x1c>
 800474a:	bc10      	pop	{r4}
 800474c:	f000 b94a 	b.w	80049e4 <__swbuf_r>
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	1c58      	adds	r0, r3, #1
 8004754:	6010      	str	r0, [r2, #0]
 8004756:	7019      	strb	r1, [r3, #0]
 8004758:	4608      	mov	r0, r1
 800475a:	bc10      	pop	{r4}
 800475c:	4770      	bx	lr

0800475e <__sfputs_r>:
 800475e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004760:	4606      	mov	r6, r0
 8004762:	460f      	mov	r7, r1
 8004764:	4614      	mov	r4, r2
 8004766:	18d5      	adds	r5, r2, r3
 8004768:	42ac      	cmp	r4, r5
 800476a:	d101      	bne.n	8004770 <__sfputs_r+0x12>
 800476c:	2000      	movs	r0, #0
 800476e:	e007      	b.n	8004780 <__sfputs_r+0x22>
 8004770:	463a      	mov	r2, r7
 8004772:	4630      	mov	r0, r6
 8004774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004778:	f7ff ffdc 	bl	8004734 <__sfputc_r>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d1f3      	bne.n	8004768 <__sfputs_r+0xa>
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004784 <_vfiprintf_r>:
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	460d      	mov	r5, r1
 800478a:	4614      	mov	r4, r2
 800478c:	4698      	mov	r8, r3
 800478e:	4606      	mov	r6, r0
 8004790:	b09d      	sub	sp, #116	; 0x74
 8004792:	b118      	cbz	r0, 800479c <_vfiprintf_r+0x18>
 8004794:	6983      	ldr	r3, [r0, #24]
 8004796:	b90b      	cbnz	r3, 800479c <_vfiprintf_r+0x18>
 8004798:	f000 fb14 	bl	8004dc4 <__sinit>
 800479c:	4b89      	ldr	r3, [pc, #548]	; (80049c4 <_vfiprintf_r+0x240>)
 800479e:	429d      	cmp	r5, r3
 80047a0:	d11b      	bne.n	80047da <_vfiprintf_r+0x56>
 80047a2:	6875      	ldr	r5, [r6, #4]
 80047a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047a6:	07d9      	lsls	r1, r3, #31
 80047a8:	d405      	bmi.n	80047b6 <_vfiprintf_r+0x32>
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	059a      	lsls	r2, r3, #22
 80047ae:	d402      	bmi.n	80047b6 <_vfiprintf_r+0x32>
 80047b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047b2:	f000 fba5 	bl	8004f00 <__retarget_lock_acquire_recursive>
 80047b6:	89ab      	ldrh	r3, [r5, #12]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	d501      	bpl.n	80047c0 <_vfiprintf_r+0x3c>
 80047bc:	692b      	ldr	r3, [r5, #16]
 80047be:	b9eb      	cbnz	r3, 80047fc <_vfiprintf_r+0x78>
 80047c0:	4629      	mov	r1, r5
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 f96e 	bl	8004aa4 <__swsetup_r>
 80047c8:	b1c0      	cbz	r0, 80047fc <_vfiprintf_r+0x78>
 80047ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047cc:	07dc      	lsls	r4, r3, #31
 80047ce:	d50e      	bpl.n	80047ee <_vfiprintf_r+0x6a>
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	b01d      	add	sp, #116	; 0x74
 80047d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <_vfiprintf_r+0x244>)
 80047dc:	429d      	cmp	r5, r3
 80047de:	d101      	bne.n	80047e4 <_vfiprintf_r+0x60>
 80047e0:	68b5      	ldr	r5, [r6, #8]
 80047e2:	e7df      	b.n	80047a4 <_vfiprintf_r+0x20>
 80047e4:	4b79      	ldr	r3, [pc, #484]	; (80049cc <_vfiprintf_r+0x248>)
 80047e6:	429d      	cmp	r5, r3
 80047e8:	bf08      	it	eq
 80047ea:	68f5      	ldreq	r5, [r6, #12]
 80047ec:	e7da      	b.n	80047a4 <_vfiprintf_r+0x20>
 80047ee:	89ab      	ldrh	r3, [r5, #12]
 80047f0:	0598      	lsls	r0, r3, #22
 80047f2:	d4ed      	bmi.n	80047d0 <_vfiprintf_r+0x4c>
 80047f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047f6:	f000 fb84 	bl	8004f02 <__retarget_lock_release_recursive>
 80047fa:	e7e9      	b.n	80047d0 <_vfiprintf_r+0x4c>
 80047fc:	2300      	movs	r3, #0
 80047fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004800:	2320      	movs	r3, #32
 8004802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004806:	2330      	movs	r3, #48	; 0x30
 8004808:	f04f 0901 	mov.w	r9, #1
 800480c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004810:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80049d0 <_vfiprintf_r+0x24c>
 8004814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004818:	4623      	mov	r3, r4
 800481a:	469a      	mov	sl, r3
 800481c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004820:	b10a      	cbz	r2, 8004826 <_vfiprintf_r+0xa2>
 8004822:	2a25      	cmp	r2, #37	; 0x25
 8004824:	d1f9      	bne.n	800481a <_vfiprintf_r+0x96>
 8004826:	ebba 0b04 	subs.w	fp, sl, r4
 800482a:	d00b      	beq.n	8004844 <_vfiprintf_r+0xc0>
 800482c:	465b      	mov	r3, fp
 800482e:	4622      	mov	r2, r4
 8004830:	4629      	mov	r1, r5
 8004832:	4630      	mov	r0, r6
 8004834:	f7ff ff93 	bl	800475e <__sfputs_r>
 8004838:	3001      	adds	r0, #1
 800483a:	f000 80aa 	beq.w	8004992 <_vfiprintf_r+0x20e>
 800483e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004840:	445a      	add	r2, fp
 8004842:	9209      	str	r2, [sp, #36]	; 0x24
 8004844:	f89a 3000 	ldrb.w	r3, [sl]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a2 	beq.w	8004992 <_vfiprintf_r+0x20e>
 800484e:	2300      	movs	r3, #0
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004858:	f10a 0a01 	add.w	sl, sl, #1
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	9307      	str	r3, [sp, #28]
 8004860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004864:	931a      	str	r3, [sp, #104]	; 0x68
 8004866:	4654      	mov	r4, sl
 8004868:	2205      	movs	r2, #5
 800486a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486e:	4858      	ldr	r0, [pc, #352]	; (80049d0 <_vfiprintf_r+0x24c>)
 8004870:	f7ff fab0 	bl	8003dd4 <memchr>
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	b9d8      	cbnz	r0, 80048b0 <_vfiprintf_r+0x12c>
 8004878:	06d1      	lsls	r1, r2, #27
 800487a:	bf44      	itt	mi
 800487c:	2320      	movmi	r3, #32
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004882:	0713      	lsls	r3, r2, #28
 8004884:	bf44      	itt	mi
 8004886:	232b      	movmi	r3, #43	; 0x2b
 8004888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800488c:	f89a 3000 	ldrb.w	r3, [sl]
 8004890:	2b2a      	cmp	r3, #42	; 0x2a
 8004892:	d015      	beq.n	80048c0 <_vfiprintf_r+0x13c>
 8004894:	4654      	mov	r4, sl
 8004896:	2000      	movs	r0, #0
 8004898:	f04f 0c0a 	mov.w	ip, #10
 800489c:	9a07      	ldr	r2, [sp, #28]
 800489e:	4621      	mov	r1, r4
 80048a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a4:	3b30      	subs	r3, #48	; 0x30
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	d94e      	bls.n	8004948 <_vfiprintf_r+0x1c4>
 80048aa:	b1b0      	cbz	r0, 80048da <_vfiprintf_r+0x156>
 80048ac:	9207      	str	r2, [sp, #28]
 80048ae:	e014      	b.n	80048da <_vfiprintf_r+0x156>
 80048b0:	eba0 0308 	sub.w	r3, r0, r8
 80048b4:	fa09 f303 	lsl.w	r3, r9, r3
 80048b8:	4313      	orrs	r3, r2
 80048ba:	46a2      	mov	sl, r4
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	e7d2      	b.n	8004866 <_vfiprintf_r+0xe2>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	1d19      	adds	r1, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	9103      	str	r1, [sp, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bfbb      	ittet	lt
 80048cc:	425b      	neglt	r3, r3
 80048ce:	f042 0202 	orrlt.w	r2, r2, #2
 80048d2:	9307      	strge	r3, [sp, #28]
 80048d4:	9307      	strlt	r3, [sp, #28]
 80048d6:	bfb8      	it	lt
 80048d8:	9204      	strlt	r2, [sp, #16]
 80048da:	7823      	ldrb	r3, [r4, #0]
 80048dc:	2b2e      	cmp	r3, #46	; 0x2e
 80048de:	d10c      	bne.n	80048fa <_vfiprintf_r+0x176>
 80048e0:	7863      	ldrb	r3, [r4, #1]
 80048e2:	2b2a      	cmp	r3, #42	; 0x2a
 80048e4:	d135      	bne.n	8004952 <_vfiprintf_r+0x1ce>
 80048e6:	9b03      	ldr	r3, [sp, #12]
 80048e8:	3402      	adds	r4, #2
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9203      	str	r2, [sp, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfb8      	it	lt
 80048f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049e0 <_vfiprintf_r+0x25c>
 80048fe:	2203      	movs	r2, #3
 8004900:	4650      	mov	r0, sl
 8004902:	7821      	ldrb	r1, [r4, #0]
 8004904:	f7ff fa66 	bl	8003dd4 <memchr>
 8004908:	b140      	cbz	r0, 800491c <_vfiprintf_r+0x198>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	eba0 000a 	sub.w	r0, r0, sl
 8004910:	fa03 f000 	lsl.w	r0, r3, r0
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	3401      	adds	r4, #1
 8004918:	4303      	orrs	r3, r0
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004920:	2206      	movs	r2, #6
 8004922:	482c      	ldr	r0, [pc, #176]	; (80049d4 <_vfiprintf_r+0x250>)
 8004924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004928:	f7ff fa54 	bl	8003dd4 <memchr>
 800492c:	2800      	cmp	r0, #0
 800492e:	d03f      	beq.n	80049b0 <_vfiprintf_r+0x22c>
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <_vfiprintf_r+0x254>)
 8004932:	bb1b      	cbnz	r3, 800497c <_vfiprintf_r+0x1f8>
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	3307      	adds	r3, #7
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	3308      	adds	r3, #8
 800493e:	9303      	str	r3, [sp, #12]
 8004940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004942:	443b      	add	r3, r7
 8004944:	9309      	str	r3, [sp, #36]	; 0x24
 8004946:	e767      	b.n	8004818 <_vfiprintf_r+0x94>
 8004948:	460c      	mov	r4, r1
 800494a:	2001      	movs	r0, #1
 800494c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004950:	e7a5      	b.n	800489e <_vfiprintf_r+0x11a>
 8004952:	2300      	movs	r3, #0
 8004954:	f04f 0c0a 	mov.w	ip, #10
 8004958:	4619      	mov	r1, r3
 800495a:	3401      	adds	r4, #1
 800495c:	9305      	str	r3, [sp, #20]
 800495e:	4620      	mov	r0, r4
 8004960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004964:	3a30      	subs	r2, #48	; 0x30
 8004966:	2a09      	cmp	r2, #9
 8004968:	d903      	bls.n	8004972 <_vfiprintf_r+0x1ee>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0c5      	beq.n	80048fa <_vfiprintf_r+0x176>
 800496e:	9105      	str	r1, [sp, #20]
 8004970:	e7c3      	b.n	80048fa <_vfiprintf_r+0x176>
 8004972:	4604      	mov	r4, r0
 8004974:	2301      	movs	r3, #1
 8004976:	fb0c 2101 	mla	r1, ip, r1, r2
 800497a:	e7f0      	b.n	800495e <_vfiprintf_r+0x1da>
 800497c:	ab03      	add	r3, sp, #12
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	462a      	mov	r2, r5
 8004982:	4630      	mov	r0, r6
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <_vfiprintf_r+0x258>)
 8004986:	a904      	add	r1, sp, #16
 8004988:	f7fd ffd8 	bl	800293c <_printf_float>
 800498c:	4607      	mov	r7, r0
 800498e:	1c78      	adds	r0, r7, #1
 8004990:	d1d6      	bne.n	8004940 <_vfiprintf_r+0x1bc>
 8004992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004994:	07d9      	lsls	r1, r3, #31
 8004996:	d405      	bmi.n	80049a4 <_vfiprintf_r+0x220>
 8004998:	89ab      	ldrh	r3, [r5, #12]
 800499a:	059a      	lsls	r2, r3, #22
 800499c:	d402      	bmi.n	80049a4 <_vfiprintf_r+0x220>
 800499e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049a0:	f000 faaf 	bl	8004f02 <__retarget_lock_release_recursive>
 80049a4:	89ab      	ldrh	r3, [r5, #12]
 80049a6:	065b      	lsls	r3, r3, #25
 80049a8:	f53f af12 	bmi.w	80047d0 <_vfiprintf_r+0x4c>
 80049ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ae:	e711      	b.n	80047d4 <_vfiprintf_r+0x50>
 80049b0:	ab03      	add	r3, sp, #12
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	462a      	mov	r2, r5
 80049b6:	4630      	mov	r0, r6
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <_vfiprintf_r+0x258>)
 80049ba:	a904      	add	r1, sp, #16
 80049bc:	f7fe fa5a 	bl	8002e74 <_printf_i>
 80049c0:	e7e4      	b.n	800498c <_vfiprintf_r+0x208>
 80049c2:	bf00      	nop
 80049c4:	08005594 	.word	0x08005594
 80049c8:	080055b4 	.word	0x080055b4
 80049cc:	08005574 	.word	0x08005574
 80049d0:	08005462 	.word	0x08005462
 80049d4:	0800546c 	.word	0x0800546c
 80049d8:	0800293d 	.word	0x0800293d
 80049dc:	0800475f 	.word	0x0800475f
 80049e0:	08005468 	.word	0x08005468

080049e4 <__swbuf_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	460e      	mov	r6, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	4605      	mov	r5, r0
 80049ec:	b118      	cbz	r0, 80049f6 <__swbuf_r+0x12>
 80049ee:	6983      	ldr	r3, [r0, #24]
 80049f0:	b90b      	cbnz	r3, 80049f6 <__swbuf_r+0x12>
 80049f2:	f000 f9e7 	bl	8004dc4 <__sinit>
 80049f6:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <__swbuf_r+0x98>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d12b      	bne.n	8004a54 <__swbuf_r+0x70>
 80049fc:	686c      	ldr	r4, [r5, #4]
 80049fe:	69a3      	ldr	r3, [r4, #24]
 8004a00:	60a3      	str	r3, [r4, #8]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	071a      	lsls	r2, r3, #28
 8004a06:	d52f      	bpl.n	8004a68 <__swbuf_r+0x84>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	b36b      	cbz	r3, 8004a68 <__swbuf_r+0x84>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6820      	ldr	r0, [r4, #0]
 8004a10:	b2f6      	uxtb	r6, r6
 8004a12:	1ac0      	subs	r0, r0, r3
 8004a14:	6963      	ldr	r3, [r4, #20]
 8004a16:	4637      	mov	r7, r6
 8004a18:	4283      	cmp	r3, r0
 8004a1a:	dc04      	bgt.n	8004a26 <__swbuf_r+0x42>
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f000 f93c 	bl	8004c9c <_fflush_r>
 8004a24:	bb30      	cbnz	r0, 8004a74 <__swbuf_r+0x90>
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	3001      	adds	r0, #1
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	6022      	str	r2, [r4, #0]
 8004a34:	701e      	strb	r6, [r3, #0]
 8004a36:	6963      	ldr	r3, [r4, #20]
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	d004      	beq.n	8004a46 <__swbuf_r+0x62>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d506      	bpl.n	8004a50 <__swbuf_r+0x6c>
 8004a42:	2e0a      	cmp	r6, #10
 8004a44:	d104      	bne.n	8004a50 <__swbuf_r+0x6c>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f000 f927 	bl	8004c9c <_fflush_r>
 8004a4e:	b988      	cbnz	r0, 8004a74 <__swbuf_r+0x90>
 8004a50:	4638      	mov	r0, r7
 8004a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <__swbuf_r+0x9c>)
 8004a56:	429c      	cmp	r4, r3
 8004a58:	d101      	bne.n	8004a5e <__swbuf_r+0x7a>
 8004a5a:	68ac      	ldr	r4, [r5, #8]
 8004a5c:	e7cf      	b.n	80049fe <__swbuf_r+0x1a>
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <__swbuf_r+0xa0>)
 8004a60:	429c      	cmp	r4, r3
 8004a62:	bf08      	it	eq
 8004a64:	68ec      	ldreq	r4, [r5, #12]
 8004a66:	e7ca      	b.n	80049fe <__swbuf_r+0x1a>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f81a 	bl	8004aa4 <__swsetup_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d0cb      	beq.n	8004a0c <__swbuf_r+0x28>
 8004a74:	f04f 37ff 	mov.w	r7, #4294967295
 8004a78:	e7ea      	b.n	8004a50 <__swbuf_r+0x6c>
 8004a7a:	bf00      	nop
 8004a7c:	08005594 	.word	0x08005594
 8004a80:	080055b4 	.word	0x080055b4
 8004a84:	08005574 	.word	0x08005574

08004a88 <__ascii_wctomb>:
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	b141      	cbz	r1, 8004aa0 <__ascii_wctomb+0x18>
 8004a8e:	2aff      	cmp	r2, #255	; 0xff
 8004a90:	d904      	bls.n	8004a9c <__ascii_wctomb+0x14>
 8004a92:	228a      	movs	r2, #138	; 0x8a
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	4770      	bx	lr
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	700a      	strb	r2, [r1, #0]
 8004aa0:	4770      	bx	lr
	...

08004aa4 <__swsetup_r>:
 8004aa4:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <__swsetup_r+0xcc>)
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	681d      	ldr	r5, [r3, #0]
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	b125      	cbz	r5, 8004aba <__swsetup_r+0x16>
 8004ab0:	69ab      	ldr	r3, [r5, #24]
 8004ab2:	b913      	cbnz	r3, 8004aba <__swsetup_r+0x16>
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f985 	bl	8004dc4 <__sinit>
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <__swsetup_r+0xd0>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d10f      	bne.n	8004ae0 <__swsetup_r+0x3c>
 8004ac0:	686c      	ldr	r4, [r5, #4]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ac8:	0719      	lsls	r1, r3, #28
 8004aca:	d42c      	bmi.n	8004b26 <__swsetup_r+0x82>
 8004acc:	06dd      	lsls	r5, r3, #27
 8004ace:	d411      	bmi.n	8004af4 <__swsetup_r+0x50>
 8004ad0:	2309      	movs	r3, #9
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	e03e      	b.n	8004b5e <__swsetup_r+0xba>
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <__swsetup_r+0xd4>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d101      	bne.n	8004aea <__swsetup_r+0x46>
 8004ae6:	68ac      	ldr	r4, [r5, #8]
 8004ae8:	e7eb      	b.n	8004ac2 <__swsetup_r+0x1e>
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <__swsetup_r+0xd8>)
 8004aec:	429c      	cmp	r4, r3
 8004aee:	bf08      	it	eq
 8004af0:	68ec      	ldreq	r4, [r5, #12]
 8004af2:	e7e6      	b.n	8004ac2 <__swsetup_r+0x1e>
 8004af4:	0758      	lsls	r0, r3, #29
 8004af6:	d512      	bpl.n	8004b1e <__swsetup_r+0x7a>
 8004af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004afa:	b141      	cbz	r1, 8004b0e <__swsetup_r+0x6a>
 8004afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b00:	4299      	cmp	r1, r3
 8004b02:	d002      	beq.n	8004b0a <__swsetup_r+0x66>
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff fd11 	bl	800452c <_free_r>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	2300      	movs	r3, #0
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f043 0308 	orr.w	r3, r3, #8
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	b94b      	cbnz	r3, 8004b3e <__swsetup_r+0x9a>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b34:	d003      	beq.n	8004b3e <__swsetup_r+0x9a>
 8004b36:	4621      	mov	r1, r4
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f000 fa07 	bl	8004f4c <__smakebuf_r>
 8004b3e:	89a0      	ldrh	r0, [r4, #12]
 8004b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b44:	f010 0301 	ands.w	r3, r0, #1
 8004b48:	d00a      	beq.n	8004b60 <__swsetup_r+0xbc>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60a3      	str	r3, [r4, #8]
 8004b4e:	6963      	ldr	r3, [r4, #20]
 8004b50:	425b      	negs	r3, r3
 8004b52:	61a3      	str	r3, [r4, #24]
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	b943      	cbnz	r3, 8004b6a <__swsetup_r+0xc6>
 8004b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b5c:	d1ba      	bne.n	8004ad4 <__swsetup_r+0x30>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	0781      	lsls	r1, r0, #30
 8004b62:	bf58      	it	pl
 8004b64:	6963      	ldrpl	r3, [r4, #20]
 8004b66:	60a3      	str	r3, [r4, #8]
 8004b68:	e7f4      	b.n	8004b54 <__swsetup_r+0xb0>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e7f7      	b.n	8004b5e <__swsetup_r+0xba>
 8004b6e:	bf00      	nop
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	08005594 	.word	0x08005594
 8004b78:	080055b4 	.word	0x080055b4
 8004b7c:	08005574 	.word	0x08005574

08004b80 <abort>:
 8004b80:	2006      	movs	r0, #6
 8004b82:	b508      	push	{r3, lr}
 8004b84:	f000 fa4a 	bl	800501c <raise>
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fc fa40 	bl	800100e <_exit>
	...

08004b90 <__sflush_r>:
 8004b90:	898a      	ldrh	r2, [r1, #12]
 8004b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	0710      	lsls	r0, r2, #28
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	d458      	bmi.n	8004c50 <__sflush_r+0xc0>
 8004b9e:	684b      	ldr	r3, [r1, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dc05      	bgt.n	8004bb0 <__sflush_r+0x20>
 8004ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dc02      	bgt.n	8004bb0 <__sflush_r+0x20>
 8004baa:	2000      	movs	r0, #0
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	d0f9      	beq.n	8004baa <__sflush_r+0x1a>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bbc:	682f      	ldr	r7, [r5, #0]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	d032      	beq.n	8004c28 <__sflush_r+0x98>
 8004bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	075a      	lsls	r2, r3, #29
 8004bc8:	d505      	bpl.n	8004bd6 <__sflush_r+0x46>
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	1ac0      	subs	r0, r0, r3
 8004bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bd0:	b10b      	cbz	r3, 8004bd6 <__sflush_r+0x46>
 8004bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bd4:	1ac0      	subs	r0, r0, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bdc:	4628      	mov	r0, r5
 8004bde:	6a21      	ldr	r1, [r4, #32]
 8004be0:	47b0      	blx	r6
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	d106      	bne.n	8004bf6 <__sflush_r+0x66>
 8004be8:	6829      	ldr	r1, [r5, #0]
 8004bea:	291d      	cmp	r1, #29
 8004bec:	d82c      	bhi.n	8004c48 <__sflush_r+0xb8>
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <__sflush_r+0x108>)
 8004bf0:	40ca      	lsrs	r2, r1
 8004bf2:	07d6      	lsls	r6, r2, #31
 8004bf4:	d528      	bpl.n	8004c48 <__sflush_r+0xb8>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	6062      	str	r2, [r4, #4]
 8004bfa:	6922      	ldr	r2, [r4, #16]
 8004bfc:	04d9      	lsls	r1, r3, #19
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	d504      	bpl.n	8004c0c <__sflush_r+0x7c>
 8004c02:	1c42      	adds	r2, r0, #1
 8004c04:	d101      	bne.n	8004c0a <__sflush_r+0x7a>
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	b903      	cbnz	r3, 8004c0c <__sflush_r+0x7c>
 8004c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8004c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c0e:	602f      	str	r7, [r5, #0]
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d0ca      	beq.n	8004baa <__sflush_r+0x1a>
 8004c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	d002      	beq.n	8004c22 <__sflush_r+0x92>
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff fc85 	bl	800452c <_free_r>
 8004c22:	2000      	movs	r0, #0
 8004c24:	6360      	str	r0, [r4, #52]	; 0x34
 8004c26:	e7c1      	b.n	8004bac <__sflush_r+0x1c>
 8004c28:	6a21      	ldr	r1, [r4, #32]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b0      	blx	r6
 8004c30:	1c41      	adds	r1, r0, #1
 8004c32:	d1c7      	bne.n	8004bc4 <__sflush_r+0x34>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0c4      	beq.n	8004bc4 <__sflush_r+0x34>
 8004c3a:	2b1d      	cmp	r3, #29
 8004c3c:	d001      	beq.n	8004c42 <__sflush_r+0xb2>
 8004c3e:	2b16      	cmp	r3, #22
 8004c40:	d101      	bne.n	8004c46 <__sflush_r+0xb6>
 8004c42:	602f      	str	r7, [r5, #0]
 8004c44:	e7b1      	b.n	8004baa <__sflush_r+0x1a>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	e7ad      	b.n	8004bac <__sflush_r+0x1c>
 8004c50:	690f      	ldr	r7, [r1, #16]
 8004c52:	2f00      	cmp	r7, #0
 8004c54:	d0a9      	beq.n	8004baa <__sflush_r+0x1a>
 8004c56:	0793      	lsls	r3, r2, #30
 8004c58:	bf18      	it	ne
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	680e      	ldr	r6, [r1, #0]
 8004c5e:	bf08      	it	eq
 8004c60:	694b      	ldreq	r3, [r1, #20]
 8004c62:	eba6 0807 	sub.w	r8, r6, r7
 8004c66:	600f      	str	r7, [r1, #0]
 8004c68:	608b      	str	r3, [r1, #8]
 8004c6a:	f1b8 0f00 	cmp.w	r8, #0
 8004c6e:	dd9c      	ble.n	8004baa <__sflush_r+0x1a>
 8004c70:	4643      	mov	r3, r8
 8004c72:	463a      	mov	r2, r7
 8004c74:	4628      	mov	r0, r5
 8004c76:	6a21      	ldr	r1, [r4, #32]
 8004c78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c7a:	47b0      	blx	r6
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	dc06      	bgt.n	8004c8e <__sflush_r+0xfe>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	e78e      	b.n	8004bac <__sflush_r+0x1c>
 8004c8e:	4407      	add	r7, r0
 8004c90:	eba8 0800 	sub.w	r8, r8, r0
 8004c94:	e7e9      	b.n	8004c6a <__sflush_r+0xda>
 8004c96:	bf00      	nop
 8004c98:	20400001 	.word	0x20400001

08004c9c <_fflush_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	690b      	ldr	r3, [r1, #16]
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	b913      	cbnz	r3, 8004cac <_fflush_r+0x10>
 8004ca6:	2500      	movs	r5, #0
 8004ca8:	4628      	mov	r0, r5
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	b118      	cbz	r0, 8004cb6 <_fflush_r+0x1a>
 8004cae:	6983      	ldr	r3, [r0, #24]
 8004cb0:	b90b      	cbnz	r3, 8004cb6 <_fflush_r+0x1a>
 8004cb2:	f000 f887 	bl	8004dc4 <__sinit>
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <_fflush_r+0x6c>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	d11b      	bne.n	8004cf4 <_fflush_r+0x58>
 8004cbc:	686c      	ldr	r4, [r5, #4]
 8004cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ef      	beq.n	8004ca6 <_fflush_r+0xa>
 8004cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cc8:	07d0      	lsls	r0, r2, #31
 8004cca:	d404      	bmi.n	8004cd6 <_fflush_r+0x3a>
 8004ccc:	0599      	lsls	r1, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_fflush_r+0x3a>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 f915 	bl	8004f00 <__retarget_lock_acquire_recursive>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	4621      	mov	r1, r4
 8004cda:	f7ff ff59 	bl	8004b90 <__sflush_r>
 8004cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	07da      	lsls	r2, r3, #31
 8004ce4:	d4e0      	bmi.n	8004ca8 <_fflush_r+0xc>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	059b      	lsls	r3, r3, #22
 8004cea:	d4dd      	bmi.n	8004ca8 <_fflush_r+0xc>
 8004cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cee:	f000 f908 	bl	8004f02 <__retarget_lock_release_recursive>
 8004cf2:	e7d9      	b.n	8004ca8 <_fflush_r+0xc>
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <_fflush_r+0x70>)
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d101      	bne.n	8004cfe <_fflush_r+0x62>
 8004cfa:	68ac      	ldr	r4, [r5, #8]
 8004cfc:	e7df      	b.n	8004cbe <_fflush_r+0x22>
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <_fflush_r+0x74>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	bf08      	it	eq
 8004d04:	68ec      	ldreq	r4, [r5, #12]
 8004d06:	e7da      	b.n	8004cbe <_fflush_r+0x22>
 8004d08:	08005594 	.word	0x08005594
 8004d0c:	080055b4 	.word	0x080055b4
 8004d10:	08005574 	.word	0x08005574

08004d14 <std>:
 8004d14:	2300      	movs	r3, #0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	4604      	mov	r4, r0
 8004d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d22:	6083      	str	r3, [r0, #8]
 8004d24:	8181      	strh	r1, [r0, #12]
 8004d26:	6643      	str	r3, [r0, #100]	; 0x64
 8004d28:	81c2      	strh	r2, [r0, #14]
 8004d2a:	6183      	str	r3, [r0, #24]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	2208      	movs	r2, #8
 8004d30:	305c      	adds	r0, #92	; 0x5c
 8004d32:	f7fd fd5d 	bl	80027f0 <memset>
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <std+0x38>)
 8004d38:	6224      	str	r4, [r4, #32]
 8004d3a:	6263      	str	r3, [r4, #36]	; 0x24
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <std+0x3c>)
 8004d3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <std+0x40>)
 8004d42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <std+0x44>)
 8004d46:	6323      	str	r3, [r4, #48]	; 0x30
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	bf00      	nop
 8004d4c:	08005055 	.word	0x08005055
 8004d50:	08005077 	.word	0x08005077
 8004d54:	080050af 	.word	0x080050af
 8004d58:	080050d3 	.word	0x080050d3

08004d5c <_cleanup_r>:
 8004d5c:	4901      	ldr	r1, [pc, #4]	; (8004d64 <_cleanup_r+0x8>)
 8004d5e:	f000 b8af 	b.w	8004ec0 <_fwalk_reent>
 8004d62:	bf00      	nop
 8004d64:	08004c9d 	.word	0x08004c9d

08004d68 <__sfmoreglue>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	2568      	movs	r5, #104	; 0x68
 8004d6c:	1e4a      	subs	r2, r1, #1
 8004d6e:	4355      	muls	r5, r2
 8004d70:	460e      	mov	r6, r1
 8004d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d76:	f7ff fc25 	bl	80045c4 <_malloc_r>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	b140      	cbz	r0, 8004d90 <__sfmoreglue+0x28>
 8004d7e:	2100      	movs	r1, #0
 8004d80:	e9c0 1600 	strd	r1, r6, [r0]
 8004d84:	300c      	adds	r0, #12
 8004d86:	60a0      	str	r0, [r4, #8]
 8004d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d8c:	f7fd fd30 	bl	80027f0 <memset>
 8004d90:	4620      	mov	r0, r4
 8004d92:	bd70      	pop	{r4, r5, r6, pc}

08004d94 <__sfp_lock_acquire>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_acquire+0x8>)
 8004d96:	f000 b8b3 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000264 	.word	0x20000264

08004da0 <__sfp_lock_release>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sfp_lock_release+0x8>)
 8004da2:	f000 b8ae 	b.w	8004f02 <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000264 	.word	0x20000264

08004dac <__sinit_lock_acquire>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sinit_lock_acquire+0x8>)
 8004dae:	f000 b8a7 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000025f 	.word	0x2000025f

08004db8 <__sinit_lock_release>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sinit_lock_release+0x8>)
 8004dba:	f000 b8a2 	b.w	8004f02 <__retarget_lock_release_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	2000025f 	.word	0x2000025f

08004dc4 <__sinit>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	f7ff fff0 	bl	8004dac <__sinit_lock_acquire>
 8004dcc:	69a3      	ldr	r3, [r4, #24]
 8004dce:	b11b      	cbz	r3, 8004dd8 <__sinit+0x14>
 8004dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd4:	f7ff bff0 	b.w	8004db8 <__sinit_lock_release>
 8004dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <__sinit+0x68>)
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <__sinit+0x6c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004de6:	42a3      	cmp	r3, r4
 8004de8:	bf08      	it	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	4620      	mov	r0, r4
 8004dee:	bf08      	it	eq
 8004df0:	61a3      	streq	r3, [r4, #24]
 8004df2:	f000 f81f 	bl	8004e34 <__sfp>
 8004df6:	6060      	str	r0, [r4, #4]
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 f81b 	bl	8004e34 <__sfp>
 8004dfe:	60a0      	str	r0, [r4, #8]
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 f817 	bl	8004e34 <__sfp>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2104      	movs	r1, #4
 8004e0a:	60e0      	str	r0, [r4, #12]
 8004e0c:	6860      	ldr	r0, [r4, #4]
 8004e0e:	f7ff ff81 	bl	8004d14 <std>
 8004e12:	2201      	movs	r2, #1
 8004e14:	2109      	movs	r1, #9
 8004e16:	68a0      	ldr	r0, [r4, #8]
 8004e18:	f7ff ff7c 	bl	8004d14 <std>
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	2112      	movs	r1, #18
 8004e20:	68e0      	ldr	r0, [r4, #12]
 8004e22:	f7ff ff77 	bl	8004d14 <std>
 8004e26:	2301      	movs	r3, #1
 8004e28:	61a3      	str	r3, [r4, #24]
 8004e2a:	e7d1      	b.n	8004dd0 <__sinit+0xc>
 8004e2c:	080051f0 	.word	0x080051f0
 8004e30:	08004d5d 	.word	0x08004d5d

08004e34 <__sfp>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	4607      	mov	r7, r0
 8004e38:	f7ff ffac 	bl	8004d94 <__sfp_lock_acquire>
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <__sfp+0x84>)
 8004e3e:	681e      	ldr	r6, [r3, #0]
 8004e40:	69b3      	ldr	r3, [r6, #24]
 8004e42:	b913      	cbnz	r3, 8004e4a <__sfp+0x16>
 8004e44:	4630      	mov	r0, r6
 8004e46:	f7ff ffbd 	bl	8004dc4 <__sinit>
 8004e4a:	3648      	adds	r6, #72	; 0x48
 8004e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	d503      	bpl.n	8004e5c <__sfp+0x28>
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	b30b      	cbz	r3, 8004e9c <__sfp+0x68>
 8004e58:	6836      	ldr	r6, [r6, #0]
 8004e5a:	e7f7      	b.n	8004e4c <__sfp+0x18>
 8004e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e60:	b9d5      	cbnz	r5, 8004e98 <__sfp+0x64>
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <__sfp+0x88>)
 8004e64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e68:	60e3      	str	r3, [r4, #12]
 8004e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004e6c:	f000 f847 	bl	8004efe <__retarget_lock_init_recursive>
 8004e70:	f7ff ff96 	bl	8004da0 <__sfp_lock_release>
 8004e74:	2208      	movs	r2, #8
 8004e76:	4629      	mov	r1, r5
 8004e78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e80:	6025      	str	r5, [r4, #0]
 8004e82:	61a5      	str	r5, [r4, #24]
 8004e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e88:	f7fd fcb2 	bl	80027f0 <memset>
 8004e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e94:	4620      	mov	r0, r4
 8004e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e98:	3468      	adds	r4, #104	; 0x68
 8004e9a:	e7d9      	b.n	8004e50 <__sfp+0x1c>
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f7ff ff62 	bl	8004d68 <__sfmoreglue>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	6030      	str	r0, [r6, #0]
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d1d5      	bne.n	8004e58 <__sfp+0x24>
 8004eac:	f7ff ff78 	bl	8004da0 <__sfp_lock_release>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	e7ee      	b.n	8004e94 <__sfp+0x60>
 8004eb6:	bf00      	nop
 8004eb8:	080051f0 	.word	0x080051f0
 8004ebc:	ffff0001 	.word	0xffff0001

08004ec0 <_fwalk_reent>:
 8004ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	4688      	mov	r8, r1
 8004ec8:	2700      	movs	r7, #0
 8004eca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ed6:	d505      	bpl.n	8004ee4 <_fwalk_reent+0x24>
 8004ed8:	6824      	ldr	r4, [r4, #0]
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	d1f7      	bne.n	8004ece <_fwalk_reent+0xe>
 8004ede:	4638      	mov	r0, r7
 8004ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee4:	89ab      	ldrh	r3, [r5, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d907      	bls.n	8004efa <_fwalk_reent+0x3a>
 8004eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	d003      	beq.n	8004efa <_fwalk_reent+0x3a>
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	47c0      	blx	r8
 8004ef8:	4307      	orrs	r7, r0
 8004efa:	3568      	adds	r5, #104	; 0x68
 8004efc:	e7e9      	b.n	8004ed2 <_fwalk_reent+0x12>

08004efe <__retarget_lock_init_recursive>:
 8004efe:	4770      	bx	lr

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <__swhatbuf_r>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	460e      	mov	r6, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	2900      	cmp	r1, #0
 8004f10:	461d      	mov	r5, r3
 8004f12:	b096      	sub	sp, #88	; 0x58
 8004f14:	da07      	bge.n	8004f26 <__swhatbuf_r+0x22>
 8004f16:	2300      	movs	r3, #0
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	89b3      	ldrh	r3, [r6, #12]
 8004f1c:	061a      	lsls	r2, r3, #24
 8004f1e:	d410      	bmi.n	8004f42 <__swhatbuf_r+0x3e>
 8004f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f24:	e00e      	b.n	8004f44 <__swhatbuf_r+0x40>
 8004f26:	466a      	mov	r2, sp
 8004f28:	f000 f8fa 	bl	8005120 <_fstat_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dbf2      	blt.n	8004f16 <__swhatbuf_r+0x12>
 8004f30:	9a01      	ldr	r2, [sp, #4]
 8004f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f3a:	425a      	negs	r2, r3
 8004f3c:	415a      	adcs	r2, r3
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	e7ee      	b.n	8004f20 <__swhatbuf_r+0x1c>
 8004f42:	2340      	movs	r3, #64	; 0x40
 8004f44:	2000      	movs	r0, #0
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	b016      	add	sp, #88	; 0x58
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}

08004f4c <__smakebuf_r>:
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f50:	079d      	lsls	r5, r3, #30
 8004f52:	4606      	mov	r6, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	d507      	bpl.n	8004f68 <__smakebuf_r+0x1c>
 8004f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	2301      	movs	r3, #1
 8004f62:	6163      	str	r3, [r4, #20]
 8004f64:	b002      	add	sp, #8
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	466a      	mov	r2, sp
 8004f6a:	ab01      	add	r3, sp, #4
 8004f6c:	f7ff ffca 	bl	8004f04 <__swhatbuf_r>
 8004f70:	9900      	ldr	r1, [sp, #0]
 8004f72:	4605      	mov	r5, r0
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff fb25 	bl	80045c4 <_malloc_r>
 8004f7a:	b948      	cbnz	r0, 8004f90 <__smakebuf_r+0x44>
 8004f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f80:	059a      	lsls	r2, r3, #22
 8004f82:	d4ef      	bmi.n	8004f64 <__smakebuf_r+0x18>
 8004f84:	f023 0303 	bic.w	r3, r3, #3
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	e7e3      	b.n	8004f58 <__smakebuf_r+0xc>
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <__smakebuf_r+0x7c>)
 8004f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	6020      	str	r0, [r4, #0]
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	6120      	str	r0, [r4, #16]
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	9b01      	ldr	r3, [sp, #4]
 8004fa6:	b15b      	cbz	r3, 8004fc0 <__smakebuf_r+0x74>
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fae:	f000 f8c9 	bl	8005144 <_isatty_r>
 8004fb2:	b128      	cbz	r0, 8004fc0 <__smakebuf_r+0x74>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	89a0      	ldrh	r0, [r4, #12]
 8004fc2:	4305      	orrs	r5, r0
 8004fc4:	81a5      	strh	r5, [r4, #12]
 8004fc6:	e7cd      	b.n	8004f64 <__smakebuf_r+0x18>
 8004fc8:	08004d5d 	.word	0x08004d5d

08004fcc <_raise_r>:
 8004fcc:	291f      	cmp	r1, #31
 8004fce:	b538      	push	{r3, r4, r5, lr}
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	d904      	bls.n	8004fe0 <_raise_r+0x14>
 8004fd6:	2316      	movs	r3, #22
 8004fd8:	6003      	str	r3, [r0, #0]
 8004fda:	f04f 30ff 	mov.w	r0, #4294967295
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fe2:	b112      	cbz	r2, 8004fea <_raise_r+0x1e>
 8004fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fe8:	b94b      	cbnz	r3, 8004ffe <_raise_r+0x32>
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 f830 	bl	8005050 <_getpid_r>
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ffa:	f000 b817 	b.w	800502c <_kill_r>
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d00a      	beq.n	8005018 <_raise_r+0x4c>
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	d103      	bne.n	800500e <_raise_r+0x42>
 8005006:	2316      	movs	r3, #22
 8005008:	6003      	str	r3, [r0, #0]
 800500a:	2001      	movs	r0, #1
 800500c:	e7e7      	b.n	8004fde <_raise_r+0x12>
 800500e:	2400      	movs	r4, #0
 8005010:	4628      	mov	r0, r5
 8005012:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005016:	4798      	blx	r3
 8005018:	2000      	movs	r0, #0
 800501a:	e7e0      	b.n	8004fde <_raise_r+0x12>

0800501c <raise>:
 800501c:	4b02      	ldr	r3, [pc, #8]	; (8005028 <raise+0xc>)
 800501e:	4601      	mov	r1, r0
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	f7ff bfd3 	b.w	8004fcc <_raise_r>
 8005026:	bf00      	nop
 8005028:	2000000c 	.word	0x2000000c

0800502c <_kill_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	2300      	movs	r3, #0
 8005030:	4d06      	ldr	r5, [pc, #24]	; (800504c <_kill_r+0x20>)
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	f7fb ffd8 	bl	8000fee <_kill>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d102      	bne.n	8005048 <_kill_r+0x1c>
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	b103      	cbz	r3, 8005048 <_kill_r+0x1c>
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	20000258 	.word	0x20000258

08005050 <_getpid_r>:
 8005050:	f7fb bfc6 	b.w	8000fe0 <_getpid>

08005054 <__sread>:
 8005054:	b510      	push	{r4, lr}
 8005056:	460c      	mov	r4, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	f000 f894 	bl	8005188 <_read_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	bfab      	itete	ge
 8005064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005066:	89a3      	ldrhlt	r3, [r4, #12]
 8005068:	181b      	addge	r3, r3, r0
 800506a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800506e:	bfac      	ite	ge
 8005070:	6563      	strge	r3, [r4, #84]	; 0x54
 8005072:	81a3      	strhlt	r3, [r4, #12]
 8005074:	bd10      	pop	{r4, pc}

08005076 <__swrite>:
 8005076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507a:	461f      	mov	r7, r3
 800507c:	898b      	ldrh	r3, [r1, #12]
 800507e:	4605      	mov	r5, r0
 8005080:	05db      	lsls	r3, r3, #23
 8005082:	460c      	mov	r4, r1
 8005084:	4616      	mov	r6, r2
 8005086:	d505      	bpl.n	8005094 <__swrite+0x1e>
 8005088:	2302      	movs	r3, #2
 800508a:	2200      	movs	r2, #0
 800508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005090:	f000 f868 	bl	8005164 <_lseek_r>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	4632      	mov	r2, r6
 8005098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	4628      	mov	r0, r5
 80050a0:	463b      	mov	r3, r7
 80050a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	f000 b817 	b.w	80050dc <_write_r>

080050ae <__sseek>:
 80050ae:	b510      	push	{r4, lr}
 80050b0:	460c      	mov	r4, r1
 80050b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b6:	f000 f855 	bl	8005164 <_lseek_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	bf15      	itete	ne
 80050c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ca:	81a3      	strheq	r3, [r4, #12]
 80050cc:	bf18      	it	ne
 80050ce:	81a3      	strhne	r3, [r4, #12]
 80050d0:	bd10      	pop	{r4, pc}

080050d2 <__sclose>:
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f000 b813 	b.w	8005100 <_close_r>
	...

080050dc <_write_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	2200      	movs	r2, #0
 80050e6:	4d05      	ldr	r5, [pc, #20]	; (80050fc <_write_r+0x20>)
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7fb ffb6 	bl	800105c <_write>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_write_r+0x1e>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_write_r+0x1e>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000258 	.word	0x20000258

08005100 <_close_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	2300      	movs	r3, #0
 8005104:	4d05      	ldr	r5, [pc, #20]	; (800511c <_close_r+0x1c>)
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb ffc2 	bl	8001094 <_close>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_close_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_close_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000258 	.word	0x20000258

08005120 <_fstat_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	2300      	movs	r3, #0
 8005124:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_fstat_r+0x20>)
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f7fb ffbc 	bl	80010aa <_fstat>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d102      	bne.n	800513c <_fstat_r+0x1c>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	b103      	cbz	r3, 800513c <_fstat_r+0x1c>
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	bd38      	pop	{r3, r4, r5, pc}
 800513e:	bf00      	nop
 8005140:	20000258 	.word	0x20000258

08005144 <_isatty_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	2300      	movs	r3, #0
 8005148:	4d05      	ldr	r5, [pc, #20]	; (8005160 <_isatty_r+0x1c>)
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fb ffba 	bl	80010c8 <_isatty>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_isatty_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_isatty_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000258 	.word	0x20000258

08005164 <_lseek_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	2200      	movs	r2, #0
 800516e:	4d05      	ldr	r5, [pc, #20]	; (8005184 <_lseek_r+0x20>)
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f7fb ffb2 	bl	80010dc <_lseek>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_lseek_r+0x1e>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_lseek_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000258 	.word	0x20000258

08005188 <_read_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	2200      	movs	r2, #0
 8005192:	4d05      	ldr	r5, [pc, #20]	; (80051a8 <_read_r+0x20>)
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f7fb ff43 	bl	8001022 <_read>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_read_r+0x1e>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_read_r+0x1e>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000258 	.word	0x20000258

080051ac <_init>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr

080051b8 <_fini>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr
