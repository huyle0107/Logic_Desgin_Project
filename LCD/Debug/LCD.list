
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08005fd0  08005fd0  00015fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800640c  0800640c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001e0  080065f0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080065f0  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b140  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f20  00000000  00000000  0002b345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018557  00000000  00000000  0002e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc5e  00000000  00000000  00046c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877fc  00000000  00000000  000528b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da0b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  000da104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fb4 	.word	0x08005fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005fb4 	.word	0x08005fb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <check_col>:
		'1','2','3','-',
		'#','0','=','+'
};
char operator;

unsigned char check_col(unsigned char row){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin (C0_GPIO_Port, C0_Pin)))   return KEY[row+0];// if the Col 0 is low
 8000a92:	2101      	movs	r1, #1
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <check_col+0x74>)
 8000a96:	f001 fbc7 	bl	8002228 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <check_col+0x20>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <check_col+0x78>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	e024      	b.n	8000af2 <check_col+0x6a>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   return KEY[row+1];// if the Col 1 is low
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <check_col+0x74>)
 8000aac:	f001 fbbc 	bl	8002228 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <check_col+0x38>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <check_col+0x78>)
 8000abc:	5cd3      	ldrb	r3, [r2, r3]
 8000abe:	e018      	b.n	8000af2 <check_col+0x6a>

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   return KEY[row+2];// if the Col 2 is low
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <check_col+0x74>)
 8000ac4:	f001 fbb0 	bl	8002228 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d104      	bne.n	8000ad8 <check_col+0x50>
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <check_col+0x78>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	e00c      	b.n	8000af2 <check_col+0x6a>

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   return KEY[row+3];// if the Col 3 is low
 8000ad8:	2101      	movs	r1, #1
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <check_col+0x7c>)
 8000adc:	f001 fba4 	bl	8002228 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <check_col+0x68>
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	3303      	adds	r3, #3
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <check_col+0x78>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	e000      	b.n	8000af2 <check_col+0x6a>

	return 0xFF;
 8000af0:	23ff      	movs	r3, #255	; 0xff

}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010800 	.word	0x40010800
 8000b00:	08006008 	.word	0x08006008
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <KEYPAD_Read>:
unsigned char KEYPAD_Read(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	unsigned char key;
	HAL_GPIO_WritePin(GPIOB, R0_Pin,GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2102      	movs	r1, #2
 8000b12:	4836      	ldr	r0, [pc, #216]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b14:	f001 fb9f 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R1_Pin,GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4833      	ldr	r0, [pc, #204]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b1e:	f001 fb9a 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R2_Pin,GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b2a:	f001 fb94 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R3_Pin,GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	482d      	ldr	r0, [pc, #180]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b36:	f001 fb8e 	bl	8002256 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, R0_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	482b      	ldr	r0, [pc, #172]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b40:	f001 fb89 	bl	8002256 <HAL_GPIO_WritePin>
	key = check_col(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ff9f 	bl	8000a88 <check_col>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, R0_Pin, SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2102      	movs	r1, #2
 8000b52:	4826      	ldr	r0, [pc, #152]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b54:	f001 fb7f 	bl	8002256 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d001      	beq.n	8000b62 <KEYPAD_Read+0x5a>
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	e040      	b.n	8000be4 <KEYPAD_Read+0xdc>

	HAL_GPIO_WritePin(GPIOB, R1_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2104      	movs	r1, #4
 8000b66:	4821      	ldr	r0, [pc, #132]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b68:	f001 fb75 	bl	8002256 <HAL_GPIO_WritePin>
	key = check_col(4);
 8000b6c:	2004      	movs	r0, #4
 8000b6e:	f7ff ff8b 	bl	8000a88 <check_col>
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, R1_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2104      	movs	r1, #4
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b7c:	f001 fb6b 	bl	8002256 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d001      	beq.n	8000b8a <KEYPAD_Read+0x82>
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	e02c      	b.n	8000be4 <KEYPAD_Read+0xdc>

	HAL_GPIO_WritePin(GPIOB, R2_Pin, RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	4816      	ldr	r0, [pc, #88]	; (8000bec <KEYPAD_Read+0xe4>)
 8000b92:	f001 fb60 	bl	8002256 <HAL_GPIO_WritePin>
	key = check_col(8);
 8000b96:	2008      	movs	r0, #8
 8000b98:	f7ff ff76 	bl	8000a88 <check_col>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, R2_Pin, SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <KEYPAD_Read+0xe4>)
 8000ba8:	f001 fb55 	bl	8002256 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2bff      	cmp	r3, #255	; 0xff
 8000bb0:	d001      	beq.n	8000bb6 <KEYPAD_Read+0xae>
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	e016      	b.n	8000be4 <KEYPAD_Read+0xdc>

	HAL_GPIO_WritePin(GPIOB, R3_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <KEYPAD_Read+0xe4>)
 8000bbe:	f001 fb4a 	bl	8002256 <HAL_GPIO_WritePin>
	key = check_col(12);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f7ff ff60 	bl	8000a88 <check_col>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, R3_Pin, SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <KEYPAD_Read+0xe4>)
 8000bd4:	f001 fb3f 	bl	8002256 <HAL_GPIO_WritePin>
	if(key != 0xFF)	return key;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d001      	beq.n	8000be2 <KEYPAD_Read+0xda>
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	e000      	b.n	8000be4 <KEYPAD_Read+0xdc>

	return 0xFF;
 8000be2:	23ff      	movs	r3, #255	; 0xff
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <Key_Read>:

void Key_Read(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	char text = KEYPAD_Read();
 8000bf6:	f7ff ff87 	bl	8000b08 <KEYPAD_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	if(text != 0xFF)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d00a      	beq.n	8000c1a <Key_Read+0x2a>
	{
		text = KEYPAD_Read();
 8000c04:	f7ff ff80 	bl	8000b08 <KEYPAD_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
		if(text != 0xFF)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2bff      	cmp	r3, #255	; 0xff
 8000c10:	d003      	beq.n	8000c1a <Key_Read+0x2a>
		{
			LCD_add_To_String(text);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fa93 	bl	8001140 <LCD_add_To_String>
//			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

	}
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <logicCal>:
char final[16];
unsigned long long result1 = 0;
double result2 = 0;

int logicCal(char str1[16], char str2[16], char cal, int check2, int temp, int i, int j)
{
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b092      	sub	sp, #72	; 0x48
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71fb      	strb	r3, [r7, #7]
	int num1 = 0, num2 = 0, count1 = 0, count2 = 0, count3 = 0, check1 = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
 8000c38:	2300      	movs	r3, #0
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30

	if (temp == 2)
 8000c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d14b      	bne.n	8000cea <logicCal+0xc6>
	{
		i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (final[count3] != '\0')
 8000c56:	e03e      	b.n	8000cd6 <logicCal+0xb2>
		{
			if (final[count3] == '.')
 8000c58:	4aa2      	ldr	r2, [pc, #648]	; (8000ee4 <logicCal+0x2c0>)
 8000c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b2e      	cmp	r3, #46	; 0x2e
 8000c62:	d125      	bne.n	8000cb0 <logicCal+0x8c>
			{
				if (final[count3 + 1] == '0')
 8000c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a9e      	ldr	r2, [pc, #632]	; (8000ee4 <logicCal+0x2c0>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b30      	cmp	r3, #48	; 0x30
 8000c6e:	d11d      	bne.n	8000cac <logicCal+0x88>
					if (final[count3 + 2] == '0')
 8000c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c72:	3302      	adds	r3, #2
 8000c74:	4a9b      	ldr	r2, [pc, #620]	; (8000ee4 <logicCal+0x2c0>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	2b30      	cmp	r3, #48	; 0x30
 8000c7a:	d117      	bne.n	8000cac <logicCal+0x88>
						if (final[count3 + 3] == '0')
 8000c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7e:	3303      	adds	r3, #3
 8000c80:	4a98      	ldr	r2, [pc, #608]	; (8000ee4 <logicCal+0x2c0>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	2b30      	cmp	r3, #48	; 0x30
 8000c86:	d111      	bne.n	8000cac <logicCal+0x88>
							if (final[count3 + 4] == '0')
 8000c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	4a95      	ldr	r2, [pc, #596]	; (8000ee4 <logicCal+0x2c0>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	2b30      	cmp	r3, #48	; 0x30
 8000c92:	d10b      	bne.n	8000cac <logicCal+0x88>
								if (final[count3 + 5] == '0')
 8000c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c96:	3305      	adds	r3, #5
 8000c98:	4a92      	ldr	r2, [pc, #584]	; (8000ee4 <logicCal+0x2c0>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	2b30      	cmp	r3, #48	; 0x30
 8000c9e:	d105      	bne.n	8000cac <logicCal+0x88>
									if (final[count3 + 6] == '0') break;
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	4a8f      	ldr	r2, [pc, #572]	; (8000ee4 <logicCal+0x2c0>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b30      	cmp	r3, #48	; 0x30
 8000caa:	d01b      	beq.n	8000ce4 <logicCal+0xc0>
				check1 = 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
			}
			str1[count3] = final[count3];
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	498b      	ldr	r1, [pc, #556]	; (8000ee4 <logicCal+0x2c0>)
 8000cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cba:	440a      	add	r2, r1
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	701a      	strb	r2, [r3, #0]
			final[count3] = '\0';
 8000cc0:	4a88      	ldr	r2, [pc, #544]	; (8000ee4 <logicCal+0x2c0>)
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			i++; count3++;
 8000cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
		while (final[count3] != '\0')
 8000cd6:	4a83      	ldr	r2, [pc, #524]	; (8000ee4 <logicCal+0x2c0>)
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ba      	bne.n	8000c58 <logicCal+0x34>
 8000ce2:	e000      	b.n	8000ce6 <logicCal+0xc2>
									if (final[count3 + 6] == '0') break;
 8000ce4:	bf00      	nop
		}
		LCD_Clear();
 8000ce6:	f000 fccf 	bl	8001688 <LCD_Clear>
	}

	if (check2 == 1)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d14a      	bne.n	8000d86 <logicCal+0x162>
	{
		for (int l = 0; l < 16; l++) final[l] = '\0';
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf4:	e007      	b.n	8000d06 <logicCal+0xe2>
 8000cf6:	4a7b      	ldr	r2, [pc, #492]	; (8000ee4 <logicCal+0x2c0>)
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	4413      	add	r3, r2
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	3301      	adds	r3, #1
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	ddf4      	ble.n	8000cf6 <logicCal+0xd2>
	}

	while (count1 < i)
 8000d0c:	e03b      	b.n	8000d86 <logicCal+0x162>
	{
		if (check1 == 1)
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d102      	bne.n	8000d1a <logicCal+0xf6>
		{
			count1 = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8000d18:	e039      	b.n	8000d8e <logicCal+0x16a>
		}
		if (str1[count1] == '-')
 8000d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b2d      	cmp	r3, #45	; 0x2d
 8000d24:	d11d      	bne.n	8000d62 <logicCal+0x13e>
	    {
			count1++;
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	3301      	adds	r3, #1
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			while (count1 < i)
 8000d2c:	e011      	b.n	8000d52 <logicCal+0x12e>
			{
				int temp1 = (int)str1[count1] - 48;
 8000d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	3b30      	subs	r3, #48	; 0x30
 8000d38:	61bb      	str	r3, [r7, #24]
				num1 = num1 * 10 + temp1;
 8000d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	461a      	mov	r2, r3
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4413      	add	r3, r2
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
				count1++;
 8000d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4e:	3301      	adds	r3, #1
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
			while (count1 < i)
 8000d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbe9      	blt.n	8000d2e <logicCal+0x10a>
			}
			num1 *= -1;
 8000d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d5c:	425b      	negs	r3, r3
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000d60:	e015      	b.n	8000d8e <logicCal+0x16a>
	    }
	    int temp1 = (int)str1[count1] - 48;
 8000d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3b30      	subs	r3, #48	; 0x30
 8000d6c:	61fb      	str	r3, [r7, #28]
	    num1 = num1 * 10 + temp1;
 8000d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	461a      	mov	r2, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	647b      	str	r3, [r7, #68]	; 0x44
	    count1++;
 8000d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d82:	3301      	adds	r3, #1
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (count1 < i)
 8000d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbbf      	blt.n	8000d0e <logicCal+0xea>
	}
	while (count2 < j)
 8000d8e:	e035      	b.n	8000dfc <logicCal+0x1d8>
	{
		if (str2[count2] == '-')
 8000d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b2d      	cmp	r3, #45	; 0x2d
 8000d9a:	d11d      	bne.n	8000dd8 <logicCal+0x1b4>
	    {
			count2++;
 8000d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9e:	3301      	adds	r3, #1
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
	    	while (count2 < j)
 8000da2:	e011      	b.n	8000dc8 <logicCal+0x1a4>
	    	{
	    		int temp2 = (int)str2[count2] - 48;
 8000da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	3b30      	subs	r3, #48	; 0x30
 8000dae:	613b      	str	r3, [r7, #16]
	    		num2 = num2 * 10 + temp2;
 8000db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
	    		count2++;
 8000dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
	    	while (count2 < j)
 8000dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbe9      	blt.n	8000da4 <logicCal+0x180>
	    	}
	    	num2 *= -1;
 8000dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	643b      	str	r3, [r7, #64]	; 0x40
	    	break;
 8000dd6:	e015      	b.n	8000e04 <logicCal+0x1e0>
	    }
	    int temp2 = (int)str2[count2] - 48;
 8000dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3b30      	subs	r3, #48	; 0x30
 8000de2:	617b      	str	r3, [r7, #20]
	    num2 = num2 * 10 + temp2;
 8000de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	461a      	mov	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4413      	add	r3, r2
 8000df4:	643b      	str	r3, [r7, #64]	; 0x40
	    count2++;
 8000df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000df8:	3301      	adds	r3, #1
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
	while (count2 < j)
 8000dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbc5      	blt.n	8000d90 <logicCal+0x16c>
	}

	if (cal == '\0')
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d108      	bne.n	8000e1c <logicCal+0x1f8>
	{
		LCD_Put_Cur(1, 11);
 8000e0a:	210b      	movs	r1, #11
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f000 fc19 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e12:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <logicCal+0x2c4>)
 8000e14:	f000 fbfa 	bl	800160c <LCD_Send_String>
	    return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e13b      	b.n	8001094 <logicCal+0x470>
	}
	else if (count1 == 0)
 8000e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d108      	bne.n	8000e34 <logicCal+0x210>
	{
		LCD_Put_Cur(1, 11);
 8000e22:	210b      	movs	r1, #11
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fc0d 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e2a:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <logicCal+0x2c4>)
 8000e2c:	f000 fbee 	bl	800160c <LCD_Send_String>
		return 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	e12f      	b.n	8001094 <logicCal+0x470>
	}
	else if (count2 == 0)
 8000e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d108      	bne.n	8000e4c <logicCal+0x228>
	{
		LCD_Put_Cur(1, 11);
 8000e3a:	210b      	movs	r1, #11
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 fc01 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8000e42:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <logicCal+0x2c4>)
 8000e44:	f000 fbe2 	bl	800160c <LCD_Send_String>
		return 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e123      	b.n	8001094 <logicCal+0x470>
	}

	switch(cal)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b78      	cmp	r3, #120	; 0x78
 8000e50:	d050      	beq.n	8000ef4 <logicCal+0x2d0>
 8000e52:	2b78      	cmp	r3, #120	; 0x78
 8000e54:	f300 80d3 	bgt.w	8000ffe <logicCal+0x3da>
 8000e58:	2b2f      	cmp	r3, #47	; 0x2f
 8000e5a:	f000 8099 	beq.w	8000f90 <logicCal+0x36c>
 8000e5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e60:	f300 80cd 	bgt.w	8000ffe <logicCal+0x3da>
 8000e64:	2b2b      	cmp	r3, #43	; 0x2b
 8000e66:	d002      	beq.n	8000e6e <logicCal+0x24a>
 8000e68:	2b2d      	cmp	r3, #45	; 0x2d
 8000e6a:	d01b      	beq.n	8000ea4 <logicCal+0x280>
 8000e6c:	e0c7      	b.n	8000ffe <logicCal+0x3da>
	{
		case '+':
			if (check1 == 1) result2 += (double)num2;
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10d      	bne.n	8000e90 <logicCal+0x26c>
 8000e74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e76:	f7ff fac5 	bl	8000404 <__aeabi_i2d>
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <logicCal+0x2c8>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff f974 	bl	800016c <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4918      	ldr	r1, [pc, #96]	; (8000eec <logicCal+0x2c8>)
 8000e8a:	e9c1 2300 	strd	r2, r3, [r1]
			else result1 = num1 + num2;
	        break;
 8000e8e:	e0b6      	b.n	8000ffe <logicCal+0x3da>
			else result1 = num1 + num2;
 8000e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e94:	4413      	add	r3, r2
 8000e96:	461a      	mov	r2, r3
 8000e98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e9c:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <logicCal+0x2cc>)
 8000e9e:	e9c1 2300 	strd	r2, r3, [r1]
	        break;
 8000ea2:	e0ac      	b.n	8000ffe <logicCal+0x3da>
	    case '-':
	    	if (check1 == 1) result2 -= (double)num2;
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d111      	bne.n	8000ece <logicCal+0x2aa>
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <logicCal+0x2c8>)
 8000eac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000eb0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000eb2:	f7ff faa7 	bl	8000404 <__aeabi_i2d>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff f953 	bl	8000168 <__aeabi_dsub>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4909      	ldr	r1, [pc, #36]	; (8000eec <logicCal+0x2c8>)
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
	    	else result1 = num1 - num2;
	        break;
 8000ecc:	e097      	b.n	8000ffe <logicCal+0x3da>
	    	else result1 = num1 - num2;
 8000ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000eda:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <logicCal+0x2cc>)
 8000edc:	e9c1 2300 	strd	r2, r3, [r1]
	        break;
 8000ee0:	e08d      	b.n	8000ffe <logicCal+0x3da>
 8000ee2:	bf00      	nop
 8000ee4:	20000240 	.word	0x20000240
 8000ee8:	08005fd0 	.word	0x08005fd0
 8000eec:	20000208 	.word	0x20000208
 8000ef0:	20000200 	.word	0x20000200
	    case 'x':
	    	if (check1 == 1) result2 *= (double)num2;
 8000ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10d      	bne.n	8000f16 <logicCal+0x2f2>
 8000efa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000efc:	f7ff fa82 	bl	8000404 <__aeabi_i2d>
 8000f00:	4b66      	ldr	r3, [pc, #408]	; (800109c <logicCal+0x478>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fae7 	bl	80004d8 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4963      	ldr	r1, [pc, #396]	; (800109c <logicCal+0x478>)
 8000f10:	e9c1 2300 	strd	r2, r3, [r1]
 8000f14:	e009      	b.n	8000f2a <logicCal+0x306>
	    	else result1 = num1 * num2;
 8000f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f24:	495e      	ldr	r1, [pc, #376]	; (80010a0 <logicCal+0x47c>)
 8000f26:	e9c1 2300 	strd	r2, r3, [r1]
	    	if ((result2 * (double)num2) < -2147483648 && (result2 * (double)num2) > 2147483648)
 8000f2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f2c:	f7ff fa6a 	bl	8000404 <__aeabi_i2d>
 8000f30:	4b5a      	ldr	r3, [pc, #360]	; (800109c <logicCal+0x478>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff facf 	bl	80004d8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <logicCal+0x480>)
 8000f48:	f7ff fd38 	bl	80009bc <__aeabi_dcmplt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <logicCal+0x330>
	        {
	        	LCD_Put_Cur(1, 6);
	        	LCD_Send_String("math error");
	        	return 0;
	        }
	        break;
 8000f52:	e054      	b.n	8000ffe <logicCal+0x3da>
	    	if ((result2 * (double)num2) < -2147483648 && (result2 * (double)num2) > 2147483648)
 8000f54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f56:	f7ff fa55 	bl	8000404 <__aeabi_i2d>
 8000f5a:	4b50      	ldr	r3, [pc, #320]	; (800109c <logicCal+0x478>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff faba 	bl	80004d8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <logicCal+0x484>)
 8000f72:	f7ff fd41 	bl	80009f8 <__aeabi_dcmpgt>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d100      	bne.n	8000f7e <logicCal+0x35a>
	        break;
 8000f7c:	e03f      	b.n	8000ffe <logicCal+0x3da>
				LCD_Put_Cur(1, 6);
 8000f7e:	2106      	movs	r1, #6
 8000f80:	2001      	movs	r0, #1
 8000f82:	f000 fb5f 	bl	8001644 <LCD_Put_Cur>
				LCD_Send_String("math error");
 8000f86:	4849      	ldr	r0, [pc, #292]	; (80010ac <logicCal+0x488>)
 8000f88:	f000 fb40 	bl	800160c <LCD_Send_String>
				return 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e081      	b.n	8001094 <logicCal+0x470>
	    case '/':
	    	if(num2 == 0)
 8000f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d108      	bne.n	8000fa8 <logicCal+0x384>
	        {
	        	LCD_Put_Cur(1, 11);
 8000f96:	210b      	movs	r1, #11
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fb53 	bl	8001644 <LCD_Put_Cur>
	        	LCD_Send_String("error");
 8000f9e:	4844      	ldr	r0, [pc, #272]	; (80010b0 <logicCal+0x48c>)
 8000fa0:	f000 fb34 	bl	800160c <LCD_Send_String>
	        	return 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e075      	b.n	8001094 <logicCal+0x470>
	        }
	    	else if (check1 == 1)
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d111      	bne.n	8000fd2 <logicCal+0x3ae>
	    	{
	    		result2 /= (double)num2;
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <logicCal+0x478>)
 8000fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fb6:	f7ff fa25 	bl	8000404 <__aeabi_i2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	f7ff fbb3 	bl	800072c <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4934      	ldr	r1, [pc, #208]	; (800109c <logicCal+0x478>)
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
	        else
	        {
	        	check1 = 1;
	            result2 = (double)num1/num2;
	        }
	        break;
 8000fd0:	e014      	b.n	8000ffc <logicCal+0x3d8>
	        	check1 = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
	            result2 = (double)num1/num2;
 8000fd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fd8:	f7ff fa14 	bl	8000404 <__aeabi_i2d>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460d      	mov	r5, r1
 8000fe0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fe2:	f7ff fa0f 	bl	8000404 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff fb9d 	bl	800072c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4929      	ldr	r1, [pc, #164]	; (800109c <logicCal+0x478>)
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
	        break;
 8000ffc:	bf00      	nop
	}
	if (check1 == 0)
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <logicCal+0x3f0>
	{
		sprintf(final, "%d", result1);
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <logicCal+0x47c>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	492a      	ldr	r1, [pc, #168]	; (80010b4 <logicCal+0x490>)
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <logicCal+0x494>)
 800100e:	f002 fd99 	bl	8003b44 <siprintf>
 8001012:	e006      	b.n	8001022 <logicCal+0x3fe>
	}
	else
	{
		sprintf(final, "%.6f", result2);
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <logicCal+0x478>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	4928      	ldr	r1, [pc, #160]	; (80010bc <logicCal+0x498>)
 800101c:	4826      	ldr	r0, [pc, #152]	; (80010b8 <logicCal+0x494>)
 800101e:	f002 fd91 	bl	8003b44 <siprintf>
	}
	int tmpcount = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int z = 0; z < 16; z++)
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	e00c      	b.n	8001046 <logicCal+0x422>
	{
		LCD_Put_Cur(1, tmpcount);
 800102c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fb08 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_Data(' ');
 8001034:	2020      	movs	r0, #32
 8001036:	f000 fac7 	bl	80015c8 <LCD_Send_Data>
		tmpcount++;
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	3301      	adds	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int z = 0; z < 16; z++)
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	3301      	adds	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	2b0f      	cmp	r3, #15
 800104a:	ddef      	ble.n	800102c <logicCal+0x408>
	}
	count3 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
	while (final[count3] != '\0') count3++;
 8001050:	e002      	b.n	8001058 <logicCal+0x434>
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	3301      	adds	r3, #1
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <logicCal+0x494>)
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f6      	bne.n	8001052 <logicCal+0x42e>
	LCD_Put_Cur(1, 16 - count3);
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	f1c3 0310 	rsb	r3, r3, #16
 800106a:	4619      	mov	r1, r3
 800106c:	2001      	movs	r0, #1
 800106e:	f000 fae9 	bl	8001644 <LCD_Put_Cur>
	for(int y = 0; y < 16; y++) LCD_Send_Data(final[y]);
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	e009      	b.n	800108c <logicCal+0x468>
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <logicCal+0x494>)
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 faa1 	bl	80015c8 <LCD_Send_Data>
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	3301      	adds	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	ddf2      	ble.n	8001078 <logicCal+0x454>
	return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3748      	adds	r7, #72	; 0x48
 8001098:	46bd      	mov	sp, r7
 800109a:	bdb0      	pop	{r4, r5, r7, pc}
 800109c:	20000208 	.word	0x20000208
 80010a0:	20000200 	.word	0x20000200
 80010a4:	c1e00000 	.word	0xc1e00000
 80010a8:	41e00000 	.word	0x41e00000
 80010ac:	08005fd8 	.word	0x08005fd8
 80010b0:	08005fd0 	.word	0x08005fd0
 80010b4:	08005fe4 	.word	0x08005fe4
 80010b8:	20000240 	.word	0x20000240
 80010bc:	08005fe8 	.word	0x08005fe8

080010c0 <ClearData>:
char operand[16];
int check = 0, check1 = 0, checkeq = 0;
int i = 0, j = 0, temp = 0;

void ClearData()
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
	for (int l = 0; l < 16; l++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e011      	b.n	80010f0 <ClearData+0x30>
	{
		operand1[l] = ' ';
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <ClearData+0x60>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2220      	movs	r2, #32
 80010d4:	701a      	strb	r2, [r3, #0]
		operand2[l] = ' ';
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <ClearData+0x64>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	2220      	movs	r2, #32
 80010de:	701a      	strb	r2, [r3, #0]
		operand[l] = ' ';
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <ClearData+0x68>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	2220      	movs	r2, #32
 80010e8:	701a      	strb	r2, [r3, #0]
	for (int l = 0; l < 16; l++)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	ddea      	ble.n	80010cc <ClearData+0xc>
	}
	operator = '\0';
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <ClearData+0x6c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
	i = 0; j = 0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <ClearData+0x70>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <ClearData+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
	check =  0; check1 = 1;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <ClearData+0x78>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <ClearData+0x7c>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000270 	.word	0x20000270
 8001124:	20000250 	.word	0x20000250
 8001128:	20000260 	.word	0x20000260
 800112c:	2000023c 	.word	0x2000023c
 8001130:	2000021c 	.word	0x2000021c
 8001134:	20000220 	.word	0x20000220
 8001138:	20000210 	.word	0x20000210
 800113c:	20000214 	.word	0x20000214

08001140 <LCD_add_To_String>:

void LCD_add_To_String(char data)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b093      	sub	sp, #76	; 0x4c
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	if (temp == 0 && check1 == 0)
 800114a:	4b9e      	ldr	r3, [pc, #632]	; (80013c4 <LCD_add_To_String+0x284>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d107      	bne.n	8001162 <LCD_add_To_String+0x22>
 8001152:	4b9d      	ldr	r3, [pc, #628]	; (80013c8 <LCD_add_To_String+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <LCD_add_To_String+0x22>
	{
		ClearData();
 800115a:	f7ff ffb1 	bl	80010c0 <ClearData>
		LCD_Clear();
 800115e:	f000 fa93 	bl	8001688 <LCD_Clear>
	}
	if (data == '#')
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b23      	cmp	r3, #35	; 0x23
 8001166:	d104      	bne.n	8001172 <LCD_add_To_String+0x32>
	{
		ClearData();
 8001168:	f7ff ffaa 	bl	80010c0 <ClearData>
		LCD_Clear();
 800116c:	f000 fa8c 	bl	8001688 <LCD_Clear>
		return;
 8001170:	e184      	b.n	800147c <LCD_add_To_String+0x33c>
	}
	else if (data == '=')
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b3d      	cmp	r3, #61	; 0x3d
 8001176:	d152      	bne.n	800121e <LCD_add_To_String+0xde>
	{
		if (checkeq == 1 && operator == '\0')
 8001178:	4b94      	ldr	r3, [pc, #592]	; (80013cc <LCD_add_To_String+0x28c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d122      	bne.n	80011c6 <LCD_add_To_String+0x86>
 8001180:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <LCD_add_To_String+0x290>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11e      	bne.n	80011c6 <LCD_add_To_String+0x86>
		{
			LCD_Clear();
 8001188:	f000 fa7e 	bl	8001688 <LCD_Clear>
			int tmpcount = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
			for(int z = 0; z < 16; z++)
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
 8001194:	e00c      	b.n	80011b0 <LCD_add_To_String+0x70>
			{
				LCD_Put_Cur(1, tmpcount);
 8001196:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001198:	2001      	movs	r0, #1
 800119a:	f000 fa53 	bl	8001644 <LCD_Put_Cur>
				LCD_Send_Data(' ');
 800119e:	2020      	movs	r0, #32
 80011a0:	f000 fa12 	bl	80015c8 <LCD_Send_Data>
				tmpcount++;
 80011a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a6:	3301      	adds	r3, #1
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
			for(int z = 0; z < 16; z++)
 80011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ac:	3301      	adds	r3, #1
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	ddef      	ble.n	8001196 <LCD_add_To_String+0x56>
			}
			LCD_Put_Cur(1, 11);
 80011b6:	210b      	movs	r1, #11
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 fa43 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_String("error");
 80011be:	4885      	ldr	r0, [pc, #532]	; (80013d4 <LCD_add_To_String+0x294>)
 80011c0:	f000 fa24 	bl	800160c <LCD_Send_String>
			return;
 80011c4:	e15a      	b.n	800147c <LCD_add_To_String+0x33c>
		}
		if ((i + j + 1) > 16)
 80011c6:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <LCD_add_To_String+0x298>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <LCD_add_To_String+0x29c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	dd04      	ble.n	80011de <LCD_add_To_String+0x9e>
		{
			ClearData();
 80011d4:	f7ff ff74 	bl	80010c0 <ClearData>
			LCD_Clear();
 80011d8:	f000 fa56 	bl	8001688 <LCD_Clear>
			return;
 80011dc:	e14e      	b.n	800147c <LCD_add_To_String+0x33c>
		}
		temp = logicCal(operand1, operand2, operator, check1, temp, i, j);
 80011de:	4b7c      	ldr	r3, [pc, #496]	; (80013d0 <LCD_add_To_String+0x290>)
 80011e0:	7818      	ldrb	r0, [r3, #0]
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <LCD_add_To_String+0x288>)
 80011e4:	681c      	ldr	r4, [r3, #0]
 80011e6:	4b77      	ldr	r3, [pc, #476]	; (80013c4 <LCD_add_To_String+0x284>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a7b      	ldr	r2, [pc, #492]	; (80013d8 <LCD_add_To_String+0x298>)
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	497b      	ldr	r1, [pc, #492]	; (80013dc <LCD_add_To_String+0x29c>)
 80011f0:	6809      	ldr	r1, [r1, #0]
 80011f2:	9102      	str	r1, [sp, #8]
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4623      	mov	r3, r4
 80011fa:	4602      	mov	r2, r0
 80011fc:	4978      	ldr	r1, [pc, #480]	; (80013e0 <LCD_add_To_String+0x2a0>)
 80011fe:	4879      	ldr	r0, [pc, #484]	; (80013e4 <LCD_add_To_String+0x2a4>)
 8001200:	f7ff fd10 	bl	8000c24 <logicCal>
 8001204:	4603      	mov	r3, r0
 8001206:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <LCD_add_To_String+0x284>)
 8001208:	6013      	str	r3, [r2, #0]
		check1 = 0; checkeq = 1; operator = '\0';
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <LCD_add_To_String+0x288>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <LCD_add_To_String+0x28c>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <LCD_add_To_String+0x290>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		return;
 800121c:	e12e      	b.n	800147c <LCD_add_To_String+0x33c>
	}
	else if (temp == 1 && check1 == 0)
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <LCD_add_To_String+0x284>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d16c      	bne.n	8001300 <LCD_add_To_String+0x1c0>
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <LCD_add_To_String+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d168      	bne.n	8001300 <LCD_add_To_String+0x1c0>
	{
		for (int l = 0; l < 16; l++)
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001232:	e011      	b.n	8001258 <LCD_add_To_String+0x118>
		{
			operand1[l] = ' ';
 8001234:	4a6b      	ldr	r2, [pc, #428]	; (80013e4 <LCD_add_To_String+0x2a4>)
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	4413      	add	r3, r2
 800123a:	2220      	movs	r2, #32
 800123c:	701a      	strb	r2, [r3, #0]
			operand2[l] = ' ';
 800123e:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <LCD_add_To_String+0x2a0>)
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	4413      	add	r3, r2
 8001244:	2220      	movs	r2, #32
 8001246:	701a      	strb	r2, [r3, #0]
			operand[l] = ' ';
 8001248:	4a67      	ldr	r2, [pc, #412]	; (80013e8 <LCD_add_To_String+0x2a8>)
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	4413      	add	r3, r2
 800124e:	2220      	movs	r2, #32
 8001250:	701a      	strb	r2, [r3, #0]
		for (int l = 0; l < 16; l++)
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	3301      	adds	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	2b0f      	cmp	r3, #15
 800125c:	ddea      	ble.n	8001234 <LCD_add_To_String+0xf4>
		}
		operator = '\0';
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <LCD_add_To_String+0x290>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
		int tmpcount = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int z = 0; z < 16; z++)
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e00c      	b.n	8001288 <LCD_add_To_String+0x148>
		{
			LCD_Put_Cur(0, tmpcount);
 800126e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001270:	2000      	movs	r0, #0
 8001272:	f000 f9e7 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_Data(' ');
 8001276:	2020      	movs	r0, #32
 8001278:	f000 f9a6 	bl	80015c8 <LCD_Send_Data>
			tmpcount++;
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	3301      	adds	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int z = 0; z < 16; z++)
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	2b0f      	cmp	r3, #15
 800128c:	ddef      	ble.n	800126e <LCD_add_To_String+0x12e>
		}

		for(int z = 0; z < 15; z++)
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	e00b      	b.n	80012ac <LCD_add_To_String+0x16c>
		{
			operand[z] = operand[z+1];
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	3301      	adds	r3, #1
 8001298:	4a53      	ldr	r2, [pc, #332]	; (80013e8 <LCD_add_To_String+0x2a8>)
 800129a:	5cd1      	ldrb	r1, [r2, r3]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <LCD_add_To_String+0x2a8>)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	4413      	add	r3, r2
 80012a2:	460a      	mov	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
		for(int z = 0; z < 15; z++)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	3301      	adds	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	2b0e      	cmp	r3, #14
 80012b0:	ddf0      	ble.n	8001294 <LCD_add_To_String+0x154>
		}
		operand[15] = data;
 80012b2:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <LCD_add_To_String+0x2a8>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	73d3      	strb	r3, [r2, #15]
		LCD_Put_Cur(0,0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f9c2 	bl	8001644 <LCD_Put_Cur>
		for(int z = 0; z < 16; z++) LCD_Send_Data(operand[z]);
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	e009      	b.n	80012da <LCD_add_To_String+0x19a>
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <LCD_add_To_String+0x2a8>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f97a 	bl	80015c8 <LCD_Send_Data>
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	ddf2      	ble.n	80012c6 <LCD_add_To_String+0x186>

		operator = data;
 80012e0:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <LCD_add_To_String+0x290>)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	7013      	strb	r3, [r2, #0]
		i = 1; j = 0;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <LCD_add_To_String+0x298>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <LCD_add_To_String+0x29c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
		temp = 2; check = 1;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <LCD_add_To_String+0x284>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <LCD_add_To_String+0x2ac>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

		return;
 80012fe:	e0bd      	b.n	800147c <LCD_add_To_String+0x33c>
	}


	if (operator != '\0')
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <LCD_add_To_String+0x290>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <LCD_add_To_String+0x1e2>
	{
		if (data == '+' || data == 'x' || data == '/')
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b2b      	cmp	r3, #43	; 0x2b
 800130c:	d005      	beq.n	800131a <LCD_add_To_String+0x1da>
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b78      	cmp	r3, #120	; 0x78
 8001312:	d002      	beq.n	800131a <LCD_add_To_String+0x1da>
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b2f      	cmp	r3, #47	; 0x2f
 8001318:	d103      	bne.n	8001322 <LCD_add_To_String+0x1e2>
		{
			operator = data;
 800131a:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <LCD_add_To_String+0x290>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	7013      	strb	r3, [r2, #0]
			return;
 8001320:	e0ac      	b.n	800147c <LCD_add_To_String+0x33c>
		}
	}

	if (data >= '0' && data <= '9')
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b2f      	cmp	r3, #47	; 0x2f
 8001326:	d91c      	bls.n	8001362 <LCD_add_To_String+0x222>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b39      	cmp	r3, #57	; 0x39
 800132c:	d819      	bhi.n	8001362 <LCD_add_To_String+0x222>
	{
		if (check == 0)
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <LCD_add_To_String+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <LCD_add_To_String+0x20c>
		{
			operand1[i] = data;
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <LCD_add_To_String+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	492a      	ldr	r1, [pc, #168]	; (80013e4 <LCD_add_To_String+0x2a4>)
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	54ca      	strb	r2, [r1, r3]
			i++;
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <LCD_add_To_String+0x298>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <LCD_add_To_String+0x298>)
 8001348:	6013      	str	r3, [r2, #0]
		if (check == 0)
 800134a:	e06e      	b.n	800142a <LCD_add_To_String+0x2ea>
		}
		else
		{
			operand2[j] = data;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <LCD_add_To_String+0x29c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4923      	ldr	r1, [pc, #140]	; (80013e0 <LCD_add_To_String+0x2a0>)
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	54ca      	strb	r2, [r1, r3]
			j++;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <LCD_add_To_String+0x29c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <LCD_add_To_String+0x29c>)
 800135e:	6013      	str	r3, [r2, #0]
		if (check == 0)
 8001360:	e063      	b.n	800142a <LCD_add_To_String+0x2ea>
		}
	}
	else if (data == '+' || data == '-' || data == 'x' || data == '/')
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b2b      	cmp	r3, #43	; 0x2b
 8001366:	d008      	beq.n	800137a <LCD_add_To_String+0x23a>
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b2d      	cmp	r3, #45	; 0x2d
 800136c:	d005      	beq.n	800137a <LCD_add_To_String+0x23a>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b78      	cmp	r3, #120	; 0x78
 8001372:	d002      	beq.n	800137a <LCD_add_To_String+0x23a>
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b2f      	cmp	r3, #47	; 0x2f
 8001378:	d13a      	bne.n	80013f0 <LCD_add_To_String+0x2b0>
	{
		if (i == 0)
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <LCD_add_To_String+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10a      	bne.n	8001398 <LCD_add_To_String+0x258>
		{
			operand1[i] = data;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <LCD_add_To_String+0x298>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4917      	ldr	r1, [pc, #92]	; (80013e4 <LCD_add_To_String+0x2a4>)
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	54ca      	strb	r2, [r1, r3]
			i++;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <LCD_add_To_String+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <LCD_add_To_String+0x298>)
 8001394:	6013      	str	r3, [r2, #0]
		if (i == 0)
 8001396:	e048      	b.n	800142a <LCD_add_To_String+0x2ea>
		}
		else if (check == 0)
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <LCD_add_To_String+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <LCD_add_To_String+0x26e>
		{
			operator = data;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LCD_add_To_String+0x290>)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	7013      	strb	r3, [r2, #0]
			check = 1;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <LCD_add_To_String+0x2ac>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
		if (i == 0)
 80013ac:	e03d      	b.n	800142a <LCD_add_To_String+0x2ea>
		}
		else
		{
			operand2[j] = data;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <LCD_add_To_String+0x29c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	490b      	ldr	r1, [pc, #44]	; (80013e0 <LCD_add_To_String+0x2a0>)
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	54ca      	strb	r2, [r1, r3]
		    j++;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <LCD_add_To_String+0x29c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <LCD_add_To_String+0x29c>)
 80013c0:	6013      	str	r3, [r2, #0]
		if (i == 0)
 80013c2:	e032      	b.n	800142a <LCD_add_To_String+0x2ea>
 80013c4:	20000224 	.word	0x20000224
 80013c8:	20000214 	.word	0x20000214
 80013cc:	20000218 	.word	0x20000218
 80013d0:	2000023c 	.word	0x2000023c
 80013d4:	08005ff0 	.word	0x08005ff0
 80013d8:	2000021c 	.word	0x2000021c
 80013dc:	20000220 	.word	0x20000220
 80013e0:	20000250 	.word	0x20000250
 80013e4:	20000270 	.word	0x20000270
 80013e8:	20000260 	.word	0x20000260
 80013ec:	20000210 	.word	0x20000210
		}
	}
	else
	{
		int tmpcount = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
		for(int z = 0; z < 16; z++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00c      	b.n	8001414 <LCD_add_To_String+0x2d4>
		{
			LCD_Put_Cur(1, tmpcount);
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 f921 	bl	8001644 <LCD_Put_Cur>
			LCD_Send_Data(' ');
 8001402:	2020      	movs	r0, #32
 8001404:	f000 f8e0 	bl	80015c8 <LCD_Send_Data>
			tmpcount++;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	3301      	adds	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
		for(int z = 0; z < 16; z++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	ddef      	ble.n	80013fa <LCD_add_To_String+0x2ba>
		}
		LCD_Put_Cur(1, 11);
 800141a:	210b      	movs	r1, #11
 800141c:	2001      	movs	r0, #1
 800141e:	f000 f911 	bl	8001644 <LCD_Put_Cur>
		LCD_Send_String("error");
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <LCD_add_To_String+0x344>)
 8001424:	f000 f8f2 	bl	800160c <LCD_Send_String>
        return;
 8001428:	e028      	b.n	800147c <LCD_add_To_String+0x33c>
    }

	for(int z = 0; z < 15; z++)
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e00b      	b.n	8001448 <LCD_add_To_String+0x308>
	{
		operand[z] = operand[z+1];
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	3301      	adds	r3, #1
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <LCD_add_To_String+0x348>)
 8001436:	5cd1      	ldrb	r1, [r2, r3]
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <LCD_add_To_String+0x348>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	460a      	mov	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
	for(int z = 0; z < 15; z++)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	3301      	adds	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b0e      	cmp	r3, #14
 800144c:	ddf0      	ble.n	8001430 <LCD_add_To_String+0x2f0>
	}
	operand[15] = data;
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LCD_add_To_String+0x348>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	73d3      	strb	r3, [r2, #15]
	LCD_Put_Cur(0,0);
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f8f4 	bl	8001644 <LCD_Put_Cur>
	for(int z = 0; z < 16; z++) LCD_Send_Data(operand[z]);
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e009      	b.n	8001476 <LCD_add_To_String+0x336>
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <LCD_add_To_String+0x348>)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f8ac 	bl	80015c8 <LCD_Send_Data>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	ddf2      	ble.n	8001462 <LCD_add_To_String+0x322>
}
 800147c:	373c      	adds	r7, #60	; 0x3c
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	08005ff0 	.word	0x08005ff0
 8001488:	20000260 	.word	0x20000260

0800148c <send8bitstoLCD>:

void send8bitstoLCD(char vee){
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	int b0,b1,b2,b3,b4,b5,b6,b7;

	b0 = vee & 1;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
	b1 = vee & 2;
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
	b2 = vee & 4;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	61fb      	str	r3, [r7, #28]
	b3 = vee & 8;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	61bb      	str	r3, [r7, #24]
	b4 = vee & 16;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
	b5 = vee & 32;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	613b      	str	r3, [r7, #16]
	b6 = vee & 64;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	60fb      	str	r3, [r7, #12]
	b7 = vee & 128;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d4:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, b0);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2108      	movs	r1, #8
 80014de:	481d      	ldr	r0, [pc, #116]	; (8001554 <send8bitstoLCD+0xc8>)
 80014e0:	f000 feb9 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, b1);
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2104      	movs	r1, #4
 80014ec:	4819      	ldr	r0, [pc, #100]	; (8001554 <send8bitstoLCD+0xc8>)
 80014ee:	f000 feb2 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, b2);
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <send8bitstoLCD+0xc8>)
 80014fe:	f000 feaa 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, b3);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	2108      	movs	r1, #8
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <send8bitstoLCD+0xcc>)
 800150c:	f000 fea3 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, b4);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	2120      	movs	r1, #32
 8001518:	480f      	ldr	r0, [pc, #60]	; (8001558 <send8bitstoLCD+0xcc>)
 800151a:	f000 fe9c 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, b5);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	2110      	movs	r1, #16
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <send8bitstoLCD+0xcc>)
 8001528:	f000 fe95 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, b6);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <send8bitstoLCD+0xcc>)
 8001538:	f000 fe8d 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, b7);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <send8bitstoLCD+0xc8>)
 8001548:	f000 fe85 	bl	8002256 <HAL_GPIO_WritePin>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010800 	.word	0x40010800
 8001558:	40010c00 	.word	0x40010c00

0800155c <LCD_Init>:

void LCD_Init(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
//	HAL_Delay(10);
	LCD_Send_CMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 8001560:	2038      	movs	r0, #56	; 0x38
 8001562:	f000 f80f 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x0C);		/* Display ON Cursor OFF */
 8001566:	200c      	movs	r0, #12
 8001568:	f000 f80c 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x06);		/* Auto Increment cursor */
 800156c:	2006      	movs	r0, #6
 800156e:	f000 f809 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x01);		/* Clear display */
 8001572:	2001      	movs	r0, #1
 8001574:	f000 f806 	bl	8001584 <LCD_Send_CMD>
	LCD_Send_CMD(0x80);		/* Cursor at home position */
 8001578:	2080      	movs	r0, #128	; 0x80
 800157a:	f000 f803 	bl	8001584 <LCD_Send_CMD>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <LCD_Send_CMD>:

void LCD_Send_CMD(char cmd){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
//	HAL_Delay(20);
	HAL_GPIO_WritePin(GPIOB, RS_Pin, 0); // RS = 0 nean send command
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <LCD_Send_CMD+0x40>)
 8001596:	f000 fe5e 	bl	8002256 <HAL_GPIO_WritePin>
	send8bitstoLCD(cmd);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff75 	bl	800148c <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <LCD_Send_CMD+0x40>)
 80015aa:	f000 fe54 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <LCD_Send_CMD+0x40>)
 80015b6:	f000 fe4e 	bl	8002256 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010c00 	.word	0x40010c00

080015c8 <LCD_Send_Data>:

void LCD_Send_Data(char data){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
//	HAL_Delay(20);
	HAL_GPIO_WritePin(GPIOB, RS_Pin, 1); // RS = 1 send data
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LCD_Send_Data+0x40>)
 80015da:	f000 fe3c 	bl	8002256 <HAL_GPIO_WritePin>
	send8bitstoLCD(data);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff53 	bl	800148c <send8bitstoLCD>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <LCD_Send_Data+0x40>)
 80015ee:	f000 fe32 	bl	8002256 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <LCD_Send_Data+0x40>)
 80015fa:	f000 fe2c 	bl	8002256 <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010c00 	.word	0x40010c00

0800160c <LCD_Send_String>:

void LCD_Send_String(char *str){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i] != '\0'; i++){
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e009      	b.n	800162e <LCD_Send_String+0x22>
		LCD_Send_Data(str[i]);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffd0 	bl	80015c8 <LCD_Send_Data>
	for (int i = 0; str[i] != '\0'; i++){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ef      	bne.n	800161a <LCD_Send_String+0xe>
	}
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LCD_Put_Cur>:

void LCD_Put_Cur(int row,int col){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	LCD_Send_CMD(0x3C);		//Activate second line
 800164e:	203c      	movs	r0, #60	; 0x3c
 8001650:	f7ff ff98 	bl	8001584 <LCD_Send_CMD>
	switch(row){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <LCD_Put_Cur+0x1e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <LCD_Put_Cur+0x28>
 8001660:	e009      	b.n	8001676 <LCD_Put_Cur+0x32>
	case 0:
		col |= 0x80;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	603b      	str	r3, [r7, #0]
		break;
 800166a:	e004      	b.n	8001676 <LCD_Put_Cur+0x32>
	case 1:
		col |= 0xC0;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001672:	603b      	str	r3, [r7, #0]
		break;
 8001674:	bf00      	nop
	}
	LCD_Send_CMD(col);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff82 	bl	8001584 <LCD_Send_CMD>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <LCD_Clear>:

void LCD_Clear(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	LCD_Send_CMD(0x01);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ff79 	bl	8001584 <LCD_Send_CMD>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 fab6 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f812 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f000 f898 	bl	80017d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016a8:	f000 f84a 	bl	8001740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <main+0x2c>)
 80016ae:	f001 fa23 	bl	8002af8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 80016b2:	f7ff ff53 	bl	800155c <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	  Key_Read();
 80016b6:	f7ff fa9b 	bl	8000bf0 <Key_Read>
	  HAL_Delay(300);
 80016ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016be:	f000 fb07 	bl	8001cd0 <HAL_Delay>
	  Key_Read();
 80016c2:	e7f8      	b.n	80016b6 <main+0x1e>
 80016c4:	20000280 	.word	0x20000280

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	; 0x40
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fdcc 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f2:	2310      	movs	r3, #16
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fdc2 	bl	8002288 <HAL_RCC_OscConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800170a:	f000 f8eb 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170e:	230f      	movs	r3, #15
 8001710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f001 f82e 	bl	8002788 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001732:	f000 f8d7 	bl	80018e4 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_TIM2_Init+0x94>)
 800175e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001766:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM2_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001774:	2209      	movs	r2, #9
 8001776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_TIM2_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <MX_TIM2_Init+0x94>)
 8001786:	f001 f967 	bl	8002a58 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001790:	f000 f8a8 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <MX_TIM2_Init+0x94>)
 80017a2:	f001 fafd 	bl	8002da0 <HAL_TIM_ConfigClockSource>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 f89a 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM2_Init+0x94>)
 80017be:	f001 fcc5 	bl	800314c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f88c 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000280 	.word	0x20000280

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <MX_GPIO_Init+0xec>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <MX_GPIO_Init+0xec>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MX_GPIO_Init+0xec>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <MX_GPIO_Init+0xec>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <MX_GPIO_Init+0xec>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_GPIO_Init+0xec>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D0_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f240 510c 	movw	r1, #1292	; 0x50c
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <MX_GPIO_Init+0xf0>)
 8001824:	f000 fd17 	bl	8002256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R0_Pin|R1_Pin|D6_Pin|R2_Pin
 8001828:	2200      	movs	r2, #0
 800182a:	f641 713e 	movw	r1, #7998	; 0x1f3e
 800182e:	4827      	ldr	r0, [pc, #156]	; (80018cc <MX_GPIO_Init+0xf4>)
 8001830:	f000 fd11 	bl	8002256 <HAL_GPIO_WritePin>
                          |R3_Pin|D3_Pin|D5_Pin|D4_Pin
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|C2_Pin;
 8001834:	2313      	movs	r3, #19
 8001836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4619      	mov	r1, r3
 8001846:	4820      	ldr	r0, [pc, #128]	; (80018c8 <MX_GPIO_Init+0xf0>)
 8001848:	f000 fb74 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D0_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D0_Pin|D7_Pin|D2_Pin;
 800184c:	f240 530c 	movw	r3, #1292	; 0x50c
 8001850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2302      	movs	r3, #2
 800185c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4619      	mov	r1, r3
 8001864:	4818      	ldr	r0, [pc, #96]	; (80018c8 <MX_GPIO_Init+0xf0>)
 8001866:	f000 fb65 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001872:	2301      	movs	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4619      	mov	r1, r3
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_GPIO_Init+0xf4>)
 800187e:	f000 fb59 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin R1_Pin D6_Pin R2_Pin
                           R3_Pin D3_Pin RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = R0_Pin|R1_Pin|D6_Pin|R2_Pin
 8001882:	f641 730e 	movw	r3, #7950	; 0x1f0e
 8001886:	60bb      	str	r3, [r7, #8]
                          |R3_Pin|D3_Pin|RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2302      	movs	r3, #2
 8001892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_GPIO_Init+0xf4>)
 800189c:	f000 fb4a 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 80018a0:	2330      	movs	r3, #48	; 0x30
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a8:	2302      	movs	r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_GPIO_Init+0xf4>)
 80018b8:	f000 fb3c 	bl	8001f34 <HAL_GPIO_Init>

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00

080018d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	timerRun();
 80018d8:	f000 f80a 	bl	80018f0 <timerRun>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <timerRun>:
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <timerRun+0x2c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	dd0b      	ble.n	8001914 <timerRun+0x24>
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <timerRun+0x2c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <timerRun+0x2c>)
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <timerRun+0x2c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc02      	bgt.n	8001914 <timerRun+0x24>
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <timerRun+0x30>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	2000022c 	.word	0x2000022c
 8001920:	20000228 	.word	0x20000228

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_MspInit+0x5c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x5c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x5c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x5c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_MspInit+0x60>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_MspInit+0x60>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001998:	d113      	bne.n	80019c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_TIM_Base_MspInit+0x44>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_TIM_Base_MspInit+0x44>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0x44>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	201c      	movs	r0, #28
 80019b8:	f000 fa85 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019bc:	201c      	movs	r0, #28
 80019be:	f000 fa9e 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 f93f 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM2_IRQHandler+0x10>)
 8001a26:	f001 f8b3 	bl	8002b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000280 	.word	0x20000280

08001a34 <_getpid>:
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <_kill>:
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
 8001a4c:	f001 fbe8 	bl	8003220 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2216      	movs	r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_exit>:
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffe7 	bl	8001a42 <_kill>
 8001a74:	e7fe      	b.n	8001a74 <_exit+0x12>

08001a76 <_read>:
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e00a      	b.n	8001a9e <_read+0x28>
 8001a88:	f3af 8000 	nop.w
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	b2ca      	uxtb	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbf0      	blt.n	8001a88 <_read+0x12>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_write>:
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e009      	b.n	8001ad6 <_write+0x26>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	60ba      	str	r2, [r7, #8]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f3af 8000 	nop.w
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf1      	blt.n	8001ac2 <_write+0x12>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_close>:
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_fstat>:
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	2300      	movs	r3, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	2301      	movs	r3, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
 8001b78:	f001 fb52 	bl	8003220 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20002800 	.word	0x20002800
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000230 	.word	0x20000230
 8001bb0:	200002e0 	.word	0x200002e0

08001bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x12>)
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <LoopFillZerobss+0x1a>)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:
 8001bca:	58d4      	ldr	r4, [r2, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:
 8001bd0:	18c4      	adds	r4, r0, r3
 8001bd2:	428c      	cmp	r4, r1
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x1e>)
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <LoopFillZerobss+0x22>)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:
 8001be2:	42a2      	cmp	r2, r4
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>
 8001be6:	f7ff ffe5 	bl	8001bb4 <SystemInit>
 8001bea:	f001 fb1f 	bl	800322c <__libc_init_array>
 8001bee:	f7ff fd53 	bl	8001698 <main>
 8001bf2:	4770      	bx	lr
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	200001dc 	.word	0x200001dc
 8001bfc:	08006414 	.word	0x08006414
 8001c00:	200001e0 	.word	0x200001e0
 8001c04:	200002dc 	.word	0x200002dc

08001c08 <ADC1_2_IRQHandler>:
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f947 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fe7c 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f95f 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f927 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200002c8 	.word	0x200002c8

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	200002c8 	.word	0x200002c8

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <__NVIC_EnableIRQ+0x34>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff90 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff2d 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff42 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e148      	b.n	80021da <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8137 	bne.w	80021d4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4aa3      	ldr	r2, [pc, #652]	; (80021f8 <HAL_GPIO_Init+0x2c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f70:	4aa1      	ldr	r2, [pc, #644]	; (80021f8 <HAL_GPIO_Init+0x2c4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d875      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f76:	4aa1      	ldr	r2, [pc, #644]	; (80021fc <HAL_GPIO_Init+0x2c8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d058      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f7c:	4a9f      	ldr	r2, [pc, #636]	; (80021fc <HAL_GPIO_Init+0x2c8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d86f      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f82:	4a9f      	ldr	r2, [pc, #636]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d052      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f88:	4a9d      	ldr	r2, [pc, #628]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d869      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f8e:	4a9d      	ldr	r2, [pc, #628]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d04c      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f94:	4a9b      	ldr	r2, [pc, #620]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d863      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a9b      	ldr	r2, [pc, #620]	; (8002208 <HAL_GPIO_Init+0x2d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d046      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a99      	ldr	r2, [pc, #612]	; (8002208 <HAL_GPIO_Init+0x2d4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d85d      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d82a      	bhi.n	8002000 <HAL_GPIO_Init+0xcc>
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d859      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_GPIO_Init+0x80>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	0800202f 	.word	0x0800202f
 8001fb8:	08002009 	.word	0x08002009
 8001fbc:	0800201b 	.word	0x0800201b
 8001fc0:	0800205d 	.word	0x0800205d
 8001fc4:	08002063 	.word	0x08002063
 8001fc8:	08002063 	.word	0x08002063
 8001fcc:	08002063 	.word	0x08002063
 8001fd0:	08002063 	.word	0x08002063
 8001fd4:	08002063 	.word	0x08002063
 8001fd8:	08002063 	.word	0x08002063
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002063 	.word	0x08002063
 8001fe4:	08002063 	.word	0x08002063
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	08002063 	.word	0x08002063
 8001ff0:	08002063 	.word	0x08002063
 8001ff4:	08002063 	.word	0x08002063
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002025 	.word	0x08002025
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <HAL_GPIO_Init+0x2d8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002006:	e02c      	b.n	8002062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e029      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e024      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	3308      	adds	r3, #8
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e01f      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	330c      	adds	r3, #12
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e01a      	b.n	8002064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002036:	2304      	movs	r3, #4
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e013      	b.n	8002064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002044:	2308      	movs	r3, #8
 8002046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	611a      	str	r2, [r3, #16]
          break;
 800204e:	e009      	b.n	8002064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	615a      	str	r2, [r3, #20]
          break;
 800205a:	e003      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x130>
          break;
 8002062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d801      	bhi.n	800206e <HAL_GPIO_Init+0x13a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_Init+0x13e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d802      	bhi.n	8002080 <HAL_GPIO_Init+0x14c>
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x152>
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	3b08      	subs	r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	210f      	movs	r1, #15
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8090 	beq.w	80021d4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_GPIO_Init+0x2dc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <HAL_GPIO_Init+0x2dc>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_GPIO_Init+0x2dc>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1e0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x2e8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1dc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_GPIO_Init+0x2ec>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1d8>
 8002108:	2302      	movs	r3, #2
 800210a:	e004      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 800210c:	2303      	movs	r3, #3
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002114:	2300      	movs	r3, #0
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002126:	493b      	ldr	r1, [pc, #236]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	43db      	mvns	r3, r3
 8002156:	4933      	ldr	r1, [pc, #204]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002158:	4013      	ands	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	492d      	ldr	r1, [pc, #180]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4929      	ldr	r1, [pc, #164]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002180:	4013      	ands	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4923      	ldr	r1, [pc, #140]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	491f      	ldr	r1, [pc, #124]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4919      	ldr	r1, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4915      	ldr	r1, [pc, #84]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3301      	adds	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f aeaf 	bne.w	8001f48 <HAL_GPIO_Init+0x14>
  }
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	372c      	adds	r7, #44	; 0x2c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	10320000 	.word	0x10320000
 80021fc:	10310000 	.word	0x10310000
 8002200:	10220000 	.word	0x10220000
 8002204:	10210000 	.word	0x10210000
 8002208:	10120000 	.word	0x10120000
 800220c:	10110000 	.word	0x10110000
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	40010800 	.word	0x40010800
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40011000 	.word	0x40011000
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e001      	b.n	800224a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]
 8002262:	4613      	mov	r3, r2
 8002264:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002266:	787b      	ldrb	r3, [r7, #1]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226c:	887a      	ldrh	r2, [r7, #2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002272:	e003      	b.n	800227c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	041a      	lsls	r2, r3, #16
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	611a      	str	r2, [r3, #16]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
	...

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e26c      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00c      	beq.n	80022ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d112      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d10b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x12c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d168      	bne.n	80023b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e246      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x76>
 80022f0:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7f      	ldr	r2, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e02e      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0xbc>
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a71      	ldr	r2, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fcaa 	bl	8001cbc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff fca6 	bl	8001cbc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1fa      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xe4>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff fc96 	bl	8001cbc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fc92 	bl	8001cbc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1e6      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x10c>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1ba      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fc4b 	bl	8001cbc <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff fc47 	bl	8001cbc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e19b      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fc2a 	bl	8001cbc <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7ff fc26 	bl	8001cbc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03a      	beq.n	800250c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d019      	beq.n	80024d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7ff fc0a 	bl	8001cbc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc06 	bl	8001cbc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e15a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 faa6 	bl	8002a1c <RCC_Delay>
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7ff fbf0 	bl	8001cbc <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024de:	e00f      	b.n	8002500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fbec 	bl	8001cbc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d908      	bls.n	8002500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e140      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	42420000 	.word	0x42420000
 80024fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e9      	bne.n	80024e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a6 	beq.w	8002666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a93      	ldr	r2, [pc, #588]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8a      	ldr	r2, [pc, #552]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7ff fbad 	bl	8001cbc <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7ff fba9 	bl	8001cbc <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0fd      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a7a      	ldr	r2, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x356>
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a6c      	ldr	r2, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff fb5d 	bl	8001cbc <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7ff fb59 	bl	8001cbc <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0ab      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x37e>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7ff fb47 	bl	8001cbc <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff fb43 	bl	8001cbc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e095      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8081 	beq.w	8002772 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d061      	beq.n	8002740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d146      	bne.n	8002712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fb17 	bl	8001cbc <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff fb13 	bl	8001cbc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e067      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	492d      	ldr	r1, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a19      	ldr	r1, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	430b      	orrs	r3, r1
 80026de:	4927      	ldr	r1, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fae7 	bl	8001cbc <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff fae3 	bl	8001cbc <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e037      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46a>
 8002710:	e02f      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fad0 	bl	8001cbc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff facc 	bl	8001cbc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e020      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x498>
 800273e:	e018      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
 8002784:	42420060 	.word	0x42420060

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4965      	ldr	r1, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff fa20 	bl	8001cbc <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff fa1c 	bl	8001cbc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4922      	ldr	r1, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	490a      	ldr	r1, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1cc>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f97e 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	08006018 	.word	0x08006018
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b490      	push	{r4, r7}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002964:	1d3c      	adds	r4, r7, #4
 8002966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800296c:	f240 2301 	movw	r3, #513	; 0x201
 8002970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x40>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x46>
 800299a:	e02d      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299e:	623b      	str	r3, [r7, #32]
      break;
 80029a0:	e02d      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	0c9b      	lsrs	r3, r3, #18
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ae:	4413      	add	r3, r2
 80029b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c5b      	lsrs	r3, r3, #17
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ce:	4413      	add	r3, r2
 80029d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	fb02 f203 	mul.w	r2, r2, r3
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e004      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	623b      	str	r3, [r7, #32]
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	623b      	str	r3, [r7, #32]
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc90      	pop	{r4, r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	08005ff8 	.word	0x08005ff8
 8002a10:	40021000 	.word	0x40021000
 8002a14:	007a1200 	.word	0x007a1200
 8002a18:	003d0900 	.word	0x003d0900

08002a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <RCC_Delay+0x34>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <RCC_Delay+0x38>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a5b      	lsrs	r3, r3, #9
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a38:	bf00      	nop
  }
  while (Delay --);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	60fa      	str	r2, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f9      	bne.n	8002a38 <RCC_Delay+0x1c>
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	20000000 	.word	0x20000000
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e041      	b.n	8002aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe ff82 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 fa6a 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e035      	b.n	8002b7c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_TIM_Base_Start_IT+0x90>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_TIM_Base_Start_IT+0x4e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIM_Base_Start_IT+0x4e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_TIM_Base_Start_IT+0x94>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d111      	bne.n	8002b6a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d010      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	e007      	b.n	8002b7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400

08002b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0202 	mvn.w	r2, #2
 8002bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9b1 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9a4 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9b3 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0204 	mvn.w	r2, #4
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f987 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f97a 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f989 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f95d 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f950 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f95f 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d122      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d11b      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f933 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002cd4:	e005      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f926 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f935 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0201 	mvn.w	r2, #1
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fdde 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b80      	cmp	r3, #128	; 0x80
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa67 	bl	800320e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8f9 	bl	8002f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0220 	mvn.w	r2, #32
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa32 	bl	80031fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0b3      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x180>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd0>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	f000 8085 	beq.w	8002f0c <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xa2>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x116>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b50      	cmp	r3, #80	; 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xf6>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x136>
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e2c:	2b30      	cmp	r3, #48	; 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f000 f95c 	bl	800310e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04e      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f000 f945 	bl	800310e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 f8bc 	bl	8003020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	; 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f913 	bl	80030da <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 f8da 	bl	800307c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	; 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f903 	bl	80030da <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 f89c 	bl	8003020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f8f3 	bl	80030da <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 f8ea 	bl	80030da <TIM_ITRx_SetConfig>
        break;
 8002f06:	e002      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <TIM_Base_SetConfig+0xa8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <TIM_Base_SetConfig+0xac>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <TIM_Base_SetConfig+0xa8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x52>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x52>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <TIM_Base_SetConfig+0xac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <TIM_Base_SetConfig+0xa8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400

08003020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0201 	bic.w	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f023 030a 	bic.w	r3, r3, #10
 800305c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f023 0210 	bic.w	r2, r3, #16
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	031b      	lsls	r3, r3, #12
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f043 0307 	orr.w	r3, r3, #7
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800310e:	b480      	push	{r7}
 8003110:	b087      	sub	sp, #28
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003128:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	431a      	orrs	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4313      	orrs	r3, r2
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	609a      	str	r2, [r3, #8]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003160:	2302      	movs	r3, #2
 8003162:	e041      	b.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d004      	beq.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10c      	bne.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400

080031fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <__errno>:
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <__errno+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	2000000c 	.word	0x2000000c

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	2600      	movs	r6, #0
 8003230:	4d0c      	ldr	r5, [pc, #48]	; (8003264 <__libc_init_array+0x38>)
 8003232:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <__libc_init_array+0x3c>)
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	f002 feba 	bl	8005fb4 <_init>
 8003240:	2600      	movs	r6, #0
 8003242:	4d0a      	ldr	r5, [pc, #40]	; (800326c <__libc_init_array+0x40>)
 8003244:	4c0a      	ldr	r4, [pc, #40]	; (8003270 <__libc_init_array+0x44>)
 8003246:	1b64      	subs	r4, r4, r5
 8003248:	10a4      	asrs	r4, r4, #2
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f855 3b04 	ldr.w	r3, [r5], #4
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f855 3b04 	ldr.w	r3, [r5], #4
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	0800640c 	.word	0x0800640c
 8003268:	0800640c 	.word	0x0800640c
 800326c:	0800640c 	.word	0x0800640c
 8003270:	08006410 	.word	0x08006410

08003274 <memset>:
 8003274:	4603      	mov	r3, r0
 8003276:	4402      	add	r2, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__cvt>:
 8003284:	2b00      	cmp	r3, #0
 8003286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800328a:	461f      	mov	r7, r3
 800328c:	bfbb      	ittet	lt
 800328e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003292:	461f      	movlt	r7, r3
 8003294:	2300      	movge	r3, #0
 8003296:	232d      	movlt	r3, #45	; 0x2d
 8003298:	b088      	sub	sp, #32
 800329a:	4614      	mov	r4, r2
 800329c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800329e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80032a0:	7013      	strb	r3, [r2, #0]
 80032a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80032a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80032a8:	f023 0820 	bic.w	r8, r3, #32
 80032ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032b0:	d005      	beq.n	80032be <__cvt+0x3a>
 80032b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032b6:	d100      	bne.n	80032ba <__cvt+0x36>
 80032b8:	3501      	adds	r5, #1
 80032ba:	2302      	movs	r3, #2
 80032bc:	e000      	b.n	80032c0 <__cvt+0x3c>
 80032be:	2303      	movs	r3, #3
 80032c0:	aa07      	add	r2, sp, #28
 80032c2:	9204      	str	r2, [sp, #16]
 80032c4:	aa06      	add	r2, sp, #24
 80032c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032ca:	e9cd 3500 	strd	r3, r5, [sp]
 80032ce:	4622      	mov	r2, r4
 80032d0:	463b      	mov	r3, r7
 80032d2:	f000 fce5 	bl	8003ca0 <_dtoa_r>
 80032d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032da:	4606      	mov	r6, r0
 80032dc:	d102      	bne.n	80032e4 <__cvt+0x60>
 80032de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032e0:	07db      	lsls	r3, r3, #31
 80032e2:	d522      	bpl.n	800332a <__cvt+0xa6>
 80032e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032e8:	eb06 0905 	add.w	r9, r6, r5
 80032ec:	d110      	bne.n	8003310 <__cvt+0x8c>
 80032ee:	7833      	ldrb	r3, [r6, #0]
 80032f0:	2b30      	cmp	r3, #48	; 0x30
 80032f2:	d10a      	bne.n	800330a <__cvt+0x86>
 80032f4:	2200      	movs	r2, #0
 80032f6:	2300      	movs	r3, #0
 80032f8:	4620      	mov	r0, r4
 80032fa:	4639      	mov	r1, r7
 80032fc:	f7fd fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8003300:	b918      	cbnz	r0, 800330a <__cvt+0x86>
 8003302:	f1c5 0501 	rsb	r5, r5, #1
 8003306:	f8ca 5000 	str.w	r5, [sl]
 800330a:	f8da 3000 	ldr.w	r3, [sl]
 800330e:	4499      	add	r9, r3
 8003310:	2200      	movs	r2, #0
 8003312:	2300      	movs	r3, #0
 8003314:	4620      	mov	r0, r4
 8003316:	4639      	mov	r1, r7
 8003318:	f7fd fb46 	bl	80009a8 <__aeabi_dcmpeq>
 800331c:	b108      	cbz	r0, 8003322 <__cvt+0x9e>
 800331e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003322:	2230      	movs	r2, #48	; 0x30
 8003324:	9b07      	ldr	r3, [sp, #28]
 8003326:	454b      	cmp	r3, r9
 8003328:	d307      	bcc.n	800333a <__cvt+0xb6>
 800332a:	4630      	mov	r0, r6
 800332c:	9b07      	ldr	r3, [sp, #28]
 800332e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003330:	1b9b      	subs	r3, r3, r6
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	b008      	add	sp, #32
 8003336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	9107      	str	r1, [sp, #28]
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e7f0      	b.n	8003324 <__cvt+0xa0>

08003342 <__exponent>:
 8003342:	4603      	mov	r3, r0
 8003344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003346:	2900      	cmp	r1, #0
 8003348:	f803 2b02 	strb.w	r2, [r3], #2
 800334c:	bfb6      	itet	lt
 800334e:	222d      	movlt	r2, #45	; 0x2d
 8003350:	222b      	movge	r2, #43	; 0x2b
 8003352:	4249      	neglt	r1, r1
 8003354:	2909      	cmp	r1, #9
 8003356:	7042      	strb	r2, [r0, #1]
 8003358:	dd2b      	ble.n	80033b2 <__exponent+0x70>
 800335a:	f10d 0407 	add.w	r4, sp, #7
 800335e:	46a4      	mov	ip, r4
 8003360:	270a      	movs	r7, #10
 8003362:	fb91 f6f7 	sdiv	r6, r1, r7
 8003366:	460a      	mov	r2, r1
 8003368:	46a6      	mov	lr, r4
 800336a:	fb07 1516 	mls	r5, r7, r6, r1
 800336e:	2a63      	cmp	r2, #99	; 0x63
 8003370:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003374:	4631      	mov	r1, r6
 8003376:	f104 34ff 	add.w	r4, r4, #4294967295
 800337a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800337e:	dcf0      	bgt.n	8003362 <__exponent+0x20>
 8003380:	3130      	adds	r1, #48	; 0x30
 8003382:	f1ae 0502 	sub.w	r5, lr, #2
 8003386:	f804 1c01 	strb.w	r1, [r4, #-1]
 800338a:	4629      	mov	r1, r5
 800338c:	1c44      	adds	r4, r0, #1
 800338e:	4561      	cmp	r1, ip
 8003390:	d30a      	bcc.n	80033a8 <__exponent+0x66>
 8003392:	f10d 0209 	add.w	r2, sp, #9
 8003396:	eba2 020e 	sub.w	r2, r2, lr
 800339a:	4565      	cmp	r5, ip
 800339c:	bf88      	it	hi
 800339e:	2200      	movhi	r2, #0
 80033a0:	4413      	add	r3, r2
 80033a2:	1a18      	subs	r0, r3, r0
 80033a4:	b003      	add	sp, #12
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ac:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033b0:	e7ed      	b.n	800338e <__exponent+0x4c>
 80033b2:	2330      	movs	r3, #48	; 0x30
 80033b4:	3130      	adds	r1, #48	; 0x30
 80033b6:	7083      	strb	r3, [r0, #2]
 80033b8:	70c1      	strb	r1, [r0, #3]
 80033ba:	1d03      	adds	r3, r0, #4
 80033bc:	e7f1      	b.n	80033a2 <__exponent+0x60>
	...

080033c0 <_printf_float>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	b091      	sub	sp, #68	; 0x44
 80033c6:	460c      	mov	r4, r1
 80033c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80033cc:	4616      	mov	r6, r2
 80033ce:	461f      	mov	r7, r3
 80033d0:	4605      	mov	r5, r0
 80033d2:	f001 fa53 	bl	800487c <_localeconv_r>
 80033d6:	6803      	ldr	r3, [r0, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	9309      	str	r3, [sp, #36]	; 0x24
 80033dc:	f7fc feb8 	bl	8000150 <strlen>
 80033e0:	2300      	movs	r3, #0
 80033e2:	930e      	str	r3, [sp, #56]	; 0x38
 80033e4:	f8d8 3000 	ldr.w	r3, [r8]
 80033e8:	900a      	str	r0, [sp, #40]	; 0x28
 80033ea:	3307      	adds	r3, #7
 80033ec:	f023 0307 	bic.w	r3, r3, #7
 80033f0:	f103 0208 	add.w	r2, r3, #8
 80033f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033f8:	f8d4 b000 	ldr.w	fp, [r4]
 80033fc:	f8c8 2000 	str.w	r2, [r8]
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003408:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800340c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003410:	930b      	str	r3, [sp, #44]	; 0x2c
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	4640      	mov	r0, r8
 8003418:	4b9c      	ldr	r3, [pc, #624]	; (800368c <_printf_float+0x2cc>)
 800341a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800341c:	f7fd faf6 	bl	8000a0c <__aeabi_dcmpun>
 8003420:	bb70      	cbnz	r0, 8003480 <_printf_float+0xc0>
 8003422:	f04f 32ff 	mov.w	r2, #4294967295
 8003426:	4640      	mov	r0, r8
 8003428:	4b98      	ldr	r3, [pc, #608]	; (800368c <_printf_float+0x2cc>)
 800342a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800342c:	f7fd fad0 	bl	80009d0 <__aeabi_dcmple>
 8003430:	bb30      	cbnz	r0, 8003480 <_printf_float+0xc0>
 8003432:	2200      	movs	r2, #0
 8003434:	2300      	movs	r3, #0
 8003436:	4640      	mov	r0, r8
 8003438:	4651      	mov	r1, sl
 800343a:	f7fd fabf 	bl	80009bc <__aeabi_dcmplt>
 800343e:	b110      	cbz	r0, 8003446 <_printf_float+0x86>
 8003440:	232d      	movs	r3, #45	; 0x2d
 8003442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003446:	4b92      	ldr	r3, [pc, #584]	; (8003690 <_printf_float+0x2d0>)
 8003448:	4892      	ldr	r0, [pc, #584]	; (8003694 <_printf_float+0x2d4>)
 800344a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800344e:	bf94      	ite	ls
 8003450:	4698      	movls	r8, r3
 8003452:	4680      	movhi	r8, r0
 8003454:	2303      	movs	r3, #3
 8003456:	f04f 0a00 	mov.w	sl, #0
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	f02b 0304 	bic.w	r3, fp, #4
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	4633      	mov	r3, r6
 8003464:	4621      	mov	r1, r4
 8003466:	4628      	mov	r0, r5
 8003468:	9700      	str	r7, [sp, #0]
 800346a:	aa0f      	add	r2, sp, #60	; 0x3c
 800346c:	f000 f9d4 	bl	8003818 <_printf_common>
 8003470:	3001      	adds	r0, #1
 8003472:	f040 8090 	bne.w	8003596 <_printf_float+0x1d6>
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	b011      	add	sp, #68	; 0x44
 800347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003480:	4642      	mov	r2, r8
 8003482:	4653      	mov	r3, sl
 8003484:	4640      	mov	r0, r8
 8003486:	4651      	mov	r1, sl
 8003488:	f7fd fac0 	bl	8000a0c <__aeabi_dcmpun>
 800348c:	b148      	cbz	r0, 80034a2 <_printf_float+0xe2>
 800348e:	f1ba 0f00 	cmp.w	sl, #0
 8003492:	bfb8      	it	lt
 8003494:	232d      	movlt	r3, #45	; 0x2d
 8003496:	4880      	ldr	r0, [pc, #512]	; (8003698 <_printf_float+0x2d8>)
 8003498:	bfb8      	it	lt
 800349a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800349e:	4b7f      	ldr	r3, [pc, #508]	; (800369c <_printf_float+0x2dc>)
 80034a0:	e7d3      	b.n	800344a <_printf_float+0x8a>
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	d142      	bne.n	8003532 <_printf_float+0x172>
 80034ac:	2306      	movs	r3, #6
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	9206      	str	r2, [sp, #24]
 80034b4:	aa0e      	add	r2, sp, #56	; 0x38
 80034b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80034ba:	aa0d      	add	r2, sp, #52	; 0x34
 80034bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80034c0:	9203      	str	r2, [sp, #12]
 80034c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80034c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	4642      	mov	r2, r8
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	4628      	mov	r0, r5
 80034d4:	4653      	mov	r3, sl
 80034d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80034d8:	f7ff fed4 	bl	8003284 <__cvt>
 80034dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034de:	4680      	mov	r8, r0
 80034e0:	2947      	cmp	r1, #71	; 0x47
 80034e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034e4:	d108      	bne.n	80034f8 <_printf_float+0x138>
 80034e6:	1cc8      	adds	r0, r1, #3
 80034e8:	db02      	blt.n	80034f0 <_printf_float+0x130>
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	4299      	cmp	r1, r3
 80034ee:	dd40      	ble.n	8003572 <_printf_float+0x1b2>
 80034f0:	f1a9 0902 	sub.w	r9, r9, #2
 80034f4:	fa5f f989 	uxtb.w	r9, r9
 80034f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034fc:	d81f      	bhi.n	800353e <_printf_float+0x17e>
 80034fe:	464a      	mov	r2, r9
 8003500:	3901      	subs	r1, #1
 8003502:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003506:	910d      	str	r1, [sp, #52]	; 0x34
 8003508:	f7ff ff1b 	bl	8003342 <__exponent>
 800350c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800350e:	4682      	mov	sl, r0
 8003510:	1813      	adds	r3, r2, r0
 8003512:	2a01      	cmp	r2, #1
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	dc02      	bgt.n	800351e <_printf_float+0x15e>
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	07d2      	lsls	r2, r2, #31
 800351c:	d501      	bpl.n	8003522 <_printf_float+0x162>
 800351e:	3301      	adds	r3, #1
 8003520:	6123      	str	r3, [r4, #16]
 8003522:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003526:	2b00      	cmp	r3, #0
 8003528:	d09b      	beq.n	8003462 <_printf_float+0xa2>
 800352a:	232d      	movs	r3, #45	; 0x2d
 800352c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003530:	e797      	b.n	8003462 <_printf_float+0xa2>
 8003532:	2947      	cmp	r1, #71	; 0x47
 8003534:	d1bc      	bne.n	80034b0 <_printf_float+0xf0>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ba      	bne.n	80034b0 <_printf_float+0xf0>
 800353a:	2301      	movs	r3, #1
 800353c:	e7b7      	b.n	80034ae <_printf_float+0xee>
 800353e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003542:	d118      	bne.n	8003576 <_printf_float+0x1b6>
 8003544:	2900      	cmp	r1, #0
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	dd0b      	ble.n	8003562 <_printf_float+0x1a2>
 800354a:	6121      	str	r1, [r4, #16]
 800354c:	b913      	cbnz	r3, 8003554 <_printf_float+0x194>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	07d0      	lsls	r0, r2, #31
 8003552:	d502      	bpl.n	800355a <_printf_float+0x19a>
 8003554:	3301      	adds	r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	f04f 0a00 	mov.w	sl, #0
 800355e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003560:	e7df      	b.n	8003522 <_printf_float+0x162>
 8003562:	b913      	cbnz	r3, 800356a <_printf_float+0x1aa>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	07d2      	lsls	r2, r2, #31
 8003568:	d501      	bpl.n	800356e <_printf_float+0x1ae>
 800356a:	3302      	adds	r3, #2
 800356c:	e7f4      	b.n	8003558 <_printf_float+0x198>
 800356e:	2301      	movs	r3, #1
 8003570:	e7f2      	b.n	8003558 <_printf_float+0x198>
 8003572:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003578:	4299      	cmp	r1, r3
 800357a:	db05      	blt.n	8003588 <_printf_float+0x1c8>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	6121      	str	r1, [r4, #16]
 8003580:	07d8      	lsls	r0, r3, #31
 8003582:	d5ea      	bpl.n	800355a <_printf_float+0x19a>
 8003584:	1c4b      	adds	r3, r1, #1
 8003586:	e7e7      	b.n	8003558 <_printf_float+0x198>
 8003588:	2900      	cmp	r1, #0
 800358a:	bfcc      	ite	gt
 800358c:	2201      	movgt	r2, #1
 800358e:	f1c1 0202 	rsble	r2, r1, #2
 8003592:	4413      	add	r3, r2
 8003594:	e7e0      	b.n	8003558 <_printf_float+0x198>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	055a      	lsls	r2, r3, #21
 800359a:	d407      	bmi.n	80035ac <_printf_float+0x1ec>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	4642      	mov	r2, r8
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	d12b      	bne.n	8003602 <_printf_float+0x242>
 80035aa:	e764      	b.n	8003476 <_printf_float+0xb6>
 80035ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035b0:	f240 80dd 	bls.w	800376e <_printf_float+0x3ae>
 80035b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f7fd f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d033      	beq.n	800362c <_printf_float+0x26c>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	4a35      	ldr	r2, [pc, #212]	; (80036a0 <_printf_float+0x2e0>)
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f af51 	beq.w	8003476 <_printf_float+0xb6>
 80035d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035d8:	429a      	cmp	r2, r3
 80035da:	db02      	blt.n	80035e2 <_printf_float+0x222>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	07d8      	lsls	r0, r3, #31
 80035e0:	d50f      	bpl.n	8003602 <_printf_float+0x242>
 80035e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	f43f af42 	beq.w	8003476 <_printf_float+0xb6>
 80035f2:	f04f 0800 	mov.w	r8, #0
 80035f6:	f104 091a 	add.w	r9, r4, #26
 80035fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035fc:	3b01      	subs	r3, #1
 80035fe:	4543      	cmp	r3, r8
 8003600:	dc09      	bgt.n	8003616 <_printf_float+0x256>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	079b      	lsls	r3, r3, #30
 8003606:	f100 8102 	bmi.w	800380e <_printf_float+0x44e>
 800360a:	68e0      	ldr	r0, [r4, #12]
 800360c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800360e:	4298      	cmp	r0, r3
 8003610:	bfb8      	it	lt
 8003612:	4618      	movlt	r0, r3
 8003614:	e731      	b.n	800347a <_printf_float+0xba>
 8003616:	2301      	movs	r3, #1
 8003618:	464a      	mov	r2, r9
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	f43f af28 	beq.w	8003476 <_printf_float+0xb6>
 8003626:	f108 0801 	add.w	r8, r8, #1
 800362a:	e7e6      	b.n	80035fa <_printf_float+0x23a>
 800362c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800362e:	2b00      	cmp	r3, #0
 8003630:	dc38      	bgt.n	80036a4 <_printf_float+0x2e4>
 8003632:	2301      	movs	r3, #1
 8003634:	4631      	mov	r1, r6
 8003636:	4628      	mov	r0, r5
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <_printf_float+0x2e0>)
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	f43f af1a 	beq.w	8003476 <_printf_float+0xb6>
 8003642:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003646:	4313      	orrs	r3, r2
 8003648:	d102      	bne.n	8003650 <_printf_float+0x290>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07d9      	lsls	r1, r3, #31
 800364e:	d5d8      	bpl.n	8003602 <_printf_float+0x242>
 8003650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	f43f af0b 	beq.w	8003476 <_printf_float+0xb6>
 8003660:	f04f 0900 	mov.w	r9, #0
 8003664:	f104 0a1a 	add.w	sl, r4, #26
 8003668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800366a:	425b      	negs	r3, r3
 800366c:	454b      	cmp	r3, r9
 800366e:	dc01      	bgt.n	8003674 <_printf_float+0x2b4>
 8003670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003672:	e794      	b.n	800359e <_printf_float+0x1de>
 8003674:	2301      	movs	r3, #1
 8003676:	4652      	mov	r2, sl
 8003678:	4631      	mov	r1, r6
 800367a:	4628      	mov	r0, r5
 800367c:	47b8      	blx	r7
 800367e:	3001      	adds	r0, #1
 8003680:	f43f aef9 	beq.w	8003476 <_printf_float+0xb6>
 8003684:	f109 0901 	add.w	r9, r9, #1
 8003688:	e7ee      	b.n	8003668 <_printf_float+0x2a8>
 800368a:	bf00      	nop
 800368c:	7fefffff 	.word	0x7fefffff
 8003690:	0800602c 	.word	0x0800602c
 8003694:	08006030 	.word	0x08006030
 8003698:	08006038 	.word	0x08006038
 800369c:	08006034 	.word	0x08006034
 80036a0:	0800603c 	.word	0x0800603c
 80036a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036a8:	429a      	cmp	r2, r3
 80036aa:	bfa8      	it	ge
 80036ac:	461a      	movge	r2, r3
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	4691      	mov	r9, r2
 80036b2:	dc37      	bgt.n	8003724 <_printf_float+0x364>
 80036b4:	f04f 0b00 	mov.w	fp, #0
 80036b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036bc:	f104 021a 	add.w	r2, r4, #26
 80036c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80036c4:	ebaa 0309 	sub.w	r3, sl, r9
 80036c8:	455b      	cmp	r3, fp
 80036ca:	dc33      	bgt.n	8003734 <_printf_float+0x374>
 80036cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036d0:	429a      	cmp	r2, r3
 80036d2:	db3b      	blt.n	800374c <_printf_float+0x38c>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	07da      	lsls	r2, r3, #31
 80036d8:	d438      	bmi.n	800374c <_printf_float+0x38c>
 80036da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036de:	eba2 030a 	sub.w	r3, r2, sl
 80036e2:	eba2 0901 	sub.w	r9, r2, r1
 80036e6:	4599      	cmp	r9, r3
 80036e8:	bfa8      	it	ge
 80036ea:	4699      	movge	r9, r3
 80036ec:	f1b9 0f00 	cmp.w	r9, #0
 80036f0:	dc34      	bgt.n	800375c <_printf_float+0x39c>
 80036f2:	f04f 0800 	mov.w	r8, #0
 80036f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fa:	f104 0a1a 	add.w	sl, r4, #26
 80036fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	eba3 0309 	sub.w	r3, r3, r9
 8003708:	4543      	cmp	r3, r8
 800370a:	f77f af7a 	ble.w	8003602 <_printf_float+0x242>
 800370e:	2301      	movs	r3, #1
 8003710:	4652      	mov	r2, sl
 8003712:	4631      	mov	r1, r6
 8003714:	4628      	mov	r0, r5
 8003716:	47b8      	blx	r7
 8003718:	3001      	adds	r0, #1
 800371a:	f43f aeac 	beq.w	8003476 <_printf_float+0xb6>
 800371e:	f108 0801 	add.w	r8, r8, #1
 8003722:	e7ec      	b.n	80036fe <_printf_float+0x33e>
 8003724:	4613      	mov	r3, r2
 8003726:	4631      	mov	r1, r6
 8003728:	4642      	mov	r2, r8
 800372a:	4628      	mov	r0, r5
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	d1c0      	bne.n	80036b4 <_printf_float+0x2f4>
 8003732:	e6a0      	b.n	8003476 <_printf_float+0xb6>
 8003734:	2301      	movs	r3, #1
 8003736:	4631      	mov	r1, r6
 8003738:	4628      	mov	r0, r5
 800373a:	920b      	str	r2, [sp, #44]	; 0x2c
 800373c:	47b8      	blx	r7
 800373e:	3001      	adds	r0, #1
 8003740:	f43f ae99 	beq.w	8003476 <_printf_float+0xb6>
 8003744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003746:	f10b 0b01 	add.w	fp, fp, #1
 800374a:	e7b9      	b.n	80036c0 <_printf_float+0x300>
 800374c:	4631      	mov	r1, r6
 800374e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003752:	4628      	mov	r0, r5
 8003754:	47b8      	blx	r7
 8003756:	3001      	adds	r0, #1
 8003758:	d1bf      	bne.n	80036da <_printf_float+0x31a>
 800375a:	e68c      	b.n	8003476 <_printf_float+0xb6>
 800375c:	464b      	mov	r3, r9
 800375e:	4631      	mov	r1, r6
 8003760:	4628      	mov	r0, r5
 8003762:	eb08 020a 	add.w	r2, r8, sl
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	d1c2      	bne.n	80036f2 <_printf_float+0x332>
 800376c:	e683      	b.n	8003476 <_printf_float+0xb6>
 800376e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003770:	2a01      	cmp	r2, #1
 8003772:	dc01      	bgt.n	8003778 <_printf_float+0x3b8>
 8003774:	07db      	lsls	r3, r3, #31
 8003776:	d537      	bpl.n	80037e8 <_printf_float+0x428>
 8003778:	2301      	movs	r3, #1
 800377a:	4642      	mov	r2, r8
 800377c:	4631      	mov	r1, r6
 800377e:	4628      	mov	r0, r5
 8003780:	47b8      	blx	r7
 8003782:	3001      	adds	r0, #1
 8003784:	f43f ae77 	beq.w	8003476 <_printf_float+0xb6>
 8003788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	f43f ae6f 	beq.w	8003476 <_printf_float+0xb6>
 8003798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800379c:	2200      	movs	r2, #0
 800379e:	2300      	movs	r3, #0
 80037a0:	f7fd f902 	bl	80009a8 <__aeabi_dcmpeq>
 80037a4:	b9d8      	cbnz	r0, 80037de <_printf_float+0x41e>
 80037a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a8:	f108 0201 	add.w	r2, r8, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	d10e      	bne.n	80037d6 <_printf_float+0x416>
 80037b8:	e65d      	b.n	8003476 <_printf_float+0xb6>
 80037ba:	2301      	movs	r3, #1
 80037bc:	464a      	mov	r2, r9
 80037be:	4631      	mov	r1, r6
 80037c0:	4628      	mov	r0, r5
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	f43f ae56 	beq.w	8003476 <_printf_float+0xb6>
 80037ca:	f108 0801 	add.w	r8, r8, #1
 80037ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4543      	cmp	r3, r8
 80037d4:	dcf1      	bgt.n	80037ba <_printf_float+0x3fa>
 80037d6:	4653      	mov	r3, sl
 80037d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037dc:	e6e0      	b.n	80035a0 <_printf_float+0x1e0>
 80037de:	f04f 0800 	mov.w	r8, #0
 80037e2:	f104 091a 	add.w	r9, r4, #26
 80037e6:	e7f2      	b.n	80037ce <_printf_float+0x40e>
 80037e8:	2301      	movs	r3, #1
 80037ea:	4642      	mov	r2, r8
 80037ec:	e7df      	b.n	80037ae <_printf_float+0x3ee>
 80037ee:	2301      	movs	r3, #1
 80037f0:	464a      	mov	r2, r9
 80037f2:	4631      	mov	r1, r6
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b8      	blx	r7
 80037f8:	3001      	adds	r0, #1
 80037fa:	f43f ae3c 	beq.w	8003476 <_printf_float+0xb6>
 80037fe:	f108 0801 	add.w	r8, r8, #1
 8003802:	68e3      	ldr	r3, [r4, #12]
 8003804:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003806:	1a5b      	subs	r3, r3, r1
 8003808:	4543      	cmp	r3, r8
 800380a:	dcf0      	bgt.n	80037ee <_printf_float+0x42e>
 800380c:	e6fd      	b.n	800360a <_printf_float+0x24a>
 800380e:	f04f 0800 	mov.w	r8, #0
 8003812:	f104 0919 	add.w	r9, r4, #25
 8003816:	e7f4      	b.n	8003802 <_printf_float+0x442>

08003818 <_printf_common>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	4616      	mov	r6, r2
 800381e:	4699      	mov	r9, r3
 8003820:	688a      	ldr	r2, [r1, #8]
 8003822:	690b      	ldr	r3, [r1, #16]
 8003824:	4607      	mov	r7, r0
 8003826:	4293      	cmp	r3, r2
 8003828:	bfb8      	it	lt
 800382a:	4613      	movlt	r3, r2
 800382c:	6033      	str	r3, [r6, #0]
 800382e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003832:	460c      	mov	r4, r1
 8003834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003838:	b10a      	cbz	r2, 800383e <_printf_common+0x26>
 800383a:	3301      	adds	r3, #1
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	0699      	lsls	r1, r3, #26
 8003842:	bf42      	ittt	mi
 8003844:	6833      	ldrmi	r3, [r6, #0]
 8003846:	3302      	addmi	r3, #2
 8003848:	6033      	strmi	r3, [r6, #0]
 800384a:	6825      	ldr	r5, [r4, #0]
 800384c:	f015 0506 	ands.w	r5, r5, #6
 8003850:	d106      	bne.n	8003860 <_printf_common+0x48>
 8003852:	f104 0a19 	add.w	sl, r4, #25
 8003856:	68e3      	ldr	r3, [r4, #12]
 8003858:	6832      	ldr	r2, [r6, #0]
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	42ab      	cmp	r3, r5
 800385e:	dc28      	bgt.n	80038b2 <_printf_common+0x9a>
 8003860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003864:	1e13      	subs	r3, r2, #0
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	bf18      	it	ne
 800386a:	2301      	movne	r3, #1
 800386c:	0692      	lsls	r2, r2, #26
 800386e:	d42d      	bmi.n	80038cc <_printf_common+0xb4>
 8003870:	4649      	mov	r1, r9
 8003872:	4638      	mov	r0, r7
 8003874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003878:	47c0      	blx	r8
 800387a:	3001      	adds	r0, #1
 800387c:	d020      	beq.n	80038c0 <_printf_common+0xa8>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	68e5      	ldr	r5, [r4, #12]
 8003882:	f003 0306 	and.w	r3, r3, #6
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf18      	it	ne
 800388a:	2500      	movne	r5, #0
 800388c:	6832      	ldr	r2, [r6, #0]
 800388e:	f04f 0600 	mov.w	r6, #0
 8003892:	68a3      	ldr	r3, [r4, #8]
 8003894:	bf08      	it	eq
 8003896:	1aad      	subeq	r5, r5, r2
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	bf08      	it	eq
 800389c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bfc4      	itt	gt
 80038a4:	1a9b      	subgt	r3, r3, r2
 80038a6:	18ed      	addgt	r5, r5, r3
 80038a8:	341a      	adds	r4, #26
 80038aa:	42b5      	cmp	r5, r6
 80038ac:	d11a      	bne.n	80038e4 <_printf_common+0xcc>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e008      	b.n	80038c4 <_printf_common+0xac>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4652      	mov	r2, sl
 80038b6:	4649      	mov	r1, r9
 80038b8:	4638      	mov	r0, r7
 80038ba:	47c0      	blx	r8
 80038bc:	3001      	adds	r0, #1
 80038be:	d103      	bne.n	80038c8 <_printf_common+0xb0>
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7c4      	b.n	8003856 <_printf_common+0x3e>
 80038cc:	2030      	movs	r0, #48	; 0x30
 80038ce:	18e1      	adds	r1, r4, r3
 80038d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038da:	4422      	add	r2, r4
 80038dc:	3302      	adds	r3, #2
 80038de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038e2:	e7c5      	b.n	8003870 <_printf_common+0x58>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4622      	mov	r2, r4
 80038e8:	4649      	mov	r1, r9
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c0      	blx	r8
 80038ee:	3001      	adds	r0, #1
 80038f0:	d0e6      	beq.n	80038c0 <_printf_common+0xa8>
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7d9      	b.n	80038aa <_printf_common+0x92>
	...

080038f8 <_printf_i>:
 80038f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	460c      	mov	r4, r1
 80038fe:	7e27      	ldrb	r7, [r4, #24]
 8003900:	4691      	mov	r9, r2
 8003902:	2f78      	cmp	r7, #120	; 0x78
 8003904:	4680      	mov	r8, r0
 8003906:	469a      	mov	sl, r3
 8003908:	990c      	ldr	r1, [sp, #48]	; 0x30
 800390a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800390e:	d807      	bhi.n	8003920 <_printf_i+0x28>
 8003910:	2f62      	cmp	r7, #98	; 0x62
 8003912:	d80a      	bhi.n	800392a <_printf_i+0x32>
 8003914:	2f00      	cmp	r7, #0
 8003916:	f000 80d9 	beq.w	8003acc <_printf_i+0x1d4>
 800391a:	2f58      	cmp	r7, #88	; 0x58
 800391c:	f000 80a4 	beq.w	8003a68 <_printf_i+0x170>
 8003920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003928:	e03a      	b.n	80039a0 <_printf_i+0xa8>
 800392a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800392e:	2b15      	cmp	r3, #21
 8003930:	d8f6      	bhi.n	8003920 <_printf_i+0x28>
 8003932:	a001      	add	r0, pc, #4	; (adr r0, 8003938 <_printf_i+0x40>)
 8003934:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003938:	08003991 	.word	0x08003991
 800393c:	080039a5 	.word	0x080039a5
 8003940:	08003921 	.word	0x08003921
 8003944:	08003921 	.word	0x08003921
 8003948:	08003921 	.word	0x08003921
 800394c:	08003921 	.word	0x08003921
 8003950:	080039a5 	.word	0x080039a5
 8003954:	08003921 	.word	0x08003921
 8003958:	08003921 	.word	0x08003921
 800395c:	08003921 	.word	0x08003921
 8003960:	08003921 	.word	0x08003921
 8003964:	08003ab3 	.word	0x08003ab3
 8003968:	080039d5 	.word	0x080039d5
 800396c:	08003a95 	.word	0x08003a95
 8003970:	08003921 	.word	0x08003921
 8003974:	08003921 	.word	0x08003921
 8003978:	08003ad5 	.word	0x08003ad5
 800397c:	08003921 	.word	0x08003921
 8003980:	080039d5 	.word	0x080039d5
 8003984:	08003921 	.word	0x08003921
 8003988:	08003921 	.word	0x08003921
 800398c:	08003a9d 	.word	0x08003a9d
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	600a      	str	r2, [r1, #0]
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0a4      	b.n	8003aee <_printf_i+0x1f6>
 80039a4:	6825      	ldr	r5, [r4, #0]
 80039a6:	6808      	ldr	r0, [r1, #0]
 80039a8:	062e      	lsls	r6, r5, #24
 80039aa:	f100 0304 	add.w	r3, r0, #4
 80039ae:	d50a      	bpl.n	80039c6 <_printf_i+0xce>
 80039b0:	6805      	ldr	r5, [r0, #0]
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	2d00      	cmp	r5, #0
 80039b6:	da03      	bge.n	80039c0 <_printf_i+0xc8>
 80039b8:	232d      	movs	r3, #45	; 0x2d
 80039ba:	426d      	negs	r5, r5
 80039bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c0:	230a      	movs	r3, #10
 80039c2:	485e      	ldr	r0, [pc, #376]	; (8003b3c <_printf_i+0x244>)
 80039c4:	e019      	b.n	80039fa <_printf_i+0x102>
 80039c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039ca:	6805      	ldr	r5, [r0, #0]
 80039cc:	600b      	str	r3, [r1, #0]
 80039ce:	bf18      	it	ne
 80039d0:	b22d      	sxthne	r5, r5
 80039d2:	e7ef      	b.n	80039b4 <_printf_i+0xbc>
 80039d4:	680b      	ldr	r3, [r1, #0]
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	1d18      	adds	r0, r3, #4
 80039da:	6008      	str	r0, [r1, #0]
 80039dc:	0628      	lsls	r0, r5, #24
 80039de:	d501      	bpl.n	80039e4 <_printf_i+0xec>
 80039e0:	681d      	ldr	r5, [r3, #0]
 80039e2:	e002      	b.n	80039ea <_printf_i+0xf2>
 80039e4:	0669      	lsls	r1, r5, #25
 80039e6:	d5fb      	bpl.n	80039e0 <_printf_i+0xe8>
 80039e8:	881d      	ldrh	r5, [r3, #0]
 80039ea:	2f6f      	cmp	r7, #111	; 0x6f
 80039ec:	bf0c      	ite	eq
 80039ee:	2308      	moveq	r3, #8
 80039f0:	230a      	movne	r3, #10
 80039f2:	4852      	ldr	r0, [pc, #328]	; (8003b3c <_printf_i+0x244>)
 80039f4:	2100      	movs	r1, #0
 80039f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039fa:	6866      	ldr	r6, [r4, #4]
 80039fc:	2e00      	cmp	r6, #0
 80039fe:	bfa8      	it	ge
 8003a00:	6821      	ldrge	r1, [r4, #0]
 8003a02:	60a6      	str	r6, [r4, #8]
 8003a04:	bfa4      	itt	ge
 8003a06:	f021 0104 	bicge.w	r1, r1, #4
 8003a0a:	6021      	strge	r1, [r4, #0]
 8003a0c:	b90d      	cbnz	r5, 8003a12 <_printf_i+0x11a>
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d04d      	beq.n	8003aae <_printf_i+0x1b6>
 8003a12:	4616      	mov	r6, r2
 8003a14:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a18:	fb03 5711 	mls	r7, r3, r1, r5
 8003a1c:	5dc7      	ldrb	r7, [r0, r7]
 8003a1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a22:	462f      	mov	r7, r5
 8003a24:	42bb      	cmp	r3, r7
 8003a26:	460d      	mov	r5, r1
 8003a28:	d9f4      	bls.n	8003a14 <_printf_i+0x11c>
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d10b      	bne.n	8003a46 <_printf_i+0x14e>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	07df      	lsls	r7, r3, #31
 8003a32:	d508      	bpl.n	8003a46 <_printf_i+0x14e>
 8003a34:	6923      	ldr	r3, [r4, #16]
 8003a36:	6861      	ldr	r1, [r4, #4]
 8003a38:	4299      	cmp	r1, r3
 8003a3a:	bfde      	ittt	le
 8003a3c:	2330      	movle	r3, #48	; 0x30
 8003a3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a46:	1b92      	subs	r2, r2, r6
 8003a48:	6122      	str	r2, [r4, #16]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4640      	mov	r0, r8
 8003a50:	f8cd a000 	str.w	sl, [sp]
 8003a54:	aa03      	add	r2, sp, #12
 8003a56:	f7ff fedf 	bl	8003818 <_printf_common>
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d14c      	bne.n	8003af8 <_printf_i+0x200>
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	b004      	add	sp, #16
 8003a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a68:	4834      	ldr	r0, [pc, #208]	; (8003b3c <_printf_i+0x244>)
 8003a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a6e:	680e      	ldr	r6, [r1, #0]
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a76:	061f      	lsls	r7, r3, #24
 8003a78:	600e      	str	r6, [r1, #0]
 8003a7a:	d514      	bpl.n	8003aa6 <_printf_i+0x1ae>
 8003a7c:	07d9      	lsls	r1, r3, #31
 8003a7e:	bf44      	itt	mi
 8003a80:	f043 0320 	orrmi.w	r3, r3, #32
 8003a84:	6023      	strmi	r3, [r4, #0]
 8003a86:	b91d      	cbnz	r5, 8003a90 <_printf_i+0x198>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	2310      	movs	r3, #16
 8003a92:	e7af      	b.n	80039f4 <_printf_i+0xfc>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	f043 0320 	orr.w	r3, r3, #32
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	2378      	movs	r3, #120	; 0x78
 8003a9e:	4828      	ldr	r0, [pc, #160]	; (8003b40 <_printf_i+0x248>)
 8003aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa4:	e7e3      	b.n	8003a6e <_printf_i+0x176>
 8003aa6:	065e      	lsls	r6, r3, #25
 8003aa8:	bf48      	it	mi
 8003aaa:	b2ad      	uxthmi	r5, r5
 8003aac:	e7e6      	b.n	8003a7c <_printf_i+0x184>
 8003aae:	4616      	mov	r6, r2
 8003ab0:	e7bb      	b.n	8003a2a <_printf_i+0x132>
 8003ab2:	680b      	ldr	r3, [r1, #0]
 8003ab4:	6826      	ldr	r6, [r4, #0]
 8003ab6:	1d1d      	adds	r5, r3, #4
 8003ab8:	6960      	ldr	r0, [r4, #20]
 8003aba:	600d      	str	r5, [r1, #0]
 8003abc:	0635      	lsls	r5, r6, #24
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	d501      	bpl.n	8003ac6 <_printf_i+0x1ce>
 8003ac2:	6018      	str	r0, [r3, #0]
 8003ac4:	e002      	b.n	8003acc <_printf_i+0x1d4>
 8003ac6:	0671      	lsls	r1, r6, #25
 8003ac8:	d5fb      	bpl.n	8003ac2 <_printf_i+0x1ca>
 8003aca:	8018      	strh	r0, [r3, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	4616      	mov	r6, r2
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	e7ba      	b.n	8003a4a <_printf_i+0x152>
 8003ad4:	680b      	ldr	r3, [r1, #0]
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	600a      	str	r2, [r1, #0]
 8003ada:	681e      	ldr	r6, [r3, #0]
 8003adc:	2100      	movs	r1, #0
 8003ade:	4630      	mov	r0, r6
 8003ae0:	6862      	ldr	r2, [r4, #4]
 8003ae2:	f000 fed7 	bl	8004894 <memchr>
 8003ae6:	b108      	cbz	r0, 8003aec <_printf_i+0x1f4>
 8003ae8:	1b80      	subs	r0, r0, r6
 8003aea:	6060      	str	r0, [r4, #4]
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	2300      	movs	r3, #0
 8003af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af6:	e7a8      	b.n	8003a4a <_printf_i+0x152>
 8003af8:	4632      	mov	r2, r6
 8003afa:	4649      	mov	r1, r9
 8003afc:	4640      	mov	r0, r8
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	47d0      	blx	sl
 8003b02:	3001      	adds	r0, #1
 8003b04:	d0ab      	beq.n	8003a5e <_printf_i+0x166>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	079b      	lsls	r3, r3, #30
 8003b0a:	d413      	bmi.n	8003b34 <_printf_i+0x23c>
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	4298      	cmp	r0, r3
 8003b12:	bfb8      	it	lt
 8003b14:	4618      	movlt	r0, r3
 8003b16:	e7a4      	b.n	8003a62 <_printf_i+0x16a>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4640      	mov	r0, r8
 8003b20:	47d0      	blx	sl
 8003b22:	3001      	adds	r0, #1
 8003b24:	d09b      	beq.n	8003a5e <_printf_i+0x166>
 8003b26:	3501      	adds	r5, #1
 8003b28:	68e3      	ldr	r3, [r4, #12]
 8003b2a:	9903      	ldr	r1, [sp, #12]
 8003b2c:	1a5b      	subs	r3, r3, r1
 8003b2e:	42ab      	cmp	r3, r5
 8003b30:	dcf2      	bgt.n	8003b18 <_printf_i+0x220>
 8003b32:	e7eb      	b.n	8003b0c <_printf_i+0x214>
 8003b34:	2500      	movs	r5, #0
 8003b36:	f104 0619 	add.w	r6, r4, #25
 8003b3a:	e7f5      	b.n	8003b28 <_printf_i+0x230>
 8003b3c:	0800603e 	.word	0x0800603e
 8003b40:	0800604f 	.word	0x0800604f

08003b44 <siprintf>:
 8003b44:	b40e      	push	{r1, r2, r3}
 8003b46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b4a:	b500      	push	{lr}
 8003b4c:	b09c      	sub	sp, #112	; 0x70
 8003b4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b50:	9002      	str	r0, [sp, #8]
 8003b52:	9006      	str	r0, [sp, #24]
 8003b54:	9107      	str	r1, [sp, #28]
 8003b56:	9104      	str	r1, [sp, #16]
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <siprintf+0x38>)
 8003b5a:	4909      	ldr	r1, [pc, #36]	; (8003b80 <siprintf+0x3c>)
 8003b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b60:	9105      	str	r1, [sp, #20]
 8003b62:	6800      	ldr	r0, [r0, #0]
 8003b64:	a902      	add	r1, sp, #8
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	f001 fb42 	bl	80051f0 <_svfiprintf_r>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	9b02      	ldr	r3, [sp, #8]
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	b01c      	add	sp, #112	; 0x70
 8003b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b78:	b003      	add	sp, #12
 8003b7a:	4770      	bx	lr
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	ffff0208 	.word	0xffff0208

08003b84 <quorem>:
 8003b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	6903      	ldr	r3, [r0, #16]
 8003b8a:	690c      	ldr	r4, [r1, #16]
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	f2c0 8083 	blt.w	8003c9a <quorem+0x116>
 8003b94:	3c01      	subs	r4, #1
 8003b96:	f100 0514 	add.w	r5, r0, #20
 8003b9a:	f101 0814 	add.w	r8, r1, #20
 8003b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bac:	3301      	adds	r3, #1
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bbc:	d332      	bcc.n	8003c24 <quorem+0xa0>
 8003bbe:	f04f 0e00 	mov.w	lr, #0
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	46ac      	mov	ip, r5
 8003bc6:	46f2      	mov	sl, lr
 8003bc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bcc:	b293      	uxth	r3, r2
 8003bce:	fb06 e303 	mla	r3, r6, r3, lr
 8003bd2:	0c12      	lsrs	r2, r2, #16
 8003bd4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bd8:	fb06 e202 	mla	r2, r6, r2, lr
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	ebaa 0303 	sub.w	r3, sl, r3
 8003be2:	f8dc a000 	ldr.w	sl, [ip]
 8003be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bea:	fa1f fa8a 	uxth.w	sl, sl
 8003bee:	4453      	add	r3, sl
 8003bf0:	fa1f fa82 	uxth.w	sl, r2
 8003bf4:	f8dc 2000 	ldr.w	r2, [ip]
 8003bf8:	4581      	cmp	r9, r0
 8003bfa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003bfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c08:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c0c:	f84c 3b04 	str.w	r3, [ip], #4
 8003c10:	d2da      	bcs.n	8003bc8 <quorem+0x44>
 8003c12:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c16:	b92b      	cbnz	r3, 8003c24 <quorem+0xa0>
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	3b04      	subs	r3, #4
 8003c1c:	429d      	cmp	r5, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	d32f      	bcc.n	8003c82 <quorem+0xfe>
 8003c22:	613c      	str	r4, [r7, #16]
 8003c24:	4638      	mov	r0, r7
 8003c26:	f001 f8cb 	bl	8004dc0 <__mcmp>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	db25      	blt.n	8003c7a <quorem+0xf6>
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f04f 0c00 	mov.w	ip, #0
 8003c34:	3601      	adds	r6, #1
 8003c36:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c3a:	f8d0 e000 	ldr.w	lr, [r0]
 8003c3e:	b28b      	uxth	r3, r1
 8003c40:	ebac 0303 	sub.w	r3, ip, r3
 8003c44:	fa1f f28e 	uxth.w	r2, lr
 8003c48:	4413      	add	r3, r2
 8003c4a:	0c0a      	lsrs	r2, r1, #16
 8003c4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c5a:	45c1      	cmp	r9, r8
 8003c5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c60:	f840 3b04 	str.w	r3, [r0], #4
 8003c64:	d2e7      	bcs.n	8003c36 <quorem+0xb2>
 8003c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c6e:	b922      	cbnz	r2, 8003c7a <quorem+0xf6>
 8003c70:	3b04      	subs	r3, #4
 8003c72:	429d      	cmp	r5, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	d30a      	bcc.n	8003c8e <quorem+0x10a>
 8003c78:	613c      	str	r4, [r7, #16]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	b003      	add	sp, #12
 8003c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	3b04      	subs	r3, #4
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d1cb      	bne.n	8003c22 <quorem+0x9e>
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	e7c6      	b.n	8003c1c <quorem+0x98>
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	3b04      	subs	r3, #4
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d1f0      	bne.n	8003c78 <quorem+0xf4>
 8003c96:	3c01      	subs	r4, #1
 8003c98:	e7eb      	b.n	8003c72 <quorem+0xee>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e7ee      	b.n	8003c7c <quorem+0xf8>
	...

08003ca0 <_dtoa_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003caa:	b099      	sub	sp, #100	; 0x64
 8003cac:	4605      	mov	r5, r0
 8003cae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003cb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003cb6:	b974      	cbnz	r4, 8003cd6 <_dtoa_r+0x36>
 8003cb8:	2010      	movs	r0, #16
 8003cba:	f000 fde3 	bl	8004884 <malloc>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6268      	str	r0, [r5, #36]	; 0x24
 8003cc2:	b920      	cbnz	r0, 8003cce <_dtoa_r+0x2e>
 8003cc4:	21ea      	movs	r1, #234	; 0xea
 8003cc6:	4bae      	ldr	r3, [pc, #696]	; (8003f80 <_dtoa_r+0x2e0>)
 8003cc8:	48ae      	ldr	r0, [pc, #696]	; (8003f84 <_dtoa_r+0x2e4>)
 8003cca:	f001 fba1 	bl	8005410 <__assert_func>
 8003cce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cd2:	6004      	str	r4, [r0, #0]
 8003cd4:	60c4      	str	r4, [r0, #12]
 8003cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	b151      	cbz	r1, 8003cf2 <_dtoa_r+0x52>
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4093      	lsls	r3, r2
 8003ce2:	604a      	str	r2, [r1, #4]
 8003ce4:	608b      	str	r3, [r1, #8]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fe30 	bl	800494c <_Bfree>
 8003cec:	2200      	movs	r2, #0
 8003cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	1e3b      	subs	r3, r7, #0
 8003cf4:	bfaf      	iteee	ge
 8003cf6:	2300      	movge	r3, #0
 8003cf8:	2201      	movlt	r2, #1
 8003cfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cfe:	9305      	strlt	r3, [sp, #20]
 8003d00:	bfa8      	it	ge
 8003d02:	f8c8 3000 	strge.w	r3, [r8]
 8003d06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d0a:	4b9f      	ldr	r3, [pc, #636]	; (8003f88 <_dtoa_r+0x2e8>)
 8003d0c:	bfb8      	it	lt
 8003d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d12:	ea33 0309 	bics.w	r3, r3, r9
 8003d16:	d119      	bne.n	8003d4c <_dtoa_r+0xac>
 8003d18:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d24:	4333      	orrs	r3, r6
 8003d26:	f000 8580 	beq.w	800482a <_dtoa_r+0xb8a>
 8003d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d2c:	b953      	cbnz	r3, 8003d44 <_dtoa_r+0xa4>
 8003d2e:	4b97      	ldr	r3, [pc, #604]	; (8003f8c <_dtoa_r+0x2ec>)
 8003d30:	e022      	b.n	8003d78 <_dtoa_r+0xd8>
 8003d32:	4b97      	ldr	r3, [pc, #604]	; (8003f90 <_dtoa_r+0x2f0>)
 8003d34:	9308      	str	r3, [sp, #32]
 8003d36:	3308      	adds	r3, #8
 8003d38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	9808      	ldr	r0, [sp, #32]
 8003d3e:	b019      	add	sp, #100	; 0x64
 8003d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d44:	4b91      	ldr	r3, [pc, #580]	; (8003f8c <_dtoa_r+0x2ec>)
 8003d46:	9308      	str	r3, [sp, #32]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	e7f5      	b.n	8003d38 <_dtoa_r+0x98>
 8003d4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f7fc fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8003d60:	4680      	mov	r8, r0
 8003d62:	b158      	cbz	r0, 8003d7c <_dtoa_r+0xdc>
 8003d64:	2301      	movs	r3, #1
 8003d66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8559 	beq.w	8004824 <_dtoa_r+0xb84>
 8003d72:	4888      	ldr	r0, [pc, #544]	; (8003f94 <_dtoa_r+0x2f4>)
 8003d74:	6018      	str	r0, [r3, #0]
 8003d76:	1e43      	subs	r3, r0, #1
 8003d78:	9308      	str	r3, [sp, #32]
 8003d7a:	e7df      	b.n	8003d3c <_dtoa_r+0x9c>
 8003d7c:	ab16      	add	r3, sp, #88	; 0x58
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	ab17      	add	r3, sp, #92	; 0x5c
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4628      	mov	r0, r5
 8003d86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d8a:	f001 f8c5 	bl	8004f18 <__d2b>
 8003d8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d92:	4682      	mov	sl, r0
 8003d94:	2c00      	cmp	r4, #0
 8003d96:	d07e      	beq.n	8003e96 <_dtoa_r+0x1f6>
 8003d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003daa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003dae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003db2:	2200      	movs	r2, #0
 8003db4:	4b78      	ldr	r3, [pc, #480]	; (8003f98 <_dtoa_r+0x2f8>)
 8003db6:	f7fc f9d7 	bl	8000168 <__aeabi_dsub>
 8003dba:	a36b      	add	r3, pc, #428	; (adr r3, 8003f68 <_dtoa_r+0x2c8>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fb8a 	bl	80004d8 <__aeabi_dmul>
 8003dc4:	a36a      	add	r3, pc, #424	; (adr r3, 8003f70 <_dtoa_r+0x2d0>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc f9cf 	bl	800016c <__adddf3>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	460f      	mov	r7, r1
 8003dd4:	f7fc fb16 	bl	8000404 <__aeabi_i2d>
 8003dd8:	a367      	add	r3, pc, #412	; (adr r3, 8003f78 <_dtoa_r+0x2d8>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fb7b 	bl	80004d8 <__aeabi_dmul>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4630      	mov	r0, r6
 8003de8:	4639      	mov	r1, r7
 8003dea:	f7fc f9bf 	bl	800016c <__adddf3>
 8003dee:	4606      	mov	r6, r0
 8003df0:	460f      	mov	r7, r1
 8003df2:	f7fc fe21 	bl	8000a38 <__aeabi_d2iz>
 8003df6:	2200      	movs	r2, #0
 8003df8:	4681      	mov	r9, r0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	4639      	mov	r1, r7
 8003e00:	f7fc fddc 	bl	80009bc <__aeabi_dcmplt>
 8003e04:	b148      	cbz	r0, 8003e1a <_dtoa_r+0x17a>
 8003e06:	4648      	mov	r0, r9
 8003e08:	f7fc fafc 	bl	8000404 <__aeabi_i2d>
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	463b      	mov	r3, r7
 8003e10:	f7fc fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8003e14:	b908      	cbnz	r0, 8003e1a <_dtoa_r+0x17a>
 8003e16:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e1a:	f1b9 0f16 	cmp.w	r9, #22
 8003e1e:	d857      	bhi.n	8003ed0 <_dtoa_r+0x230>
 8003e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e24:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <_dtoa_r+0x2fc>)
 8003e26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fdc5 	bl	80009bc <__aeabi_dcmplt>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d04e      	beq.n	8003ed4 <_dtoa_r+0x234>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e40:	1b1c      	subs	r4, r3, r4
 8003e42:	1e63      	subs	r3, r4, #1
 8003e44:	9309      	str	r3, [sp, #36]	; 0x24
 8003e46:	bf49      	itett	mi
 8003e48:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e4c:	2300      	movpl	r3, #0
 8003e4e:	9306      	strmi	r3, [sp, #24]
 8003e50:	2300      	movmi	r3, #0
 8003e52:	bf54      	ite	pl
 8003e54:	9306      	strpl	r3, [sp, #24]
 8003e56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e58:	f1b9 0f00 	cmp.w	r9, #0
 8003e5c:	db3c      	blt.n	8003ed8 <_dtoa_r+0x238>
 8003e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003e64:	444b      	add	r3, r9
 8003e66:	9309      	str	r3, [sp, #36]	; 0x24
 8003e68:	2300      	movs	r3, #0
 8003e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e6e:	2b09      	cmp	r3, #9
 8003e70:	d86c      	bhi.n	8003f4c <_dtoa_r+0x2ac>
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	bfc4      	itt	gt
 8003e76:	3b04      	subgt	r3, #4
 8003e78:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e7c:	bfc8      	it	gt
 8003e7e:	2400      	movgt	r4, #0
 8003e80:	f1a3 0302 	sub.w	r3, r3, #2
 8003e84:	bfd8      	it	le
 8003e86:	2401      	movle	r4, #1
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	f200 808b 	bhi.w	8003fa4 <_dtoa_r+0x304>
 8003e8e:	e8df f003 	tbb	[pc, r3]
 8003e92:	4f2d      	.short	0x4f2d
 8003e94:	5b4d      	.short	0x5b4d
 8003e96:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e9a:	441c      	add	r4, r3
 8003e9c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	bfc3      	ittte	gt
 8003ea4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ea8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003eac:	fa09 f303 	lslgt.w	r3, r9, r3
 8003eb0:	f1c3 0320 	rsble	r3, r3, #32
 8003eb4:	bfc6      	itte	gt
 8003eb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003eba:	4318      	orrgt	r0, r3
 8003ebc:	fa06 f003 	lslle.w	r0, r6, r3
 8003ec0:	f7fc fa90 	bl	80003e4 <__aeabi_ui2d>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eca:	3c01      	subs	r4, #1
 8003ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ece:	e770      	b.n	8003db2 <_dtoa_r+0x112>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e7b3      	b.n	8003e3c <_dtoa_r+0x19c>
 8003ed4:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ed6:	e7b2      	b.n	8003e3e <_dtoa_r+0x19e>
 8003ed8:	9b06      	ldr	r3, [sp, #24]
 8003eda:	eba3 0309 	sub.w	r3, r3, r9
 8003ede:	9306      	str	r3, [sp, #24]
 8003ee0:	f1c9 0300 	rsb	r3, r9, #0
 8003ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8003eea:	e7bf      	b.n	8003e6c <_dtoa_r+0x1cc>
 8003eec:	2300      	movs	r3, #0
 8003eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dc59      	bgt.n	8003faa <_dtoa_r+0x30a>
 8003ef6:	f04f 0b01 	mov.w	fp, #1
 8003efa:	465b      	mov	r3, fp
 8003efc:	f8cd b008 	str.w	fp, [sp, #8]
 8003f00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003f04:	2200      	movs	r2, #0
 8003f06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f08:	6042      	str	r2, [r0, #4]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	f102 0614 	add.w	r6, r2, #20
 8003f10:	429e      	cmp	r6, r3
 8003f12:	6841      	ldr	r1, [r0, #4]
 8003f14:	d94f      	bls.n	8003fb6 <_dtoa_r+0x316>
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 fcd8 	bl	80048cc <_Balloc>
 8003f1c:	9008      	str	r0, [sp, #32]
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d14d      	bne.n	8003fbe <_dtoa_r+0x31e>
 8003f22:	4602      	mov	r2, r0
 8003f24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <_dtoa_r+0x300>)
 8003f2a:	e6cd      	b.n	8003cc8 <_dtoa_r+0x28>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e7de      	b.n	8003eee <_dtoa_r+0x24e>
 8003f30:	2300      	movs	r3, #0
 8003f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f36:	eb09 0b03 	add.w	fp, r9, r3
 8003f3a:	f10b 0301 	add.w	r3, fp, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	bfb8      	it	lt
 8003f44:	2301      	movlt	r3, #1
 8003f46:	e7dd      	b.n	8003f04 <_dtoa_r+0x264>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7f2      	b.n	8003f32 <_dtoa_r+0x292>
 8003f4c:	2401      	movs	r4, #1
 8003f4e:	2300      	movs	r3, #0
 8003f50:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f52:	9322      	str	r3, [sp, #136]	; 0x88
 8003f54:	f04f 3bff 	mov.w	fp, #4294967295
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2312      	movs	r3, #18
 8003f5c:	f8cd b008 	str.w	fp, [sp, #8]
 8003f60:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f62:	e7cf      	b.n	8003f04 <_dtoa_r+0x264>
 8003f64:	f3af 8000 	nop.w
 8003f68:	636f4361 	.word	0x636f4361
 8003f6c:	3fd287a7 	.word	0x3fd287a7
 8003f70:	8b60c8b3 	.word	0x8b60c8b3
 8003f74:	3fc68a28 	.word	0x3fc68a28
 8003f78:	509f79fb 	.word	0x509f79fb
 8003f7c:	3fd34413 	.word	0x3fd34413
 8003f80:	0800606d 	.word	0x0800606d
 8003f84:	08006084 	.word	0x08006084
 8003f88:	7ff00000 	.word	0x7ff00000
 8003f8c:	08006069 	.word	0x08006069
 8003f90:	08006060 	.word	0x08006060
 8003f94:	0800603d 	.word	0x0800603d
 8003f98:	3ff80000 	.word	0x3ff80000
 8003f9c:	08006180 	.word	0x08006180
 8003fa0:	080060e3 	.word	0x080060e3
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fa8:	e7d4      	b.n	8003f54 <_dtoa_r+0x2b4>
 8003faa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003fae:	465b      	mov	r3, fp
 8003fb0:	f8cd b008 	str.w	fp, [sp, #8]
 8003fb4:	e7a6      	b.n	8003f04 <_dtoa_r+0x264>
 8003fb6:	3101      	adds	r1, #1
 8003fb8:	6041      	str	r1, [r0, #4]
 8003fba:	0052      	lsls	r2, r2, #1
 8003fbc:	e7a6      	b.n	8003f0c <_dtoa_r+0x26c>
 8003fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fc0:	9a08      	ldr	r2, [sp, #32]
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	9b02      	ldr	r3, [sp, #8]
 8003fc6:	2b0e      	cmp	r3, #14
 8003fc8:	f200 80a8 	bhi.w	800411c <_dtoa_r+0x47c>
 8003fcc:	2c00      	cmp	r4, #0
 8003fce:	f000 80a5 	beq.w	800411c <_dtoa_r+0x47c>
 8003fd2:	f1b9 0f00 	cmp.w	r9, #0
 8003fd6:	dd34      	ble.n	8004042 <_dtoa_r+0x3a2>
 8003fd8:	4a9a      	ldr	r2, [pc, #616]	; (8004244 <_dtoa_r+0x5a4>)
 8003fda:	f009 030f 	and.w	r3, r9, #15
 8003fde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fe2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fee:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003ff2:	d016      	beq.n	8004022 <_dtoa_r+0x382>
 8003ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ff8:	4b93      	ldr	r3, [pc, #588]	; (8004248 <_dtoa_r+0x5a8>)
 8003ffa:	2703      	movs	r7, #3
 8003ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004000:	f7fc fb94 	bl	800072c <__aeabi_ddiv>
 8004004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004008:	f004 040f 	and.w	r4, r4, #15
 800400c:	4e8e      	ldr	r6, [pc, #568]	; (8004248 <_dtoa_r+0x5a8>)
 800400e:	b954      	cbnz	r4, 8004026 <_dtoa_r+0x386>
 8004010:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004018:	f7fc fb88 	bl	800072c <__aeabi_ddiv>
 800401c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004020:	e029      	b.n	8004076 <_dtoa_r+0x3d6>
 8004022:	2702      	movs	r7, #2
 8004024:	e7f2      	b.n	800400c <_dtoa_r+0x36c>
 8004026:	07e1      	lsls	r1, r4, #31
 8004028:	d508      	bpl.n	800403c <_dtoa_r+0x39c>
 800402a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800402e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004032:	f7fc fa51 	bl	80004d8 <__aeabi_dmul>
 8004036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800403a:	3701      	adds	r7, #1
 800403c:	1064      	asrs	r4, r4, #1
 800403e:	3608      	adds	r6, #8
 8004040:	e7e5      	b.n	800400e <_dtoa_r+0x36e>
 8004042:	f000 80a5 	beq.w	8004190 <_dtoa_r+0x4f0>
 8004046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800404a:	f1c9 0400 	rsb	r4, r9, #0
 800404e:	4b7d      	ldr	r3, [pc, #500]	; (8004244 <_dtoa_r+0x5a4>)
 8004050:	f004 020f 	and.w	r2, r4, #15
 8004054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc fa3c 	bl	80004d8 <__aeabi_dmul>
 8004060:	2702      	movs	r7, #2
 8004062:	2300      	movs	r3, #0
 8004064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004068:	4e77      	ldr	r6, [pc, #476]	; (8004248 <_dtoa_r+0x5a8>)
 800406a:	1124      	asrs	r4, r4, #4
 800406c:	2c00      	cmp	r4, #0
 800406e:	f040 8084 	bne.w	800417a <_dtoa_r+0x4da>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1d2      	bne.n	800401c <_dtoa_r+0x37c>
 8004076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 808b 	beq.w	8004194 <_dtoa_r+0x4f4>
 800407e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004082:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800408a:	2200      	movs	r2, #0
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <_dtoa_r+0x5ac>)
 800408e:	f7fc fc95 	bl	80009bc <__aeabi_dcmplt>
 8004092:	2800      	cmp	r0, #0
 8004094:	d07e      	beq.n	8004194 <_dtoa_r+0x4f4>
 8004096:	9b02      	ldr	r3, [sp, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d07b      	beq.n	8004194 <_dtoa_r+0x4f4>
 800409c:	f1bb 0f00 	cmp.w	fp, #0
 80040a0:	dd38      	ble.n	8004114 <_dtoa_r+0x474>
 80040a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040a6:	2200      	movs	r2, #0
 80040a8:	4b69      	ldr	r3, [pc, #420]	; (8004250 <_dtoa_r+0x5b0>)
 80040aa:	f7fc fa15 	bl	80004d8 <__aeabi_dmul>
 80040ae:	465c      	mov	r4, fp
 80040b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040b4:	f109 38ff 	add.w	r8, r9, #4294967295
 80040b8:	3701      	adds	r7, #1
 80040ba:	4638      	mov	r0, r7
 80040bc:	f7fc f9a2 	bl	8000404 <__aeabi_i2d>
 80040c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040c4:	f7fc fa08 	bl	80004d8 <__aeabi_dmul>
 80040c8:	2200      	movs	r2, #0
 80040ca:	4b62      	ldr	r3, [pc, #392]	; (8004254 <_dtoa_r+0x5b4>)
 80040cc:	f7fc f84e 	bl	800016c <__adddf3>
 80040d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040d8:	9611      	str	r6, [sp, #68]	; 0x44
 80040da:	2c00      	cmp	r4, #0
 80040dc:	d15d      	bne.n	800419a <_dtoa_r+0x4fa>
 80040de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040e2:	2200      	movs	r2, #0
 80040e4:	4b5c      	ldr	r3, [pc, #368]	; (8004258 <_dtoa_r+0x5b8>)
 80040e6:	f7fc f83f 	bl	8000168 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040f2:	4633      	mov	r3, r6
 80040f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040f6:	f7fc fc7f 	bl	80009f8 <__aeabi_dcmpgt>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	f040 829e 	bne.w	800463c <_dtoa_r+0x99c>
 8004100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004106:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800410a:	f7fc fc57 	bl	80009bc <__aeabi_dcmplt>
 800410e:	2800      	cmp	r0, #0
 8004110:	f040 8292 	bne.w	8004638 <_dtoa_r+0x998>
 8004114:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004118:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800411c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800411e:	2b00      	cmp	r3, #0
 8004120:	f2c0 8153 	blt.w	80043ca <_dtoa_r+0x72a>
 8004124:	f1b9 0f0e 	cmp.w	r9, #14
 8004128:	f300 814f 	bgt.w	80043ca <_dtoa_r+0x72a>
 800412c:	4b45      	ldr	r3, [pc, #276]	; (8004244 <_dtoa_r+0x5a4>)
 800412e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004132:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004136:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800413a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800413c:	2b00      	cmp	r3, #0
 800413e:	f280 80db 	bge.w	80042f8 <_dtoa_r+0x658>
 8004142:	9b02      	ldr	r3, [sp, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f300 80d7 	bgt.w	80042f8 <_dtoa_r+0x658>
 800414a:	f040 8274 	bne.w	8004636 <_dtoa_r+0x996>
 800414e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	4b40      	ldr	r3, [pc, #256]	; (8004258 <_dtoa_r+0x5b8>)
 8004156:	f7fc f9bf 	bl	80004d8 <__aeabi_dmul>
 800415a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800415e:	f7fc fc41 	bl	80009e4 <__aeabi_dcmpge>
 8004162:	9c02      	ldr	r4, [sp, #8]
 8004164:	4626      	mov	r6, r4
 8004166:	2800      	cmp	r0, #0
 8004168:	f040 824a 	bne.w	8004600 <_dtoa_r+0x960>
 800416c:	2331      	movs	r3, #49	; 0x31
 800416e:	9f08      	ldr	r7, [sp, #32]
 8004170:	f109 0901 	add.w	r9, r9, #1
 8004174:	f807 3b01 	strb.w	r3, [r7], #1
 8004178:	e246      	b.n	8004608 <_dtoa_r+0x968>
 800417a:	07e2      	lsls	r2, r4, #31
 800417c:	d505      	bpl.n	800418a <_dtoa_r+0x4ea>
 800417e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004182:	f7fc f9a9 	bl	80004d8 <__aeabi_dmul>
 8004186:	2301      	movs	r3, #1
 8004188:	3701      	adds	r7, #1
 800418a:	1064      	asrs	r4, r4, #1
 800418c:	3608      	adds	r6, #8
 800418e:	e76d      	b.n	800406c <_dtoa_r+0x3cc>
 8004190:	2702      	movs	r7, #2
 8004192:	e770      	b.n	8004076 <_dtoa_r+0x3d6>
 8004194:	46c8      	mov	r8, r9
 8004196:	9c02      	ldr	r4, [sp, #8]
 8004198:	e78f      	b.n	80040ba <_dtoa_r+0x41a>
 800419a:	9908      	ldr	r1, [sp, #32]
 800419c:	4b29      	ldr	r3, [pc, #164]	; (8004244 <_dtoa_r+0x5a4>)
 800419e:	4421      	add	r1, r4
 80041a0:	9112      	str	r1, [sp, #72]	; 0x48
 80041a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80041ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041b0:	2900      	cmp	r1, #0
 80041b2:	d055      	beq.n	8004260 <_dtoa_r+0x5c0>
 80041b4:	2000      	movs	r0, #0
 80041b6:	4929      	ldr	r1, [pc, #164]	; (800425c <_dtoa_r+0x5bc>)
 80041b8:	f7fc fab8 	bl	800072c <__aeabi_ddiv>
 80041bc:	463b      	mov	r3, r7
 80041be:	4632      	mov	r2, r6
 80041c0:	f7fb ffd2 	bl	8000168 <__aeabi_dsub>
 80041c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041c8:	9f08      	ldr	r7, [sp, #32]
 80041ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ce:	f7fc fc33 	bl	8000a38 <__aeabi_d2iz>
 80041d2:	4604      	mov	r4, r0
 80041d4:	f7fc f916 	bl	8000404 <__aeabi_i2d>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041e0:	f7fb ffc2 	bl	8000168 <__aeabi_dsub>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	3430      	adds	r4, #48	; 0x30
 80041ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041f2:	f807 4b01 	strb.w	r4, [r7], #1
 80041f6:	f7fc fbe1 	bl	80009bc <__aeabi_dcmplt>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d174      	bne.n	80042e8 <_dtoa_r+0x648>
 80041fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004202:	2000      	movs	r0, #0
 8004204:	4911      	ldr	r1, [pc, #68]	; (800424c <_dtoa_r+0x5ac>)
 8004206:	f7fb ffaf 	bl	8000168 <__aeabi_dsub>
 800420a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800420e:	f7fc fbd5 	bl	80009bc <__aeabi_dcmplt>
 8004212:	2800      	cmp	r0, #0
 8004214:	f040 80b6 	bne.w	8004384 <_dtoa_r+0x6e4>
 8004218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800421a:	429f      	cmp	r7, r3
 800421c:	f43f af7a 	beq.w	8004114 <_dtoa_r+0x474>
 8004220:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004224:	2200      	movs	r2, #0
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <_dtoa_r+0x5b0>)
 8004228:	f7fc f956 	bl	80004d8 <__aeabi_dmul>
 800422c:	2200      	movs	r2, #0
 800422e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <_dtoa_r+0x5b0>)
 8004238:	f7fc f94e 	bl	80004d8 <__aeabi_dmul>
 800423c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004240:	e7c3      	b.n	80041ca <_dtoa_r+0x52a>
 8004242:	bf00      	nop
 8004244:	08006180 	.word	0x08006180
 8004248:	08006158 	.word	0x08006158
 800424c:	3ff00000 	.word	0x3ff00000
 8004250:	40240000 	.word	0x40240000
 8004254:	401c0000 	.word	0x401c0000
 8004258:	40140000 	.word	0x40140000
 800425c:	3fe00000 	.word	0x3fe00000
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	f7fc f938 	bl	80004d8 <__aeabi_dmul>
 8004268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800426a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800426e:	9c08      	ldr	r4, [sp, #32]
 8004270:	9314      	str	r3, [sp, #80]	; 0x50
 8004272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004276:	f7fc fbdf 	bl	8000a38 <__aeabi_d2iz>
 800427a:	9015      	str	r0, [sp, #84]	; 0x54
 800427c:	f7fc f8c2 	bl	8000404 <__aeabi_i2d>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004288:	f7fb ff6e 	bl	8000168 <__aeabi_dsub>
 800428c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800428e:	4606      	mov	r6, r0
 8004290:	3330      	adds	r3, #48	; 0x30
 8004292:	f804 3b01 	strb.w	r3, [r4], #1
 8004296:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004298:	460f      	mov	r7, r1
 800429a:	429c      	cmp	r4, r3
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	d124      	bne.n	80042ec <_dtoa_r+0x64c>
 80042a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042a6:	4bb3      	ldr	r3, [pc, #716]	; (8004574 <_dtoa_r+0x8d4>)
 80042a8:	f7fb ff60 	bl	800016c <__adddf3>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4630      	mov	r0, r6
 80042b2:	4639      	mov	r1, r7
 80042b4:	f7fc fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d162      	bne.n	8004382 <_dtoa_r+0x6e2>
 80042bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042c0:	2000      	movs	r0, #0
 80042c2:	49ac      	ldr	r1, [pc, #688]	; (8004574 <_dtoa_r+0x8d4>)
 80042c4:	f7fb ff50 	bl	8000168 <__aeabi_dsub>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4630      	mov	r0, r6
 80042ce:	4639      	mov	r1, r7
 80042d0:	f7fc fb74 	bl	80009bc <__aeabi_dcmplt>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f43f af1d 	beq.w	8004114 <_dtoa_r+0x474>
 80042da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042dc:	1e7b      	subs	r3, r7, #1
 80042de:	9314      	str	r3, [sp, #80]	; 0x50
 80042e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80042e4:	2b30      	cmp	r3, #48	; 0x30
 80042e6:	d0f8      	beq.n	80042da <_dtoa_r+0x63a>
 80042e8:	46c1      	mov	r9, r8
 80042ea:	e03a      	b.n	8004362 <_dtoa_r+0x6c2>
 80042ec:	4ba2      	ldr	r3, [pc, #648]	; (8004578 <_dtoa_r+0x8d8>)
 80042ee:	f7fc f8f3 	bl	80004d8 <__aeabi_dmul>
 80042f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042f6:	e7bc      	b.n	8004272 <_dtoa_r+0x5d2>
 80042f8:	9f08      	ldr	r7, [sp, #32]
 80042fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004302:	f7fc fa13 	bl	800072c <__aeabi_ddiv>
 8004306:	f7fc fb97 	bl	8000a38 <__aeabi_d2iz>
 800430a:	4604      	mov	r4, r0
 800430c:	f7fc f87a 	bl	8000404 <__aeabi_i2d>
 8004310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004314:	f7fc f8e0 	bl	80004d8 <__aeabi_dmul>
 8004318:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800431c:	460b      	mov	r3, r1
 800431e:	4602      	mov	r2, r0
 8004320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004324:	f7fb ff20 	bl	8000168 <__aeabi_dsub>
 8004328:	f807 6b01 	strb.w	r6, [r7], #1
 800432c:	9e08      	ldr	r6, [sp, #32]
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	1bbe      	subs	r6, r7, r6
 8004332:	42b3      	cmp	r3, r6
 8004334:	d13a      	bne.n	80043ac <_dtoa_r+0x70c>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	f7fb ff17 	bl	800016c <__adddf3>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800434a:	f7fc fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800434e:	bb58      	cbnz	r0, 80043a8 <_dtoa_r+0x708>
 8004350:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004358:	f7fc fb26 	bl	80009a8 <__aeabi_dcmpeq>
 800435c:	b108      	cbz	r0, 8004362 <_dtoa_r+0x6c2>
 800435e:	07e1      	lsls	r1, r4, #31
 8004360:	d422      	bmi.n	80043a8 <_dtoa_r+0x708>
 8004362:	4628      	mov	r0, r5
 8004364:	4651      	mov	r1, sl
 8004366:	f000 faf1 	bl	800494c <_Bfree>
 800436a:	2300      	movs	r3, #0
 800436c:	703b      	strb	r3, [r7, #0]
 800436e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004370:	f109 0001 	add.w	r0, r9, #1
 8004374:	6018      	str	r0, [r3, #0]
 8004376:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004378:	2b00      	cmp	r3, #0
 800437a:	f43f acdf 	beq.w	8003d3c <_dtoa_r+0x9c>
 800437e:	601f      	str	r7, [r3, #0]
 8004380:	e4dc      	b.n	8003d3c <_dtoa_r+0x9c>
 8004382:	4627      	mov	r7, r4
 8004384:	463b      	mov	r3, r7
 8004386:	461f      	mov	r7, r3
 8004388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800438c:	2a39      	cmp	r2, #57	; 0x39
 800438e:	d107      	bne.n	80043a0 <_dtoa_r+0x700>
 8004390:	9a08      	ldr	r2, [sp, #32]
 8004392:	429a      	cmp	r2, r3
 8004394:	d1f7      	bne.n	8004386 <_dtoa_r+0x6e6>
 8004396:	2230      	movs	r2, #48	; 0x30
 8004398:	9908      	ldr	r1, [sp, #32]
 800439a:	f108 0801 	add.w	r8, r8, #1
 800439e:	700a      	strb	r2, [r1, #0]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	3201      	adds	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e79f      	b.n	80042e8 <_dtoa_r+0x648>
 80043a8:	46c8      	mov	r8, r9
 80043aa:	e7eb      	b.n	8004384 <_dtoa_r+0x6e4>
 80043ac:	2200      	movs	r2, #0
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <_dtoa_r+0x8d8>)
 80043b0:	f7fc f892 	bl	80004d8 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043bc:	2200      	movs	r2, #0
 80043be:	2300      	movs	r3, #0
 80043c0:	f7fc faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d098      	beq.n	80042fa <_dtoa_r+0x65a>
 80043c8:	e7cb      	b.n	8004362 <_dtoa_r+0x6c2>
 80043ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	f000 80cd 	beq.w	800456c <_dtoa_r+0x8cc>
 80043d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043d4:	2a01      	cmp	r2, #1
 80043d6:	f300 80af 	bgt.w	8004538 <_dtoa_r+0x898>
 80043da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043dc:	2a00      	cmp	r2, #0
 80043de:	f000 80a7 	beq.w	8004530 <_dtoa_r+0x890>
 80043e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043e8:	9f06      	ldr	r7, [sp, #24]
 80043ea:	9a06      	ldr	r2, [sp, #24]
 80043ec:	2101      	movs	r1, #1
 80043ee:	441a      	add	r2, r3
 80043f0:	9206      	str	r2, [sp, #24]
 80043f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f4:	4628      	mov	r0, r5
 80043f6:	441a      	add	r2, r3
 80043f8:	9209      	str	r2, [sp, #36]	; 0x24
 80043fa:	f000 fb61 	bl	8004ac0 <__i2b>
 80043fe:	4606      	mov	r6, r0
 8004400:	2f00      	cmp	r7, #0
 8004402:	dd0c      	ble.n	800441e <_dtoa_r+0x77e>
 8004404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004406:	2b00      	cmp	r3, #0
 8004408:	dd09      	ble.n	800441e <_dtoa_r+0x77e>
 800440a:	42bb      	cmp	r3, r7
 800440c:	bfa8      	it	ge
 800440e:	463b      	movge	r3, r7
 8004410:	9a06      	ldr	r2, [sp, #24]
 8004412:	1aff      	subs	r7, r7, r3
 8004414:	1ad2      	subs	r2, r2, r3
 8004416:	9206      	str	r2, [sp, #24]
 8004418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	9309      	str	r3, [sp, #36]	; 0x24
 800441e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004420:	b1f3      	cbz	r3, 8004460 <_dtoa_r+0x7c0>
 8004422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a9 	beq.w	800457c <_dtoa_r+0x8dc>
 800442a:	2c00      	cmp	r4, #0
 800442c:	dd10      	ble.n	8004450 <_dtoa_r+0x7b0>
 800442e:	4631      	mov	r1, r6
 8004430:	4622      	mov	r2, r4
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fbfe 	bl	8004c34 <__pow5mult>
 8004438:	4652      	mov	r2, sl
 800443a:	4601      	mov	r1, r0
 800443c:	4606      	mov	r6, r0
 800443e:	4628      	mov	r0, r5
 8004440:	f000 fb54 	bl	8004aec <__multiply>
 8004444:	4680      	mov	r8, r0
 8004446:	4651      	mov	r1, sl
 8004448:	4628      	mov	r0, r5
 800444a:	f000 fa7f 	bl	800494c <_Bfree>
 800444e:	46c2      	mov	sl, r8
 8004450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004452:	1b1a      	subs	r2, r3, r4
 8004454:	d004      	beq.n	8004460 <_dtoa_r+0x7c0>
 8004456:	4651      	mov	r1, sl
 8004458:	4628      	mov	r0, r5
 800445a:	f000 fbeb 	bl	8004c34 <__pow5mult>
 800445e:	4682      	mov	sl, r0
 8004460:	2101      	movs	r1, #1
 8004462:	4628      	mov	r0, r5
 8004464:	f000 fb2c 	bl	8004ac0 <__i2b>
 8004468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800446a:	4604      	mov	r4, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	f340 8087 	ble.w	8004580 <_dtoa_r+0x8e0>
 8004472:	461a      	mov	r2, r3
 8004474:	4601      	mov	r1, r0
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fbdc 	bl	8004c34 <__pow5mult>
 800447c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800447e:	4604      	mov	r4, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	f340 8080 	ble.w	8004586 <_dtoa_r+0x8e6>
 8004486:	f04f 0800 	mov.w	r8, #0
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004490:	6918      	ldr	r0, [r3, #16]
 8004492:	f000 fac7 	bl	8004a24 <__hi0bits>
 8004496:	f1c0 0020 	rsb	r0, r0, #32
 800449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449c:	4418      	add	r0, r3
 800449e:	f010 001f 	ands.w	r0, r0, #31
 80044a2:	f000 8092 	beq.w	80045ca <_dtoa_r+0x92a>
 80044a6:	f1c0 0320 	rsb	r3, r0, #32
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	f340 808a 	ble.w	80045c4 <_dtoa_r+0x924>
 80044b0:	f1c0 001c 	rsb	r0, r0, #28
 80044b4:	9b06      	ldr	r3, [sp, #24]
 80044b6:	4407      	add	r7, r0
 80044b8:	4403      	add	r3, r0
 80044ba:	9306      	str	r3, [sp, #24]
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	4403      	add	r3, r0
 80044c0:	9309      	str	r3, [sp, #36]	; 0x24
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd05      	ble.n	80044d4 <_dtoa_r+0x834>
 80044c8:	4651      	mov	r1, sl
 80044ca:	461a      	mov	r2, r3
 80044cc:	4628      	mov	r0, r5
 80044ce:	f000 fc0b 	bl	8004ce8 <__lshift>
 80044d2:	4682      	mov	sl, r0
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dd05      	ble.n	80044e6 <_dtoa_r+0x846>
 80044da:	4621      	mov	r1, r4
 80044dc:	461a      	mov	r2, r3
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fc02 	bl	8004ce8 <__lshift>
 80044e4:	4604      	mov	r4, r0
 80044e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d070      	beq.n	80045ce <_dtoa_r+0x92e>
 80044ec:	4621      	mov	r1, r4
 80044ee:	4650      	mov	r0, sl
 80044f0:	f000 fc66 	bl	8004dc0 <__mcmp>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	da6a      	bge.n	80045ce <_dtoa_r+0x92e>
 80044f8:	2300      	movs	r3, #0
 80044fa:	4651      	mov	r1, sl
 80044fc:	220a      	movs	r2, #10
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 fa46 	bl	8004990 <__multadd>
 8004504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004506:	4682      	mov	sl, r0
 8004508:	f109 39ff 	add.w	r9, r9, #4294967295
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8193 	beq.w	8004838 <_dtoa_r+0xb98>
 8004512:	4631      	mov	r1, r6
 8004514:	2300      	movs	r3, #0
 8004516:	220a      	movs	r2, #10
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fa39 	bl	8004990 <__multadd>
 800451e:	f1bb 0f00 	cmp.w	fp, #0
 8004522:	4606      	mov	r6, r0
 8004524:	f300 8093 	bgt.w	800464e <_dtoa_r+0x9ae>
 8004528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800452a:	2b02      	cmp	r3, #2
 800452c:	dc57      	bgt.n	80045de <_dtoa_r+0x93e>
 800452e:	e08e      	b.n	800464e <_dtoa_r+0x9ae>
 8004530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004532:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004536:	e756      	b.n	80043e6 <_dtoa_r+0x746>
 8004538:	9b02      	ldr	r3, [sp, #8]
 800453a:	1e5c      	subs	r4, r3, #1
 800453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453e:	42a3      	cmp	r3, r4
 8004540:	bfb7      	itett	lt
 8004542:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004544:	1b1c      	subge	r4, r3, r4
 8004546:	1ae2      	sublt	r2, r4, r3
 8004548:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800454a:	bfbe      	ittt	lt
 800454c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800454e:	189b      	addlt	r3, r3, r2
 8004550:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004552:	9b02      	ldr	r3, [sp, #8]
 8004554:	bfb8      	it	lt
 8004556:	2400      	movlt	r4, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfbb      	ittet	lt
 800455c:	9b06      	ldrlt	r3, [sp, #24]
 800455e:	9a02      	ldrlt	r2, [sp, #8]
 8004560:	9f06      	ldrge	r7, [sp, #24]
 8004562:	1a9f      	sublt	r7, r3, r2
 8004564:	bfac      	ite	ge
 8004566:	9b02      	ldrge	r3, [sp, #8]
 8004568:	2300      	movlt	r3, #0
 800456a:	e73e      	b.n	80043ea <_dtoa_r+0x74a>
 800456c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800456e:	9f06      	ldr	r7, [sp, #24]
 8004570:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004572:	e745      	b.n	8004400 <_dtoa_r+0x760>
 8004574:	3fe00000 	.word	0x3fe00000
 8004578:	40240000 	.word	0x40240000
 800457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457e:	e76a      	b.n	8004456 <_dtoa_r+0x7b6>
 8004580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004582:	2b01      	cmp	r3, #1
 8004584:	dc19      	bgt.n	80045ba <_dtoa_r+0x91a>
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	b9bb      	cbnz	r3, 80045ba <_dtoa_r+0x91a>
 800458a:	9b05      	ldr	r3, [sp, #20]
 800458c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004590:	b99b      	cbnz	r3, 80045ba <_dtoa_r+0x91a>
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004598:	0d1b      	lsrs	r3, r3, #20
 800459a:	051b      	lsls	r3, r3, #20
 800459c:	b183      	cbz	r3, 80045c0 <_dtoa_r+0x920>
 800459e:	f04f 0801 	mov.w	r8, #1
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	3301      	adds	r3, #1
 80045a6:	9306      	str	r3, [sp, #24]
 80045a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045aa:	3301      	adds	r3, #1
 80045ac:	9309      	str	r3, [sp, #36]	; 0x24
 80045ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6a 	bne.w	800448a <_dtoa_r+0x7ea>
 80045b6:	2001      	movs	r0, #1
 80045b8:	e76f      	b.n	800449a <_dtoa_r+0x7fa>
 80045ba:	f04f 0800 	mov.w	r8, #0
 80045be:	e7f6      	b.n	80045ae <_dtoa_r+0x90e>
 80045c0:	4698      	mov	r8, r3
 80045c2:	e7f4      	b.n	80045ae <_dtoa_r+0x90e>
 80045c4:	f43f af7d 	beq.w	80044c2 <_dtoa_r+0x822>
 80045c8:	4618      	mov	r0, r3
 80045ca:	301c      	adds	r0, #28
 80045cc:	e772      	b.n	80044b4 <_dtoa_r+0x814>
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc36      	bgt.n	8004642 <_dtoa_r+0x9a2>
 80045d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	dd33      	ble.n	8004642 <_dtoa_r+0x9a2>
 80045da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045de:	f1bb 0f00 	cmp.w	fp, #0
 80045e2:	d10d      	bne.n	8004600 <_dtoa_r+0x960>
 80045e4:	4621      	mov	r1, r4
 80045e6:	465b      	mov	r3, fp
 80045e8:	2205      	movs	r2, #5
 80045ea:	4628      	mov	r0, r5
 80045ec:	f000 f9d0 	bl	8004990 <__multadd>
 80045f0:	4601      	mov	r1, r0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4650      	mov	r0, sl
 80045f6:	f000 fbe3 	bl	8004dc0 <__mcmp>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	f73f adb6 	bgt.w	800416c <_dtoa_r+0x4cc>
 8004600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004602:	9f08      	ldr	r7, [sp, #32]
 8004604:	ea6f 0903 	mvn.w	r9, r3
 8004608:	f04f 0800 	mov.w	r8, #0
 800460c:	4621      	mov	r1, r4
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f99c 	bl	800494c <_Bfree>
 8004614:	2e00      	cmp	r6, #0
 8004616:	f43f aea4 	beq.w	8004362 <_dtoa_r+0x6c2>
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	d005      	beq.n	800462c <_dtoa_r+0x98c>
 8004620:	45b0      	cmp	r8, r6
 8004622:	d003      	beq.n	800462c <_dtoa_r+0x98c>
 8004624:	4641      	mov	r1, r8
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f990 	bl	800494c <_Bfree>
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	f000 f98c 	bl	800494c <_Bfree>
 8004634:	e695      	b.n	8004362 <_dtoa_r+0x6c2>
 8004636:	2400      	movs	r4, #0
 8004638:	4626      	mov	r6, r4
 800463a:	e7e1      	b.n	8004600 <_dtoa_r+0x960>
 800463c:	46c1      	mov	r9, r8
 800463e:	4626      	mov	r6, r4
 8004640:	e594      	b.n	800416c <_dtoa_r+0x4cc>
 8004642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004644:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80fc 	beq.w	8004846 <_dtoa_r+0xba6>
 800464e:	2f00      	cmp	r7, #0
 8004650:	dd05      	ble.n	800465e <_dtoa_r+0x9be>
 8004652:	4631      	mov	r1, r6
 8004654:	463a      	mov	r2, r7
 8004656:	4628      	mov	r0, r5
 8004658:	f000 fb46 	bl	8004ce8 <__lshift>
 800465c:	4606      	mov	r6, r0
 800465e:	f1b8 0f00 	cmp.w	r8, #0
 8004662:	d05c      	beq.n	800471e <_dtoa_r+0xa7e>
 8004664:	4628      	mov	r0, r5
 8004666:	6871      	ldr	r1, [r6, #4]
 8004668:	f000 f930 	bl	80048cc <_Balloc>
 800466c:	4607      	mov	r7, r0
 800466e:	b928      	cbnz	r0, 800467c <_dtoa_r+0x9dc>
 8004670:	4602      	mov	r2, r0
 8004672:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004676:	4b7e      	ldr	r3, [pc, #504]	; (8004870 <_dtoa_r+0xbd0>)
 8004678:	f7ff bb26 	b.w	8003cc8 <_dtoa_r+0x28>
 800467c:	6932      	ldr	r2, [r6, #16]
 800467e:	f106 010c 	add.w	r1, r6, #12
 8004682:	3202      	adds	r2, #2
 8004684:	0092      	lsls	r2, r2, #2
 8004686:	300c      	adds	r0, #12
 8004688:	f000 f912 	bl	80048b0 <memcpy>
 800468c:	2201      	movs	r2, #1
 800468e:	4639      	mov	r1, r7
 8004690:	4628      	mov	r0, r5
 8004692:	f000 fb29 	bl	8004ce8 <__lshift>
 8004696:	46b0      	mov	r8, r6
 8004698:	4606      	mov	r6, r0
 800469a:	9b08      	ldr	r3, [sp, #32]
 800469c:	3301      	adds	r3, #1
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	9b08      	ldr	r3, [sp, #32]
 80046a2:	445b      	add	r3, fp
 80046a4:	930a      	str	r3, [sp, #40]	; 0x28
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	9309      	str	r3, [sp, #36]	; 0x24
 80046ae:	9b02      	ldr	r3, [sp, #8]
 80046b0:	4621      	mov	r1, r4
 80046b2:	4650      	mov	r0, sl
 80046b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80046b8:	f7ff fa64 	bl	8003b84 <quorem>
 80046bc:	4603      	mov	r3, r0
 80046be:	4641      	mov	r1, r8
 80046c0:	3330      	adds	r3, #48	; 0x30
 80046c2:	9004      	str	r0, [sp, #16]
 80046c4:	4650      	mov	r0, sl
 80046c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046c8:	f000 fb7a 	bl	8004dc0 <__mcmp>
 80046cc:	4632      	mov	r2, r6
 80046ce:	9006      	str	r0, [sp, #24]
 80046d0:	4621      	mov	r1, r4
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 fb90 	bl	8004df8 <__mdiff>
 80046d8:	68c2      	ldr	r2, [r0, #12]
 80046da:	4607      	mov	r7, r0
 80046dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046de:	bb02      	cbnz	r2, 8004722 <_dtoa_r+0xa82>
 80046e0:	4601      	mov	r1, r0
 80046e2:	4650      	mov	r0, sl
 80046e4:	f000 fb6c 	bl	8004dc0 <__mcmp>
 80046e8:	4602      	mov	r2, r0
 80046ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ec:	4639      	mov	r1, r7
 80046ee:	4628      	mov	r0, r5
 80046f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80046f4:	f000 f92a 	bl	800494c <_Bfree>
 80046f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046fc:	9f02      	ldr	r7, [sp, #8]
 80046fe:	ea43 0102 	orr.w	r1, r3, r2
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	430b      	orrs	r3, r1
 8004706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004708:	d10d      	bne.n	8004726 <_dtoa_r+0xa86>
 800470a:	2b39      	cmp	r3, #57	; 0x39
 800470c:	d027      	beq.n	800475e <_dtoa_r+0xabe>
 800470e:	9a06      	ldr	r2, [sp, #24]
 8004710:	2a00      	cmp	r2, #0
 8004712:	dd01      	ble.n	8004718 <_dtoa_r+0xa78>
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	3331      	adds	r3, #49	; 0x31
 8004718:	f88b 3000 	strb.w	r3, [fp]
 800471c:	e776      	b.n	800460c <_dtoa_r+0x96c>
 800471e:	4630      	mov	r0, r6
 8004720:	e7b9      	b.n	8004696 <_dtoa_r+0x9f6>
 8004722:	2201      	movs	r2, #1
 8004724:	e7e2      	b.n	80046ec <_dtoa_r+0xa4c>
 8004726:	9906      	ldr	r1, [sp, #24]
 8004728:	2900      	cmp	r1, #0
 800472a:	db04      	blt.n	8004736 <_dtoa_r+0xa96>
 800472c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800472e:	4301      	orrs	r1, r0
 8004730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004732:	4301      	orrs	r1, r0
 8004734:	d120      	bne.n	8004778 <_dtoa_r+0xad8>
 8004736:	2a00      	cmp	r2, #0
 8004738:	ddee      	ble.n	8004718 <_dtoa_r+0xa78>
 800473a:	4651      	mov	r1, sl
 800473c:	2201      	movs	r2, #1
 800473e:	4628      	mov	r0, r5
 8004740:	9302      	str	r3, [sp, #8]
 8004742:	f000 fad1 	bl	8004ce8 <__lshift>
 8004746:	4621      	mov	r1, r4
 8004748:	4682      	mov	sl, r0
 800474a:	f000 fb39 	bl	8004dc0 <__mcmp>
 800474e:	2800      	cmp	r0, #0
 8004750:	9b02      	ldr	r3, [sp, #8]
 8004752:	dc02      	bgt.n	800475a <_dtoa_r+0xaba>
 8004754:	d1e0      	bne.n	8004718 <_dtoa_r+0xa78>
 8004756:	07da      	lsls	r2, r3, #31
 8004758:	d5de      	bpl.n	8004718 <_dtoa_r+0xa78>
 800475a:	2b39      	cmp	r3, #57	; 0x39
 800475c:	d1da      	bne.n	8004714 <_dtoa_r+0xa74>
 800475e:	2339      	movs	r3, #57	; 0x39
 8004760:	f88b 3000 	strb.w	r3, [fp]
 8004764:	463b      	mov	r3, r7
 8004766:	461f      	mov	r7, r3
 8004768:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800476c:	3b01      	subs	r3, #1
 800476e:	2a39      	cmp	r2, #57	; 0x39
 8004770:	d050      	beq.n	8004814 <_dtoa_r+0xb74>
 8004772:	3201      	adds	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e749      	b.n	800460c <_dtoa_r+0x96c>
 8004778:	2a00      	cmp	r2, #0
 800477a:	dd03      	ble.n	8004784 <_dtoa_r+0xae4>
 800477c:	2b39      	cmp	r3, #57	; 0x39
 800477e:	d0ee      	beq.n	800475e <_dtoa_r+0xabe>
 8004780:	3301      	adds	r3, #1
 8004782:	e7c9      	b.n	8004718 <_dtoa_r+0xa78>
 8004784:	9a02      	ldr	r2, [sp, #8]
 8004786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004788:	f802 3c01 	strb.w	r3, [r2, #-1]
 800478c:	428a      	cmp	r2, r1
 800478e:	d02a      	beq.n	80047e6 <_dtoa_r+0xb46>
 8004790:	4651      	mov	r1, sl
 8004792:	2300      	movs	r3, #0
 8004794:	220a      	movs	r2, #10
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f8fa 	bl	8004990 <__multadd>
 800479c:	45b0      	cmp	r8, r6
 800479e:	4682      	mov	sl, r0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	f04f 020a 	mov.w	r2, #10
 80047a8:	4641      	mov	r1, r8
 80047aa:	4628      	mov	r0, r5
 80047ac:	d107      	bne.n	80047be <_dtoa_r+0xb1e>
 80047ae:	f000 f8ef 	bl	8004990 <__multadd>
 80047b2:	4680      	mov	r8, r0
 80047b4:	4606      	mov	r6, r0
 80047b6:	9b02      	ldr	r3, [sp, #8]
 80047b8:	3301      	adds	r3, #1
 80047ba:	9302      	str	r3, [sp, #8]
 80047bc:	e777      	b.n	80046ae <_dtoa_r+0xa0e>
 80047be:	f000 f8e7 	bl	8004990 <__multadd>
 80047c2:	4631      	mov	r1, r6
 80047c4:	4680      	mov	r8, r0
 80047c6:	2300      	movs	r3, #0
 80047c8:	220a      	movs	r2, #10
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f8e0 	bl	8004990 <__multadd>
 80047d0:	4606      	mov	r6, r0
 80047d2:	e7f0      	b.n	80047b6 <_dtoa_r+0xb16>
 80047d4:	f1bb 0f00 	cmp.w	fp, #0
 80047d8:	bfcc      	ite	gt
 80047da:	465f      	movgt	r7, fp
 80047dc:	2701      	movle	r7, #1
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	9a08      	ldr	r2, [sp, #32]
 80047e4:	4417      	add	r7, r2
 80047e6:	4651      	mov	r1, sl
 80047e8:	2201      	movs	r2, #1
 80047ea:	4628      	mov	r0, r5
 80047ec:	9302      	str	r3, [sp, #8]
 80047ee:	f000 fa7b 	bl	8004ce8 <__lshift>
 80047f2:	4621      	mov	r1, r4
 80047f4:	4682      	mov	sl, r0
 80047f6:	f000 fae3 	bl	8004dc0 <__mcmp>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	dcb2      	bgt.n	8004764 <_dtoa_r+0xac4>
 80047fe:	d102      	bne.n	8004806 <_dtoa_r+0xb66>
 8004800:	9b02      	ldr	r3, [sp, #8]
 8004802:	07db      	lsls	r3, r3, #31
 8004804:	d4ae      	bmi.n	8004764 <_dtoa_r+0xac4>
 8004806:	463b      	mov	r3, r7
 8004808:	461f      	mov	r7, r3
 800480a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800480e:	2a30      	cmp	r2, #48	; 0x30
 8004810:	d0fa      	beq.n	8004808 <_dtoa_r+0xb68>
 8004812:	e6fb      	b.n	800460c <_dtoa_r+0x96c>
 8004814:	9a08      	ldr	r2, [sp, #32]
 8004816:	429a      	cmp	r2, r3
 8004818:	d1a5      	bne.n	8004766 <_dtoa_r+0xac6>
 800481a:	2331      	movs	r3, #49	; 0x31
 800481c:	f109 0901 	add.w	r9, r9, #1
 8004820:	7013      	strb	r3, [r2, #0]
 8004822:	e6f3      	b.n	800460c <_dtoa_r+0x96c>
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <_dtoa_r+0xbd4>)
 8004826:	f7ff baa7 	b.w	8003d78 <_dtoa_r+0xd8>
 800482a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f aa80 	bne.w	8003d32 <_dtoa_r+0x92>
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <_dtoa_r+0xbd8>)
 8004834:	f7ff baa0 	b.w	8003d78 <_dtoa_r+0xd8>
 8004838:	f1bb 0f00 	cmp.w	fp, #0
 800483c:	dc03      	bgt.n	8004846 <_dtoa_r+0xba6>
 800483e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004840:	2b02      	cmp	r3, #2
 8004842:	f73f aecc 	bgt.w	80045de <_dtoa_r+0x93e>
 8004846:	9f08      	ldr	r7, [sp, #32]
 8004848:	4621      	mov	r1, r4
 800484a:	4650      	mov	r0, sl
 800484c:	f7ff f99a 	bl	8003b84 <quorem>
 8004850:	9a08      	ldr	r2, [sp, #32]
 8004852:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004856:	f807 3b01 	strb.w	r3, [r7], #1
 800485a:	1aba      	subs	r2, r7, r2
 800485c:	4593      	cmp	fp, r2
 800485e:	ddb9      	ble.n	80047d4 <_dtoa_r+0xb34>
 8004860:	4651      	mov	r1, sl
 8004862:	2300      	movs	r3, #0
 8004864:	220a      	movs	r2, #10
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f892 	bl	8004990 <__multadd>
 800486c:	4682      	mov	sl, r0
 800486e:	e7eb      	b.n	8004848 <_dtoa_r+0xba8>
 8004870:	080060e3 	.word	0x080060e3
 8004874:	0800603c 	.word	0x0800603c
 8004878:	08006060 	.word	0x08006060

0800487c <_localeconv_r>:
 800487c:	4800      	ldr	r0, [pc, #0]	; (8004880 <_localeconv_r+0x4>)
 800487e:	4770      	bx	lr
 8004880:	20000160 	.word	0x20000160

08004884 <malloc>:
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <malloc+0xc>)
 8004886:	4601      	mov	r1, r0
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f000 bbfb 	b.w	8005084 <_malloc_r>
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c

08004894 <memchr>:
 8004894:	4603      	mov	r3, r0
 8004896:	b510      	push	{r4, lr}
 8004898:	b2c9      	uxtb	r1, r1
 800489a:	4402      	add	r2, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	d101      	bne.n	80048a6 <memchr+0x12>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e003      	b.n	80048ae <memchr+0x1a>
 80048a6:	7804      	ldrb	r4, [r0, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	428c      	cmp	r4, r1
 80048ac:	d1f6      	bne.n	800489c <memchr+0x8>
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <memcpy>:
 80048b0:	440a      	add	r2, r1
 80048b2:	4291      	cmp	r1, r2
 80048b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b8:	d100      	bne.n	80048bc <memcpy+0xc>
 80048ba:	4770      	bx	lr
 80048bc:	b510      	push	{r4, lr}
 80048be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c2:	4291      	cmp	r1, r2
 80048c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c8:	d1f9      	bne.n	80048be <memcpy+0xe>
 80048ca:	bd10      	pop	{r4, pc}

080048cc <_Balloc>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	b976      	cbnz	r6, 80048f4 <_Balloc+0x28>
 80048d6:	2010      	movs	r0, #16
 80048d8:	f7ff ffd4 	bl	8004884 <malloc>
 80048dc:	4602      	mov	r2, r0
 80048de:	6260      	str	r0, [r4, #36]	; 0x24
 80048e0:	b920      	cbnz	r0, 80048ec <_Balloc+0x20>
 80048e2:	2166      	movs	r1, #102	; 0x66
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <_Balloc+0x78>)
 80048e6:	4818      	ldr	r0, [pc, #96]	; (8004948 <_Balloc+0x7c>)
 80048e8:	f000 fd92 	bl	8005410 <__assert_func>
 80048ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048f0:	6006      	str	r6, [r0, #0]
 80048f2:	60c6      	str	r6, [r0, #12]
 80048f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048f6:	68f3      	ldr	r3, [r6, #12]
 80048f8:	b183      	cbz	r3, 800491c <_Balloc+0x50>
 80048fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004902:	b9b8      	cbnz	r0, 8004934 <_Balloc+0x68>
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f605 	lsl.w	r6, r1, r5
 800490a:	1d72      	adds	r2, r6, #5
 800490c:	4620      	mov	r0, r4
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	f000 fb5e 	bl	8004fd0 <_calloc_r>
 8004914:	b160      	cbz	r0, 8004930 <_Balloc+0x64>
 8004916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800491a:	e00e      	b.n	800493a <_Balloc+0x6e>
 800491c:	2221      	movs	r2, #33	; 0x21
 800491e:	2104      	movs	r1, #4
 8004920:	4620      	mov	r0, r4
 8004922:	f000 fb55 	bl	8004fd0 <_calloc_r>
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	60f0      	str	r0, [r6, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e4      	bne.n	80048fa <_Balloc+0x2e>
 8004930:	2000      	movs	r0, #0
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	6802      	ldr	r2, [r0, #0]
 8004936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800493a:	2300      	movs	r3, #0
 800493c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004940:	e7f7      	b.n	8004932 <_Balloc+0x66>
 8004942:	bf00      	nop
 8004944:	0800606d 	.word	0x0800606d
 8004948:	080060f4 	.word	0x080060f4

0800494c <_Bfree>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004950:	4605      	mov	r5, r0
 8004952:	460c      	mov	r4, r1
 8004954:	b976      	cbnz	r6, 8004974 <_Bfree+0x28>
 8004956:	2010      	movs	r0, #16
 8004958:	f7ff ff94 	bl	8004884 <malloc>
 800495c:	4602      	mov	r2, r0
 800495e:	6268      	str	r0, [r5, #36]	; 0x24
 8004960:	b920      	cbnz	r0, 800496c <_Bfree+0x20>
 8004962:	218a      	movs	r1, #138	; 0x8a
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <_Bfree+0x3c>)
 8004966:	4809      	ldr	r0, [pc, #36]	; (800498c <_Bfree+0x40>)
 8004968:	f000 fd52 	bl	8005410 <__assert_func>
 800496c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004970:	6006      	str	r6, [r0, #0]
 8004972:	60c6      	str	r6, [r0, #12]
 8004974:	b13c      	cbz	r4, 8004986 <_Bfree+0x3a>
 8004976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004978:	6862      	ldr	r2, [r4, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004980:	6021      	str	r1, [r4, #0]
 8004982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	0800606d 	.word	0x0800606d
 800498c:	080060f4 	.word	0x080060f4

08004990 <__multadd>:
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	4698      	mov	r8, r3
 8004996:	460c      	mov	r4, r1
 8004998:	2300      	movs	r3, #0
 800499a:	690e      	ldr	r6, [r1, #16]
 800499c:	4607      	mov	r7, r0
 800499e:	f101 0014 	add.w	r0, r1, #20
 80049a2:	6805      	ldr	r5, [r0, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	b2a9      	uxth	r1, r5
 80049a8:	fb02 8101 	mla	r1, r2, r1, r8
 80049ac:	0c2d      	lsrs	r5, r5, #16
 80049ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80049b2:	fb02 c505 	mla	r5, r2, r5, ip
 80049b6:	b289      	uxth	r1, r1
 80049b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80049bc:	429e      	cmp	r6, r3
 80049be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80049c2:	f840 1b04 	str.w	r1, [r0], #4
 80049c6:	dcec      	bgt.n	80049a2 <__multadd+0x12>
 80049c8:	f1b8 0f00 	cmp.w	r8, #0
 80049cc:	d022      	beq.n	8004a14 <__multadd+0x84>
 80049ce:	68a3      	ldr	r3, [r4, #8]
 80049d0:	42b3      	cmp	r3, r6
 80049d2:	dc19      	bgt.n	8004a08 <__multadd+0x78>
 80049d4:	6861      	ldr	r1, [r4, #4]
 80049d6:	4638      	mov	r0, r7
 80049d8:	3101      	adds	r1, #1
 80049da:	f7ff ff77 	bl	80048cc <_Balloc>
 80049de:	4605      	mov	r5, r0
 80049e0:	b928      	cbnz	r0, 80049ee <__multadd+0x5e>
 80049e2:	4602      	mov	r2, r0
 80049e4:	21b5      	movs	r1, #181	; 0xb5
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <__multadd+0x8c>)
 80049e8:	480d      	ldr	r0, [pc, #52]	; (8004a20 <__multadd+0x90>)
 80049ea:	f000 fd11 	bl	8005410 <__assert_func>
 80049ee:	6922      	ldr	r2, [r4, #16]
 80049f0:	f104 010c 	add.w	r1, r4, #12
 80049f4:	3202      	adds	r2, #2
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	300c      	adds	r0, #12
 80049fa:	f7ff ff59 	bl	80048b0 <memcpy>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7ff ffa3 	bl	800494c <_Bfree>
 8004a06:	462c      	mov	r4, r5
 8004a08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a0c:	3601      	adds	r6, #1
 8004a0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a12:	6126      	str	r6, [r4, #16]
 8004a14:	4620      	mov	r0, r4
 8004a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1a:	bf00      	nop
 8004a1c:	080060e3 	.word	0x080060e3
 8004a20:	080060f4 	.word	0x080060f4

08004a24 <__hi0bits>:
 8004a24:	0c02      	lsrs	r2, r0, #16
 8004a26:	0412      	lsls	r2, r2, #16
 8004a28:	4603      	mov	r3, r0
 8004a2a:	b9ca      	cbnz	r2, 8004a60 <__hi0bits+0x3c>
 8004a2c:	0403      	lsls	r3, r0, #16
 8004a2e:	2010      	movs	r0, #16
 8004a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004a34:	bf04      	itt	eq
 8004a36:	021b      	lsleq	r3, r3, #8
 8004a38:	3008      	addeq	r0, #8
 8004a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004a3e:	bf04      	itt	eq
 8004a40:	011b      	lsleq	r3, r3, #4
 8004a42:	3004      	addeq	r0, #4
 8004a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a48:	bf04      	itt	eq
 8004a4a:	009b      	lsleq	r3, r3, #2
 8004a4c:	3002      	addeq	r0, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db05      	blt.n	8004a5e <__hi0bits+0x3a>
 8004a52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a56:	f100 0001 	add.w	r0, r0, #1
 8004a5a:	bf08      	it	eq
 8004a5c:	2020      	moveq	r0, #32
 8004a5e:	4770      	bx	lr
 8004a60:	2000      	movs	r0, #0
 8004a62:	e7e5      	b.n	8004a30 <__hi0bits+0xc>

08004a64 <__lo0bits>:
 8004a64:	6803      	ldr	r3, [r0, #0]
 8004a66:	4602      	mov	r2, r0
 8004a68:	f013 0007 	ands.w	r0, r3, #7
 8004a6c:	d00b      	beq.n	8004a86 <__lo0bits+0x22>
 8004a6e:	07d9      	lsls	r1, r3, #31
 8004a70:	d422      	bmi.n	8004ab8 <__lo0bits+0x54>
 8004a72:	0798      	lsls	r0, r3, #30
 8004a74:	bf49      	itett	mi
 8004a76:	085b      	lsrmi	r3, r3, #1
 8004a78:	089b      	lsrpl	r3, r3, #2
 8004a7a:	2001      	movmi	r0, #1
 8004a7c:	6013      	strmi	r3, [r2, #0]
 8004a7e:	bf5c      	itt	pl
 8004a80:	2002      	movpl	r0, #2
 8004a82:	6013      	strpl	r3, [r2, #0]
 8004a84:	4770      	bx	lr
 8004a86:	b299      	uxth	r1, r3
 8004a88:	b909      	cbnz	r1, 8004a8e <__lo0bits+0x2a>
 8004a8a:	2010      	movs	r0, #16
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a92:	bf04      	itt	eq
 8004a94:	0a1b      	lsreq	r3, r3, #8
 8004a96:	3008      	addeq	r0, #8
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	bf04      	itt	eq
 8004a9c:	091b      	lsreq	r3, r3, #4
 8004a9e:	3004      	addeq	r0, #4
 8004aa0:	0799      	lsls	r1, r3, #30
 8004aa2:	bf04      	itt	eq
 8004aa4:	089b      	lsreq	r3, r3, #2
 8004aa6:	3002      	addeq	r0, #2
 8004aa8:	07d9      	lsls	r1, r3, #31
 8004aaa:	d403      	bmi.n	8004ab4 <__lo0bits+0x50>
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	f100 0001 	add.w	r0, r0, #1
 8004ab2:	d003      	beq.n	8004abc <__lo0bits+0x58>
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4770      	bx	lr
 8004ab8:	2000      	movs	r0, #0
 8004aba:	4770      	bx	lr
 8004abc:	2020      	movs	r0, #32
 8004abe:	4770      	bx	lr

08004ac0 <__i2b>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	f7ff ff01 	bl	80048cc <_Balloc>
 8004aca:	4602      	mov	r2, r0
 8004acc:	b928      	cbnz	r0, 8004ada <__i2b+0x1a>
 8004ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__i2b+0x24>)
 8004ad4:	4804      	ldr	r0, [pc, #16]	; (8004ae8 <__i2b+0x28>)
 8004ad6:	f000 fc9b 	bl	8005410 <__assert_func>
 8004ada:	2301      	movs	r3, #1
 8004adc:	6144      	str	r4, [r0, #20]
 8004ade:	6103      	str	r3, [r0, #16]
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	080060e3 	.word	0x080060e3
 8004ae8:	080060f4 	.word	0x080060f4

08004aec <__multiply>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	4614      	mov	r4, r2
 8004af2:	690a      	ldr	r2, [r1, #16]
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	460d      	mov	r5, r1
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bfbe      	ittt	lt
 8004afc:	460b      	movlt	r3, r1
 8004afe:	4625      	movlt	r5, r4
 8004b00:	461c      	movlt	r4, r3
 8004b02:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004b06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b0a:	68ab      	ldr	r3, [r5, #8]
 8004b0c:	6869      	ldr	r1, [r5, #4]
 8004b0e:	eb0a 0709 	add.w	r7, sl, r9
 8004b12:	42bb      	cmp	r3, r7
 8004b14:	b085      	sub	sp, #20
 8004b16:	bfb8      	it	lt
 8004b18:	3101      	addlt	r1, #1
 8004b1a:	f7ff fed7 	bl	80048cc <_Balloc>
 8004b1e:	b930      	cbnz	r0, 8004b2e <__multiply+0x42>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f240 115d 	movw	r1, #349	; 0x15d
 8004b26:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <__multiply+0x140>)
 8004b28:	4841      	ldr	r0, [pc, #260]	; (8004c30 <__multiply+0x144>)
 8004b2a:	f000 fc71 	bl	8005410 <__assert_func>
 8004b2e:	f100 0614 	add.w	r6, r0, #20
 8004b32:	4633      	mov	r3, r6
 8004b34:	2200      	movs	r2, #0
 8004b36:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b3a:	4543      	cmp	r3, r8
 8004b3c:	d31e      	bcc.n	8004b7c <__multiply+0x90>
 8004b3e:	f105 0c14 	add.w	ip, r5, #20
 8004b42:	f104 0314 	add.w	r3, r4, #20
 8004b46:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004b4a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004b4e:	9202      	str	r2, [sp, #8]
 8004b50:	ebac 0205 	sub.w	r2, ip, r5
 8004b54:	3a15      	subs	r2, #21
 8004b56:	f022 0203 	bic.w	r2, r2, #3
 8004b5a:	3204      	adds	r2, #4
 8004b5c:	f105 0115 	add.w	r1, r5, #21
 8004b60:	458c      	cmp	ip, r1
 8004b62:	bf38      	it	cc
 8004b64:	2204      	movcc	r2, #4
 8004b66:	9201      	str	r2, [sp, #4]
 8004b68:	9a02      	ldr	r2, [sp, #8]
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d808      	bhi.n	8004b82 <__multiply+0x96>
 8004b70:	2f00      	cmp	r7, #0
 8004b72:	dc55      	bgt.n	8004c20 <__multiply+0x134>
 8004b74:	6107      	str	r7, [r0, #16]
 8004b76:	b005      	add	sp, #20
 8004b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7c:	f843 2b04 	str.w	r2, [r3], #4
 8004b80:	e7db      	b.n	8004b3a <__multiply+0x4e>
 8004b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b86:	f1ba 0f00 	cmp.w	sl, #0
 8004b8a:	d020      	beq.n	8004bce <__multiply+0xe2>
 8004b8c:	46b1      	mov	r9, r6
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f105 0e14 	add.w	lr, r5, #20
 8004b94:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b98:	f8d9 b000 	ldr.w	fp, [r9]
 8004b9c:	b2a1      	uxth	r1, r4
 8004b9e:	fa1f fb8b 	uxth.w	fp, fp
 8004ba2:	fb0a b101 	mla	r1, sl, r1, fp
 8004ba6:	4411      	add	r1, r2
 8004ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8004bac:	0c24      	lsrs	r4, r4, #16
 8004bae:	0c12      	lsrs	r2, r2, #16
 8004bb0:	fb0a 2404 	mla	r4, sl, r4, r2
 8004bb4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004bb8:	b289      	uxth	r1, r1
 8004bba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004bbe:	45f4      	cmp	ip, lr
 8004bc0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004bc4:	f849 1b04 	str.w	r1, [r9], #4
 8004bc8:	d8e4      	bhi.n	8004b94 <__multiply+0xa8>
 8004bca:	9901      	ldr	r1, [sp, #4]
 8004bcc:	5072      	str	r2, [r6, r1]
 8004bce:	9a03      	ldr	r2, [sp, #12]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004bd6:	f1b9 0f00 	cmp.w	r9, #0
 8004bda:	d01f      	beq.n	8004c1c <__multiply+0x130>
 8004bdc:	46b6      	mov	lr, r6
 8004bde:	f04f 0a00 	mov.w	sl, #0
 8004be2:	6834      	ldr	r4, [r6, #0]
 8004be4:	f105 0114 	add.w	r1, r5, #20
 8004be8:	880a      	ldrh	r2, [r1, #0]
 8004bea:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004bee:	b2a4      	uxth	r4, r4
 8004bf0:	fb09 b202 	mla	r2, r9, r2, fp
 8004bf4:	4492      	add	sl, r2
 8004bf6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004bfa:	f84e 4b04 	str.w	r4, [lr], #4
 8004bfe:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c02:	f8be 2000 	ldrh.w	r2, [lr]
 8004c06:	0c24      	lsrs	r4, r4, #16
 8004c08:	fb09 2404 	mla	r4, r9, r4, r2
 8004c0c:	458c      	cmp	ip, r1
 8004c0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004c12:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c16:	d8e7      	bhi.n	8004be8 <__multiply+0xfc>
 8004c18:	9a01      	ldr	r2, [sp, #4]
 8004c1a:	50b4      	str	r4, [r6, r2]
 8004c1c:	3604      	adds	r6, #4
 8004c1e:	e7a3      	b.n	8004b68 <__multiply+0x7c>
 8004c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1a5      	bne.n	8004b74 <__multiply+0x88>
 8004c28:	3f01      	subs	r7, #1
 8004c2a:	e7a1      	b.n	8004b70 <__multiply+0x84>
 8004c2c:	080060e3 	.word	0x080060e3
 8004c30:	080060f4 	.word	0x080060f4

08004c34 <__pow5mult>:
 8004c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c38:	4615      	mov	r5, r2
 8004c3a:	f012 0203 	ands.w	r2, r2, #3
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460f      	mov	r7, r1
 8004c42:	d007      	beq.n	8004c54 <__pow5mult+0x20>
 8004c44:	4c25      	ldr	r4, [pc, #148]	; (8004cdc <__pow5mult+0xa8>)
 8004c46:	3a01      	subs	r2, #1
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c4e:	f7ff fe9f 	bl	8004990 <__multadd>
 8004c52:	4607      	mov	r7, r0
 8004c54:	10ad      	asrs	r5, r5, #2
 8004c56:	d03d      	beq.n	8004cd4 <__pow5mult+0xa0>
 8004c58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c5a:	b97c      	cbnz	r4, 8004c7c <__pow5mult+0x48>
 8004c5c:	2010      	movs	r0, #16
 8004c5e:	f7ff fe11 	bl	8004884 <malloc>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6270      	str	r0, [r6, #36]	; 0x24
 8004c66:	b928      	cbnz	r0, 8004c74 <__pow5mult+0x40>
 8004c68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <__pow5mult+0xac>)
 8004c6e:	481d      	ldr	r0, [pc, #116]	; (8004ce4 <__pow5mult+0xb0>)
 8004c70:	f000 fbce 	bl	8005410 <__assert_func>
 8004c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c78:	6004      	str	r4, [r0, #0]
 8004c7a:	60c4      	str	r4, [r0, #12]
 8004c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c84:	b94c      	cbnz	r4, 8004c9a <__pow5mult+0x66>
 8004c86:	f240 2171 	movw	r1, #625	; 0x271
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ff18 	bl	8004ac0 <__i2b>
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c98:	6003      	str	r3, [r0, #0]
 8004c9a:	f04f 0900 	mov.w	r9, #0
 8004c9e:	07eb      	lsls	r3, r5, #31
 8004ca0:	d50a      	bpl.n	8004cb8 <__pow5mult+0x84>
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7ff ff20 	bl	8004aec <__multiply>
 8004cac:	4680      	mov	r8, r0
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f7ff fe4b 	bl	800494c <_Bfree>
 8004cb6:	4647      	mov	r7, r8
 8004cb8:	106d      	asrs	r5, r5, #1
 8004cba:	d00b      	beq.n	8004cd4 <__pow5mult+0xa0>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	b938      	cbnz	r0, 8004cd0 <__pow5mult+0x9c>
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f7ff ff11 	bl	8004aec <__multiply>
 8004cca:	6020      	str	r0, [r4, #0]
 8004ccc:	f8c0 9000 	str.w	r9, [r0]
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	e7e4      	b.n	8004c9e <__pow5mult+0x6a>
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cda:	bf00      	nop
 8004cdc:	08006248 	.word	0x08006248
 8004ce0:	0800606d 	.word	0x0800606d
 8004ce4:	080060f4 	.word	0x080060f4

08004ce8 <__lshift>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	4607      	mov	r7, r0
 8004cf0:	4691      	mov	r9, r2
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6849      	ldr	r1, [r1, #4]
 8004cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d00:	f108 0601 	add.w	r6, r8, #1
 8004d04:	42b3      	cmp	r3, r6
 8004d06:	db0b      	blt.n	8004d20 <__lshift+0x38>
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff fddf 	bl	80048cc <_Balloc>
 8004d0e:	4605      	mov	r5, r0
 8004d10:	b948      	cbnz	r0, 8004d26 <__lshift+0x3e>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d18:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <__lshift+0xd0>)
 8004d1a:	4828      	ldr	r0, [pc, #160]	; (8004dbc <__lshift+0xd4>)
 8004d1c:	f000 fb78 	bl	8005410 <__assert_func>
 8004d20:	3101      	adds	r1, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	e7ee      	b.n	8004d04 <__lshift+0x1c>
 8004d26:	2300      	movs	r3, #0
 8004d28:	f100 0114 	add.w	r1, r0, #20
 8004d2c:	f100 0210 	add.w	r2, r0, #16
 8004d30:	4618      	mov	r0, r3
 8004d32:	4553      	cmp	r3, sl
 8004d34:	db33      	blt.n	8004d9e <__lshift+0xb6>
 8004d36:	6920      	ldr	r0, [r4, #16]
 8004d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d3c:	f104 0314 	add.w	r3, r4, #20
 8004d40:	f019 091f 	ands.w	r9, r9, #31
 8004d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d4c:	d02b      	beq.n	8004da6 <__lshift+0xbe>
 8004d4e:	468a      	mov	sl, r1
 8004d50:	2200      	movs	r2, #0
 8004d52:	f1c9 0e20 	rsb	lr, r9, #32
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	fa00 f009 	lsl.w	r0, r0, r9
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	f84a 2b04 	str.w	r2, [sl], #4
 8004d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d66:	459c      	cmp	ip, r3
 8004d68:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d6c:	d8f3      	bhi.n	8004d56 <__lshift+0x6e>
 8004d6e:	ebac 0304 	sub.w	r3, ip, r4
 8004d72:	3b15      	subs	r3, #21
 8004d74:	f023 0303 	bic.w	r3, r3, #3
 8004d78:	3304      	adds	r3, #4
 8004d7a:	f104 0015 	add.w	r0, r4, #21
 8004d7e:	4584      	cmp	ip, r0
 8004d80:	bf38      	it	cc
 8004d82:	2304      	movcc	r3, #4
 8004d84:	50ca      	str	r2, [r1, r3]
 8004d86:	b10a      	cbz	r2, 8004d8c <__lshift+0xa4>
 8004d88:	f108 0602 	add.w	r6, r8, #2
 8004d8c:	3e01      	subs	r6, #1
 8004d8e:	4638      	mov	r0, r7
 8004d90:	4621      	mov	r1, r4
 8004d92:	612e      	str	r6, [r5, #16]
 8004d94:	f7ff fdda 	bl	800494c <_Bfree>
 8004d98:	4628      	mov	r0, r5
 8004d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004da2:	3301      	adds	r3, #1
 8004da4:	e7c5      	b.n	8004d32 <__lshift+0x4a>
 8004da6:	3904      	subs	r1, #4
 8004da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dac:	459c      	cmp	ip, r3
 8004dae:	f841 2f04 	str.w	r2, [r1, #4]!
 8004db2:	d8f9      	bhi.n	8004da8 <__lshift+0xc0>
 8004db4:	e7ea      	b.n	8004d8c <__lshift+0xa4>
 8004db6:	bf00      	nop
 8004db8:	080060e3 	.word	0x080060e3
 8004dbc:	080060f4 	.word	0x080060f4

08004dc0 <__mcmp>:
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	690a      	ldr	r2, [r1, #16]
 8004dc4:	6900      	ldr	r0, [r0, #16]
 8004dc6:	b530      	push	{r4, r5, lr}
 8004dc8:	1a80      	subs	r0, r0, r2
 8004dca:	d10d      	bne.n	8004de8 <__mcmp+0x28>
 8004dcc:	3314      	adds	r3, #20
 8004dce:	3114      	adds	r1, #20
 8004dd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004dd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004de0:	4295      	cmp	r5, r2
 8004de2:	d002      	beq.n	8004dea <__mcmp+0x2a>
 8004de4:	d304      	bcc.n	8004df0 <__mcmp+0x30>
 8004de6:	2001      	movs	r0, #1
 8004de8:	bd30      	pop	{r4, r5, pc}
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	d3f4      	bcc.n	8004dd8 <__mcmp+0x18>
 8004dee:	e7fb      	b.n	8004de8 <__mcmp+0x28>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e7f8      	b.n	8004de8 <__mcmp+0x28>
	...

08004df8 <__mdiff>:
 8004df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4606      	mov	r6, r0
 8004e00:	4611      	mov	r1, r2
 8004e02:	4620      	mov	r0, r4
 8004e04:	4692      	mov	sl, r2
 8004e06:	f7ff ffdb 	bl	8004dc0 <__mcmp>
 8004e0a:	1e05      	subs	r5, r0, #0
 8004e0c:	d111      	bne.n	8004e32 <__mdiff+0x3a>
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fd5b 	bl	80048cc <_Balloc>
 8004e16:	4602      	mov	r2, r0
 8004e18:	b928      	cbnz	r0, 8004e26 <__mdiff+0x2e>
 8004e1a:	f240 2132 	movw	r1, #562	; 0x232
 8004e1e:	4b3c      	ldr	r3, [pc, #240]	; (8004f10 <__mdiff+0x118>)
 8004e20:	483c      	ldr	r0, [pc, #240]	; (8004f14 <__mdiff+0x11c>)
 8004e22:	f000 faf5 	bl	8005410 <__assert_func>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	bfa4      	itt	ge
 8004e34:	4653      	movge	r3, sl
 8004e36:	46a2      	movge	sl, r4
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004e3e:	bfa6      	itte	ge
 8004e40:	461c      	movge	r4, r3
 8004e42:	2500      	movge	r5, #0
 8004e44:	2501      	movlt	r5, #1
 8004e46:	f7ff fd41 	bl	80048cc <_Balloc>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	b918      	cbnz	r0, 8004e56 <__mdiff+0x5e>
 8004e4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e52:	4b2f      	ldr	r3, [pc, #188]	; (8004f10 <__mdiff+0x118>)
 8004e54:	e7e4      	b.n	8004e20 <__mdiff+0x28>
 8004e56:	f100 0814 	add.w	r8, r0, #20
 8004e5a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004e5e:	60c5      	str	r5, [r0, #12]
 8004e60:	f04f 0c00 	mov.w	ip, #0
 8004e64:	f10a 0514 	add.w	r5, sl, #20
 8004e68:	f10a 0010 	add.w	r0, sl, #16
 8004e6c:	46c2      	mov	sl, r8
 8004e6e:	6926      	ldr	r6, [r4, #16]
 8004e70:	f104 0914 	add.w	r9, r4, #20
 8004e74:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e7c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e84:	fa1f f18b 	uxth.w	r1, fp
 8004e88:	4461      	add	r1, ip
 8004e8a:	fa1f fc83 	uxth.w	ip, r3
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	eba1 010c 	sub.w	r1, r1, ip
 8004e94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004e9c:	b289      	uxth	r1, r1
 8004e9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ea2:	454e      	cmp	r6, r9
 8004ea4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ea8:	f84a 3b04 	str.w	r3, [sl], #4
 8004eac:	d8e6      	bhi.n	8004e7c <__mdiff+0x84>
 8004eae:	1b33      	subs	r3, r6, r4
 8004eb0:	3b15      	subs	r3, #21
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	3415      	adds	r4, #21
 8004eb8:	3304      	adds	r3, #4
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	bf38      	it	cc
 8004ebe:	2304      	movcc	r3, #4
 8004ec0:	441d      	add	r5, r3
 8004ec2:	4443      	add	r3, r8
 8004ec4:	461e      	mov	r6, r3
 8004ec6:	462c      	mov	r4, r5
 8004ec8:	4574      	cmp	r4, lr
 8004eca:	d30e      	bcc.n	8004eea <__mdiff+0xf2>
 8004ecc:	f10e 0103 	add.w	r1, lr, #3
 8004ed0:	1b49      	subs	r1, r1, r5
 8004ed2:	f021 0103 	bic.w	r1, r1, #3
 8004ed6:	3d03      	subs	r5, #3
 8004ed8:	45ae      	cmp	lr, r5
 8004eda:	bf38      	it	cc
 8004edc:	2100      	movcc	r1, #0
 8004ede:	4419      	add	r1, r3
 8004ee0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ee4:	b18b      	cbz	r3, 8004f0a <__mdiff+0x112>
 8004ee6:	6117      	str	r7, [r2, #16]
 8004ee8:	e7a0      	b.n	8004e2c <__mdiff+0x34>
 8004eea:	f854 8b04 	ldr.w	r8, [r4], #4
 8004eee:	fa1f f188 	uxth.w	r1, r8
 8004ef2:	4461      	add	r1, ip
 8004ef4:	1408      	asrs	r0, r1, #16
 8004ef6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004efa:	b289      	uxth	r1, r1
 8004efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f04:	f846 1b04 	str.w	r1, [r6], #4
 8004f08:	e7de      	b.n	8004ec8 <__mdiff+0xd0>
 8004f0a:	3f01      	subs	r7, #1
 8004f0c:	e7e8      	b.n	8004ee0 <__mdiff+0xe8>
 8004f0e:	bf00      	nop
 8004f10:	080060e3 	.word	0x080060e3
 8004f14:	080060f4 	.word	0x080060f4

08004f18 <__d2b>:
 8004f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004f22:	4690      	mov	r8, r2
 8004f24:	461d      	mov	r5, r3
 8004f26:	f7ff fcd1 	bl	80048cc <_Balloc>
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	b930      	cbnz	r0, 8004f3c <__d2b+0x24>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	f240 310a 	movw	r1, #778	; 0x30a
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <__d2b+0xb0>)
 8004f36:	4825      	ldr	r0, [pc, #148]	; (8004fcc <__d2b+0xb4>)
 8004f38:	f000 fa6a 	bl	8005410 <__assert_func>
 8004f3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004f40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004f44:	bb2d      	cbnz	r5, 8004f92 <__d2b+0x7a>
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	f1b8 0300 	subs.w	r3, r8, #0
 8004f4c:	d026      	beq.n	8004f9c <__d2b+0x84>
 8004f4e:	4668      	mov	r0, sp
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	f7ff fd87 	bl	8004a64 <__lo0bits>
 8004f56:	9900      	ldr	r1, [sp, #0]
 8004f58:	b1f0      	cbz	r0, 8004f98 <__d2b+0x80>
 8004f5a:	9a01      	ldr	r2, [sp, #4]
 8004f5c:	f1c0 0320 	rsb	r3, r0, #32
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	430b      	orrs	r3, r1
 8004f66:	40c2      	lsrs	r2, r0
 8004f68:	6163      	str	r3, [r4, #20]
 8004f6a:	9201      	str	r2, [sp, #4]
 8004f6c:	9b01      	ldr	r3, [sp, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2102      	movne	r1, #2
 8004f74:	2101      	moveq	r1, #1
 8004f76:	61a3      	str	r3, [r4, #24]
 8004f78:	6121      	str	r1, [r4, #16]
 8004f7a:	b1c5      	cbz	r5, 8004fae <__d2b+0x96>
 8004f7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f80:	4405      	add	r5, r0
 8004f82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f86:	603d      	str	r5, [r7, #0]
 8004f88:	6030      	str	r0, [r6, #0]
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	b002      	add	sp, #8
 8004f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f96:	e7d6      	b.n	8004f46 <__d2b+0x2e>
 8004f98:	6161      	str	r1, [r4, #20]
 8004f9a:	e7e7      	b.n	8004f6c <__d2b+0x54>
 8004f9c:	a801      	add	r0, sp, #4
 8004f9e:	f7ff fd61 	bl	8004a64 <__lo0bits>
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	9b01      	ldr	r3, [sp, #4]
 8004fa6:	6121      	str	r1, [r4, #16]
 8004fa8:	6163      	str	r3, [r4, #20]
 8004faa:	3020      	adds	r0, #32
 8004fac:	e7e5      	b.n	8004f7a <__d2b+0x62>
 8004fae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004fb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fb6:	6038      	str	r0, [r7, #0]
 8004fb8:	6918      	ldr	r0, [r3, #16]
 8004fba:	f7ff fd33 	bl	8004a24 <__hi0bits>
 8004fbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004fc2:	6031      	str	r1, [r6, #0]
 8004fc4:	e7e1      	b.n	8004f8a <__d2b+0x72>
 8004fc6:	bf00      	nop
 8004fc8:	080060e3 	.word	0x080060e3
 8004fcc:	080060f4 	.word	0x080060f4

08004fd0 <_calloc_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	fb02 f501 	mul.w	r5, r2, r1
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f000 f854 	bl	8005084 <_malloc_r>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	b118      	cbz	r0, 8004fe8 <_calloc_r+0x18>
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f7fe f946 	bl	8003274 <memset>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	bd38      	pop	{r3, r4, r5, pc}

08004fec <_free_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d043      	beq.n	800507c <_free_r+0x90>
 8004ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bfb8      	it	lt
 8004ffe:	18e4      	addlt	r4, r4, r3
 8005000:	f000 fa62 	bl	80054c8 <__malloc_lock>
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <_free_r+0x94>)
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	4610      	mov	r0, r2
 800500a:	b933      	cbnz	r3, 800501a <_free_r+0x2e>
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	6014      	str	r4, [r2, #0]
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005016:	f000 ba5d 	b.w	80054d4 <__malloc_unlock>
 800501a:	42a3      	cmp	r3, r4
 800501c:	d90a      	bls.n	8005034 <_free_r+0x48>
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	1862      	adds	r2, r4, r1
 8005022:	4293      	cmp	r3, r2
 8005024:	bf01      	itttt	eq
 8005026:	681a      	ldreq	r2, [r3, #0]
 8005028:	685b      	ldreq	r3, [r3, #4]
 800502a:	1852      	addeq	r2, r2, r1
 800502c:	6022      	streq	r2, [r4, #0]
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	6004      	str	r4, [r0, #0]
 8005032:	e7ed      	b.n	8005010 <_free_r+0x24>
 8005034:	461a      	mov	r2, r3
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	b10b      	cbz	r3, 800503e <_free_r+0x52>
 800503a:	42a3      	cmp	r3, r4
 800503c:	d9fa      	bls.n	8005034 <_free_r+0x48>
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	1850      	adds	r0, r2, r1
 8005042:	42a0      	cmp	r0, r4
 8005044:	d10b      	bne.n	800505e <_free_r+0x72>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	4401      	add	r1, r0
 800504a:	1850      	adds	r0, r2, r1
 800504c:	4283      	cmp	r3, r0
 800504e:	6011      	str	r1, [r2, #0]
 8005050:	d1de      	bne.n	8005010 <_free_r+0x24>
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4401      	add	r1, r0
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7d8      	b.n	8005010 <_free_r+0x24>
 800505e:	d902      	bls.n	8005066 <_free_r+0x7a>
 8005060:	230c      	movs	r3, #12
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	e7d4      	b.n	8005010 <_free_r+0x24>
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1821      	adds	r1, r4, r0
 800506a:	428b      	cmp	r3, r1
 800506c:	bf01      	itttt	eq
 800506e:	6819      	ldreq	r1, [r3, #0]
 8005070:	685b      	ldreq	r3, [r3, #4]
 8005072:	1809      	addeq	r1, r1, r0
 8005074:	6021      	streq	r1, [r4, #0]
 8005076:	6063      	str	r3, [r4, #4]
 8005078:	6054      	str	r4, [r2, #4]
 800507a:	e7c9      	b.n	8005010 <_free_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	bf00      	nop
 8005080:	20000234 	.word	0x20000234

08005084 <_malloc_r>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	1ccd      	adds	r5, r1, #3
 8005088:	f025 0503 	bic.w	r5, r5, #3
 800508c:	3508      	adds	r5, #8
 800508e:	2d0c      	cmp	r5, #12
 8005090:	bf38      	it	cc
 8005092:	250c      	movcc	r5, #12
 8005094:	2d00      	cmp	r5, #0
 8005096:	4606      	mov	r6, r0
 8005098:	db01      	blt.n	800509e <_malloc_r+0x1a>
 800509a:	42a9      	cmp	r1, r5
 800509c:	d903      	bls.n	80050a6 <_malloc_r+0x22>
 800509e:	230c      	movs	r3, #12
 80050a0:	6033      	str	r3, [r6, #0]
 80050a2:	2000      	movs	r0, #0
 80050a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a6:	f000 fa0f 	bl	80054c8 <__malloc_lock>
 80050aa:	4921      	ldr	r1, [pc, #132]	; (8005130 <_malloc_r+0xac>)
 80050ac:	680a      	ldr	r2, [r1, #0]
 80050ae:	4614      	mov	r4, r2
 80050b0:	b99c      	cbnz	r4, 80050da <_malloc_r+0x56>
 80050b2:	4f20      	ldr	r7, [pc, #128]	; (8005134 <_malloc_r+0xb0>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b923      	cbnz	r3, 80050c2 <_malloc_r+0x3e>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 f998 	bl	80053f0 <_sbrk_r>
 80050c0:	6038      	str	r0, [r7, #0]
 80050c2:	4629      	mov	r1, r5
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f993 	bl	80053f0 <_sbrk_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d123      	bne.n	8005116 <_malloc_r+0x92>
 80050ce:	230c      	movs	r3, #12
 80050d0:	4630      	mov	r0, r6
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f000 f9fe 	bl	80054d4 <__malloc_unlock>
 80050d8:	e7e3      	b.n	80050a2 <_malloc_r+0x1e>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	1b5b      	subs	r3, r3, r5
 80050de:	d417      	bmi.n	8005110 <_malloc_r+0x8c>
 80050e0:	2b0b      	cmp	r3, #11
 80050e2:	d903      	bls.n	80050ec <_malloc_r+0x68>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	441c      	add	r4, r3
 80050e8:	6025      	str	r5, [r4, #0]
 80050ea:	e004      	b.n	80050f6 <_malloc_r+0x72>
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	42a2      	cmp	r2, r4
 80050f0:	bf0c      	ite	eq
 80050f2:	600b      	streq	r3, [r1, #0]
 80050f4:	6053      	strne	r3, [r2, #4]
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 f9ec 	bl	80054d4 <__malloc_unlock>
 80050fc:	f104 000b 	add.w	r0, r4, #11
 8005100:	1d23      	adds	r3, r4, #4
 8005102:	f020 0007 	bic.w	r0, r0, #7
 8005106:	1ac2      	subs	r2, r0, r3
 8005108:	d0cc      	beq.n	80050a4 <_malloc_r+0x20>
 800510a:	1a1b      	subs	r3, r3, r0
 800510c:	50a3      	str	r3, [r4, r2]
 800510e:	e7c9      	b.n	80050a4 <_malloc_r+0x20>
 8005110:	4622      	mov	r2, r4
 8005112:	6864      	ldr	r4, [r4, #4]
 8005114:	e7cc      	b.n	80050b0 <_malloc_r+0x2c>
 8005116:	1cc4      	adds	r4, r0, #3
 8005118:	f024 0403 	bic.w	r4, r4, #3
 800511c:	42a0      	cmp	r0, r4
 800511e:	d0e3      	beq.n	80050e8 <_malloc_r+0x64>
 8005120:	1a21      	subs	r1, r4, r0
 8005122:	4630      	mov	r0, r6
 8005124:	f000 f964 	bl	80053f0 <_sbrk_r>
 8005128:	3001      	adds	r0, #1
 800512a:	d1dd      	bne.n	80050e8 <_malloc_r+0x64>
 800512c:	e7cf      	b.n	80050ce <_malloc_r+0x4a>
 800512e:	bf00      	nop
 8005130:	20000234 	.word	0x20000234
 8005134:	20000238 	.word	0x20000238

08005138 <__ssputs_r>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	688e      	ldr	r6, [r1, #8]
 800513e:	4682      	mov	sl, r0
 8005140:	429e      	cmp	r6, r3
 8005142:	460c      	mov	r4, r1
 8005144:	4690      	mov	r8, r2
 8005146:	461f      	mov	r7, r3
 8005148:	d838      	bhi.n	80051bc <__ssputs_r+0x84>
 800514a:	898a      	ldrh	r2, [r1, #12]
 800514c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005150:	d032      	beq.n	80051b8 <__ssputs_r+0x80>
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	6909      	ldr	r1, [r1, #16]
 8005156:	3301      	adds	r3, #1
 8005158:	eba5 0901 	sub.w	r9, r5, r1
 800515c:	6965      	ldr	r5, [r4, #20]
 800515e:	444b      	add	r3, r9
 8005160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005168:	106d      	asrs	r5, r5, #1
 800516a:	429d      	cmp	r5, r3
 800516c:	bf38      	it	cc
 800516e:	461d      	movcc	r5, r3
 8005170:	0553      	lsls	r3, r2, #21
 8005172:	d531      	bpl.n	80051d8 <__ssputs_r+0xa0>
 8005174:	4629      	mov	r1, r5
 8005176:	f7ff ff85 	bl	8005084 <_malloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	b950      	cbnz	r0, 8005194 <__ssputs_r+0x5c>
 800517e:	230c      	movs	r3, #12
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	f8ca 3000 	str.w	r3, [sl]
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005194:	464a      	mov	r2, r9
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	f7ff fb8a 	bl	80048b0 <memcpy>
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	6126      	str	r6, [r4, #16]
 80051aa:	444e      	add	r6, r9
 80051ac:	6026      	str	r6, [r4, #0]
 80051ae:	463e      	mov	r6, r7
 80051b0:	6165      	str	r5, [r4, #20]
 80051b2:	eba5 0509 	sub.w	r5, r5, r9
 80051b6:	60a5      	str	r5, [r4, #8]
 80051b8:	42be      	cmp	r6, r7
 80051ba:	d900      	bls.n	80051be <__ssputs_r+0x86>
 80051bc:	463e      	mov	r6, r7
 80051be:	4632      	mov	r2, r6
 80051c0:	4641      	mov	r1, r8
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	f000 f966 	bl	8005494 <memmove>
 80051c8:	68a3      	ldr	r3, [r4, #8]
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	4432      	add	r2, r6
 80051d0:	2000      	movs	r0, #0
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	e7db      	b.n	8005190 <__ssputs_r+0x58>
 80051d8:	462a      	mov	r2, r5
 80051da:	f000 f981 	bl	80054e0 <_realloc_r>
 80051de:	4606      	mov	r6, r0
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d1e1      	bne.n	80051a8 <__ssputs_r+0x70>
 80051e4:	4650      	mov	r0, sl
 80051e6:	6921      	ldr	r1, [r4, #16]
 80051e8:	f7ff ff00 	bl	8004fec <_free_r>
 80051ec:	e7c7      	b.n	800517e <__ssputs_r+0x46>
	...

080051f0 <_svfiprintf_r>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	4698      	mov	r8, r3
 80051f6:	898b      	ldrh	r3, [r1, #12]
 80051f8:	4607      	mov	r7, r0
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	460d      	mov	r5, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	b09d      	sub	sp, #116	; 0x74
 8005202:	d50e      	bpl.n	8005222 <_svfiprintf_r+0x32>
 8005204:	690b      	ldr	r3, [r1, #16]
 8005206:	b963      	cbnz	r3, 8005222 <_svfiprintf_r+0x32>
 8005208:	2140      	movs	r1, #64	; 0x40
 800520a:	f7ff ff3b 	bl	8005084 <_malloc_r>
 800520e:	6028      	str	r0, [r5, #0]
 8005210:	6128      	str	r0, [r5, #16]
 8005212:	b920      	cbnz	r0, 800521e <_svfiprintf_r+0x2e>
 8005214:	230c      	movs	r3, #12
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e0d1      	b.n	80053c2 <_svfiprintf_r+0x1d2>
 800521e:	2340      	movs	r3, #64	; 0x40
 8005220:	616b      	str	r3, [r5, #20]
 8005222:	2300      	movs	r3, #0
 8005224:	9309      	str	r3, [sp, #36]	; 0x24
 8005226:	2320      	movs	r3, #32
 8005228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800522c:	2330      	movs	r3, #48	; 0x30
 800522e:	f04f 0901 	mov.w	r9, #1
 8005232:	f8cd 800c 	str.w	r8, [sp, #12]
 8005236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053dc <_svfiprintf_r+0x1ec>
 800523a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800523e:	4623      	mov	r3, r4
 8005240:	469a      	mov	sl, r3
 8005242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005246:	b10a      	cbz	r2, 800524c <_svfiprintf_r+0x5c>
 8005248:	2a25      	cmp	r2, #37	; 0x25
 800524a:	d1f9      	bne.n	8005240 <_svfiprintf_r+0x50>
 800524c:	ebba 0b04 	subs.w	fp, sl, r4
 8005250:	d00b      	beq.n	800526a <_svfiprintf_r+0x7a>
 8005252:	465b      	mov	r3, fp
 8005254:	4622      	mov	r2, r4
 8005256:	4629      	mov	r1, r5
 8005258:	4638      	mov	r0, r7
 800525a:	f7ff ff6d 	bl	8005138 <__ssputs_r>
 800525e:	3001      	adds	r0, #1
 8005260:	f000 80aa 	beq.w	80053b8 <_svfiprintf_r+0x1c8>
 8005264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005266:	445a      	add	r2, fp
 8005268:	9209      	str	r2, [sp, #36]	; 0x24
 800526a:	f89a 3000 	ldrb.w	r3, [sl]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80a2 	beq.w	80053b8 <_svfiprintf_r+0x1c8>
 8005274:	2300      	movs	r3, #0
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800527e:	f10a 0a01 	add.w	sl, sl, #1
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	9307      	str	r3, [sp, #28]
 8005286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800528a:	931a      	str	r3, [sp, #104]	; 0x68
 800528c:	4654      	mov	r4, sl
 800528e:	2205      	movs	r2, #5
 8005290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005294:	4851      	ldr	r0, [pc, #324]	; (80053dc <_svfiprintf_r+0x1ec>)
 8005296:	f7ff fafd 	bl	8004894 <memchr>
 800529a:	9a04      	ldr	r2, [sp, #16]
 800529c:	b9d8      	cbnz	r0, 80052d6 <_svfiprintf_r+0xe6>
 800529e:	06d0      	lsls	r0, r2, #27
 80052a0:	bf44      	itt	mi
 80052a2:	2320      	movmi	r3, #32
 80052a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a8:	0711      	lsls	r1, r2, #28
 80052aa:	bf44      	itt	mi
 80052ac:	232b      	movmi	r3, #43	; 0x2b
 80052ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b2:	f89a 3000 	ldrb.w	r3, [sl]
 80052b6:	2b2a      	cmp	r3, #42	; 0x2a
 80052b8:	d015      	beq.n	80052e6 <_svfiprintf_r+0xf6>
 80052ba:	4654      	mov	r4, sl
 80052bc:	2000      	movs	r0, #0
 80052be:	f04f 0c0a 	mov.w	ip, #10
 80052c2:	9a07      	ldr	r2, [sp, #28]
 80052c4:	4621      	mov	r1, r4
 80052c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ca:	3b30      	subs	r3, #48	; 0x30
 80052cc:	2b09      	cmp	r3, #9
 80052ce:	d94e      	bls.n	800536e <_svfiprintf_r+0x17e>
 80052d0:	b1b0      	cbz	r0, 8005300 <_svfiprintf_r+0x110>
 80052d2:	9207      	str	r2, [sp, #28]
 80052d4:	e014      	b.n	8005300 <_svfiprintf_r+0x110>
 80052d6:	eba0 0308 	sub.w	r3, r0, r8
 80052da:	fa09 f303 	lsl.w	r3, r9, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	46a2      	mov	sl, r4
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	e7d2      	b.n	800528c <_svfiprintf_r+0x9c>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	1d19      	adds	r1, r3, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	9103      	str	r1, [sp, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfbb      	ittet	lt
 80052f2:	425b      	neglt	r3, r3
 80052f4:	f042 0202 	orrlt.w	r2, r2, #2
 80052f8:	9307      	strge	r3, [sp, #28]
 80052fa:	9307      	strlt	r3, [sp, #28]
 80052fc:	bfb8      	it	lt
 80052fe:	9204      	strlt	r2, [sp, #16]
 8005300:	7823      	ldrb	r3, [r4, #0]
 8005302:	2b2e      	cmp	r3, #46	; 0x2e
 8005304:	d10c      	bne.n	8005320 <_svfiprintf_r+0x130>
 8005306:	7863      	ldrb	r3, [r4, #1]
 8005308:	2b2a      	cmp	r3, #42	; 0x2a
 800530a:	d135      	bne.n	8005378 <_svfiprintf_r+0x188>
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	3402      	adds	r4, #2
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	9203      	str	r2, [sp, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfb8      	it	lt
 800531a:	f04f 33ff 	movlt.w	r3, #4294967295
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053ec <_svfiprintf_r+0x1fc>
 8005324:	2203      	movs	r2, #3
 8005326:	4650      	mov	r0, sl
 8005328:	7821      	ldrb	r1, [r4, #0]
 800532a:	f7ff fab3 	bl	8004894 <memchr>
 800532e:	b140      	cbz	r0, 8005342 <_svfiprintf_r+0x152>
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	eba0 000a 	sub.w	r0, r0, sl
 8005336:	fa03 f000 	lsl.w	r0, r3, r0
 800533a:	9b04      	ldr	r3, [sp, #16]
 800533c:	3401      	adds	r4, #1
 800533e:	4303      	orrs	r3, r0
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005346:	2206      	movs	r2, #6
 8005348:	4825      	ldr	r0, [pc, #148]	; (80053e0 <_svfiprintf_r+0x1f0>)
 800534a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800534e:	f7ff faa1 	bl	8004894 <memchr>
 8005352:	2800      	cmp	r0, #0
 8005354:	d038      	beq.n	80053c8 <_svfiprintf_r+0x1d8>
 8005356:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <_svfiprintf_r+0x1f4>)
 8005358:	bb1b      	cbnz	r3, 80053a2 <_svfiprintf_r+0x1b2>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	3307      	adds	r3, #7
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	3308      	adds	r3, #8
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005368:	4433      	add	r3, r6
 800536a:	9309      	str	r3, [sp, #36]	; 0x24
 800536c:	e767      	b.n	800523e <_svfiprintf_r+0x4e>
 800536e:	460c      	mov	r4, r1
 8005370:	2001      	movs	r0, #1
 8005372:	fb0c 3202 	mla	r2, ip, r2, r3
 8005376:	e7a5      	b.n	80052c4 <_svfiprintf_r+0xd4>
 8005378:	2300      	movs	r3, #0
 800537a:	f04f 0c0a 	mov.w	ip, #10
 800537e:	4619      	mov	r1, r3
 8005380:	3401      	adds	r4, #1
 8005382:	9305      	str	r3, [sp, #20]
 8005384:	4620      	mov	r0, r4
 8005386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538a:	3a30      	subs	r2, #48	; 0x30
 800538c:	2a09      	cmp	r2, #9
 800538e:	d903      	bls.n	8005398 <_svfiprintf_r+0x1a8>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0c5      	beq.n	8005320 <_svfiprintf_r+0x130>
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	e7c3      	b.n	8005320 <_svfiprintf_r+0x130>
 8005398:	4604      	mov	r4, r0
 800539a:	2301      	movs	r3, #1
 800539c:	fb0c 2101 	mla	r1, ip, r1, r2
 80053a0:	e7f0      	b.n	8005384 <_svfiprintf_r+0x194>
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <_svfiprintf_r+0x1f8>)
 80053ac:	a904      	add	r1, sp, #16
 80053ae:	f7fe f807 	bl	80033c0 <_printf_float>
 80053b2:	1c42      	adds	r2, r0, #1
 80053b4:	4606      	mov	r6, r0
 80053b6:	d1d6      	bne.n	8005366 <_svfiprintf_r+0x176>
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	065b      	lsls	r3, r3, #25
 80053bc:	f53f af2c 	bmi.w	8005218 <_svfiprintf_r+0x28>
 80053c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053c2:	b01d      	add	sp, #116	; 0x74
 80053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c8:	ab03      	add	r3, sp, #12
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	462a      	mov	r2, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <_svfiprintf_r+0x1f8>)
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	f7fe fa90 	bl	80038f8 <_printf_i>
 80053d8:	e7eb      	b.n	80053b2 <_svfiprintf_r+0x1c2>
 80053da:	bf00      	nop
 80053dc:	08006254 	.word	0x08006254
 80053e0:	0800625e 	.word	0x0800625e
 80053e4:	080033c1 	.word	0x080033c1
 80053e8:	08005139 	.word	0x08005139
 80053ec:	0800625a 	.word	0x0800625a

080053f0 <_sbrk_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	2300      	movs	r3, #0
 80053f4:	4d05      	ldr	r5, [pc, #20]	; (800540c <_sbrk_r+0x1c>)
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fc fba4 	bl	8001b48 <_sbrk>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_sbrk_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_sbrk_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200002cc 	.word	0x200002cc

08005410 <__assert_func>:
 8005410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005412:	4614      	mov	r4, r2
 8005414:	461a      	mov	r2, r3
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <__assert_func+0x2c>)
 8005418:	4605      	mov	r5, r0
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68d8      	ldr	r0, [r3, #12]
 800541e:	b14c      	cbz	r4, 8005434 <__assert_func+0x24>
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <__assert_func+0x30>)
 8005422:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005426:	9100      	str	r1, [sp, #0]
 8005428:	462b      	mov	r3, r5
 800542a:	4906      	ldr	r1, [pc, #24]	; (8005444 <__assert_func+0x34>)
 800542c:	f000 f80e 	bl	800544c <fiprintf>
 8005430:	f000 faa2 	bl	8005978 <abort>
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <__assert_func+0x38>)
 8005436:	461c      	mov	r4, r3
 8005438:	e7f3      	b.n	8005422 <__assert_func+0x12>
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c
 8005440:	08006265 	.word	0x08006265
 8005444:	08006272 	.word	0x08006272
 8005448:	080062a0 	.word	0x080062a0

0800544c <fiprintf>:
 800544c:	b40e      	push	{r1, r2, r3}
 800544e:	b503      	push	{r0, r1, lr}
 8005450:	4601      	mov	r1, r0
 8005452:	ab03      	add	r3, sp, #12
 8005454:	4805      	ldr	r0, [pc, #20]	; (800546c <fiprintf+0x20>)
 8005456:	f853 2b04 	ldr.w	r2, [r3], #4
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	f000 f88d 	bl	800557c <_vfiprintf_r>
 8005462:	b002      	add	sp, #8
 8005464:	f85d eb04 	ldr.w	lr, [sp], #4
 8005468:	b003      	add	sp, #12
 800546a:	4770      	bx	lr
 800546c:	2000000c 	.word	0x2000000c

08005470 <__ascii_mbtowc>:
 8005470:	b082      	sub	sp, #8
 8005472:	b901      	cbnz	r1, 8005476 <__ascii_mbtowc+0x6>
 8005474:	a901      	add	r1, sp, #4
 8005476:	b142      	cbz	r2, 800548a <__ascii_mbtowc+0x1a>
 8005478:	b14b      	cbz	r3, 800548e <__ascii_mbtowc+0x1e>
 800547a:	7813      	ldrb	r3, [r2, #0]
 800547c:	600b      	str	r3, [r1, #0]
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	1e10      	subs	r0, r2, #0
 8005482:	bf18      	it	ne
 8005484:	2001      	movne	r0, #1
 8005486:	b002      	add	sp, #8
 8005488:	4770      	bx	lr
 800548a:	4610      	mov	r0, r2
 800548c:	e7fb      	b.n	8005486 <__ascii_mbtowc+0x16>
 800548e:	f06f 0001 	mvn.w	r0, #1
 8005492:	e7f8      	b.n	8005486 <__ascii_mbtowc+0x16>

08005494 <memmove>:
 8005494:	4288      	cmp	r0, r1
 8005496:	b510      	push	{r4, lr}
 8005498:	eb01 0402 	add.w	r4, r1, r2
 800549c:	d902      	bls.n	80054a4 <memmove+0x10>
 800549e:	4284      	cmp	r4, r0
 80054a0:	4623      	mov	r3, r4
 80054a2:	d807      	bhi.n	80054b4 <memmove+0x20>
 80054a4:	1e43      	subs	r3, r0, #1
 80054a6:	42a1      	cmp	r1, r4
 80054a8:	d008      	beq.n	80054bc <memmove+0x28>
 80054aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054b2:	e7f8      	b.n	80054a6 <memmove+0x12>
 80054b4:	4601      	mov	r1, r0
 80054b6:	4402      	add	r2, r0
 80054b8:	428a      	cmp	r2, r1
 80054ba:	d100      	bne.n	80054be <memmove+0x2a>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054c6:	e7f7      	b.n	80054b8 <memmove+0x24>

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_lock+0x8>)
 80054ca:	f000 bc15 	b.w	8005cf8 <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	200002d4 	.word	0x200002d4

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	; (80054dc <__malloc_unlock+0x8>)
 80054d6:	f000 bc10 	b.w	8005cfa <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	200002d4 	.word	0x200002d4

080054e0 <_realloc_r>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	4607      	mov	r7, r0
 80054e4:	4614      	mov	r4, r2
 80054e6:	460e      	mov	r6, r1
 80054e8:	b921      	cbnz	r1, 80054f4 <_realloc_r+0x14>
 80054ea:	4611      	mov	r1, r2
 80054ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054f0:	f7ff bdc8 	b.w	8005084 <_malloc_r>
 80054f4:	b922      	cbnz	r2, 8005500 <_realloc_r+0x20>
 80054f6:	f7ff fd79 	bl	8004fec <_free_r>
 80054fa:	4625      	mov	r5, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005500:	f000 fc60 	bl	8005dc4 <_malloc_usable_size_r>
 8005504:	42a0      	cmp	r0, r4
 8005506:	d20f      	bcs.n	8005528 <_realloc_r+0x48>
 8005508:	4621      	mov	r1, r4
 800550a:	4638      	mov	r0, r7
 800550c:	f7ff fdba 	bl	8005084 <_malloc_r>
 8005510:	4605      	mov	r5, r0
 8005512:	2800      	cmp	r0, #0
 8005514:	d0f2      	beq.n	80054fc <_realloc_r+0x1c>
 8005516:	4631      	mov	r1, r6
 8005518:	4622      	mov	r2, r4
 800551a:	f7ff f9c9 	bl	80048b0 <memcpy>
 800551e:	4631      	mov	r1, r6
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff fd63 	bl	8004fec <_free_r>
 8005526:	e7e9      	b.n	80054fc <_realloc_r+0x1c>
 8005528:	4635      	mov	r5, r6
 800552a:	e7e7      	b.n	80054fc <_realloc_r+0x1c>

0800552c <__sfputc_r>:
 800552c:	6893      	ldr	r3, [r2, #8]
 800552e:	b410      	push	{r4}
 8005530:	3b01      	subs	r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	6093      	str	r3, [r2, #8]
 8005536:	da07      	bge.n	8005548 <__sfputc_r+0x1c>
 8005538:	6994      	ldr	r4, [r2, #24]
 800553a:	42a3      	cmp	r3, r4
 800553c:	db01      	blt.n	8005542 <__sfputc_r+0x16>
 800553e:	290a      	cmp	r1, #10
 8005540:	d102      	bne.n	8005548 <__sfputc_r+0x1c>
 8005542:	bc10      	pop	{r4}
 8005544:	f000 b94a 	b.w	80057dc <__swbuf_r>
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	1c58      	adds	r0, r3, #1
 800554c:	6010      	str	r0, [r2, #0]
 800554e:	7019      	strb	r1, [r3, #0]
 8005550:	4608      	mov	r0, r1
 8005552:	bc10      	pop	{r4}
 8005554:	4770      	bx	lr

08005556 <__sfputs_r>:
 8005556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005558:	4606      	mov	r6, r0
 800555a:	460f      	mov	r7, r1
 800555c:	4614      	mov	r4, r2
 800555e:	18d5      	adds	r5, r2, r3
 8005560:	42ac      	cmp	r4, r5
 8005562:	d101      	bne.n	8005568 <__sfputs_r+0x12>
 8005564:	2000      	movs	r0, #0
 8005566:	e007      	b.n	8005578 <__sfputs_r+0x22>
 8005568:	463a      	mov	r2, r7
 800556a:	4630      	mov	r0, r6
 800556c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005570:	f7ff ffdc 	bl	800552c <__sfputc_r>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d1f3      	bne.n	8005560 <__sfputs_r+0xa>
 8005578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800557c <_vfiprintf_r>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	460d      	mov	r5, r1
 8005582:	4614      	mov	r4, r2
 8005584:	4698      	mov	r8, r3
 8005586:	4606      	mov	r6, r0
 8005588:	b09d      	sub	sp, #116	; 0x74
 800558a:	b118      	cbz	r0, 8005594 <_vfiprintf_r+0x18>
 800558c:	6983      	ldr	r3, [r0, #24]
 800558e:	b90b      	cbnz	r3, 8005594 <_vfiprintf_r+0x18>
 8005590:	f000 fb14 	bl	8005bbc <__sinit>
 8005594:	4b89      	ldr	r3, [pc, #548]	; (80057bc <_vfiprintf_r+0x240>)
 8005596:	429d      	cmp	r5, r3
 8005598:	d11b      	bne.n	80055d2 <_vfiprintf_r+0x56>
 800559a:	6875      	ldr	r5, [r6, #4]
 800559c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d405      	bmi.n	80055ae <_vfiprintf_r+0x32>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	059a      	lsls	r2, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_vfiprintf_r+0x32>
 80055a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055aa:	f000 fba5 	bl	8005cf8 <__retarget_lock_acquire_recursive>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	071b      	lsls	r3, r3, #28
 80055b2:	d501      	bpl.n	80055b8 <_vfiprintf_r+0x3c>
 80055b4:	692b      	ldr	r3, [r5, #16]
 80055b6:	b9eb      	cbnz	r3, 80055f4 <_vfiprintf_r+0x78>
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f000 f96e 	bl	800589c <__swsetup_r>
 80055c0:	b1c0      	cbz	r0, 80055f4 <_vfiprintf_r+0x78>
 80055c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055c4:	07dc      	lsls	r4, r3, #31
 80055c6:	d50e      	bpl.n	80055e6 <_vfiprintf_r+0x6a>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b01d      	add	sp, #116	; 0x74
 80055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	4b7b      	ldr	r3, [pc, #492]	; (80057c0 <_vfiprintf_r+0x244>)
 80055d4:	429d      	cmp	r5, r3
 80055d6:	d101      	bne.n	80055dc <_vfiprintf_r+0x60>
 80055d8:	68b5      	ldr	r5, [r6, #8]
 80055da:	e7df      	b.n	800559c <_vfiprintf_r+0x20>
 80055dc:	4b79      	ldr	r3, [pc, #484]	; (80057c4 <_vfiprintf_r+0x248>)
 80055de:	429d      	cmp	r5, r3
 80055e0:	bf08      	it	eq
 80055e2:	68f5      	ldreq	r5, [r6, #12]
 80055e4:	e7da      	b.n	800559c <_vfiprintf_r+0x20>
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	0598      	lsls	r0, r3, #22
 80055ea:	d4ed      	bmi.n	80055c8 <_vfiprintf_r+0x4c>
 80055ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ee:	f000 fb84 	bl	8005cfa <__retarget_lock_release_recursive>
 80055f2:	e7e9      	b.n	80055c8 <_vfiprintf_r+0x4c>
 80055f4:	2300      	movs	r3, #0
 80055f6:	9309      	str	r3, [sp, #36]	; 0x24
 80055f8:	2320      	movs	r3, #32
 80055fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055fe:	2330      	movs	r3, #48	; 0x30
 8005600:	f04f 0901 	mov.w	r9, #1
 8005604:	f8cd 800c 	str.w	r8, [sp, #12]
 8005608:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80057c8 <_vfiprintf_r+0x24c>
 800560c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005610:	4623      	mov	r3, r4
 8005612:	469a      	mov	sl, r3
 8005614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005618:	b10a      	cbz	r2, 800561e <_vfiprintf_r+0xa2>
 800561a:	2a25      	cmp	r2, #37	; 0x25
 800561c:	d1f9      	bne.n	8005612 <_vfiprintf_r+0x96>
 800561e:	ebba 0b04 	subs.w	fp, sl, r4
 8005622:	d00b      	beq.n	800563c <_vfiprintf_r+0xc0>
 8005624:	465b      	mov	r3, fp
 8005626:	4622      	mov	r2, r4
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ff93 	bl	8005556 <__sfputs_r>
 8005630:	3001      	adds	r0, #1
 8005632:	f000 80aa 	beq.w	800578a <_vfiprintf_r+0x20e>
 8005636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005638:	445a      	add	r2, fp
 800563a:	9209      	str	r2, [sp, #36]	; 0x24
 800563c:	f89a 3000 	ldrb.w	r3, [sl]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80a2 	beq.w	800578a <_vfiprintf_r+0x20e>
 8005646:	2300      	movs	r3, #0
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005650:	f10a 0a01 	add.w	sl, sl, #1
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565c:	931a      	str	r3, [sp, #104]	; 0x68
 800565e:	4654      	mov	r4, sl
 8005660:	2205      	movs	r2, #5
 8005662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005666:	4858      	ldr	r0, [pc, #352]	; (80057c8 <_vfiprintf_r+0x24c>)
 8005668:	f7ff f914 	bl	8004894 <memchr>
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	b9d8      	cbnz	r0, 80056a8 <_vfiprintf_r+0x12c>
 8005670:	06d1      	lsls	r1, r2, #27
 8005672:	bf44      	itt	mi
 8005674:	2320      	movmi	r3, #32
 8005676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800567a:	0713      	lsls	r3, r2, #28
 800567c:	bf44      	itt	mi
 800567e:	232b      	movmi	r3, #43	; 0x2b
 8005680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005684:	f89a 3000 	ldrb.w	r3, [sl]
 8005688:	2b2a      	cmp	r3, #42	; 0x2a
 800568a:	d015      	beq.n	80056b8 <_vfiprintf_r+0x13c>
 800568c:	4654      	mov	r4, sl
 800568e:	2000      	movs	r0, #0
 8005690:	f04f 0c0a 	mov.w	ip, #10
 8005694:	9a07      	ldr	r2, [sp, #28]
 8005696:	4621      	mov	r1, r4
 8005698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569c:	3b30      	subs	r3, #48	; 0x30
 800569e:	2b09      	cmp	r3, #9
 80056a0:	d94e      	bls.n	8005740 <_vfiprintf_r+0x1c4>
 80056a2:	b1b0      	cbz	r0, 80056d2 <_vfiprintf_r+0x156>
 80056a4:	9207      	str	r2, [sp, #28]
 80056a6:	e014      	b.n	80056d2 <_vfiprintf_r+0x156>
 80056a8:	eba0 0308 	sub.w	r3, r0, r8
 80056ac:	fa09 f303 	lsl.w	r3, r9, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	46a2      	mov	sl, r4
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	e7d2      	b.n	800565e <_vfiprintf_r+0xe2>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	1d19      	adds	r1, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	9103      	str	r1, [sp, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfbb      	ittet	lt
 80056c4:	425b      	neglt	r3, r3
 80056c6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ca:	9307      	strge	r3, [sp, #28]
 80056cc:	9307      	strlt	r3, [sp, #28]
 80056ce:	bfb8      	it	lt
 80056d0:	9204      	strlt	r2, [sp, #16]
 80056d2:	7823      	ldrb	r3, [r4, #0]
 80056d4:	2b2e      	cmp	r3, #46	; 0x2e
 80056d6:	d10c      	bne.n	80056f2 <_vfiprintf_r+0x176>
 80056d8:	7863      	ldrb	r3, [r4, #1]
 80056da:	2b2a      	cmp	r3, #42	; 0x2a
 80056dc:	d135      	bne.n	800574a <_vfiprintf_r+0x1ce>
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	3402      	adds	r4, #2
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	9203      	str	r2, [sp, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfb8      	it	lt
 80056ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057d8 <_vfiprintf_r+0x25c>
 80056f6:	2203      	movs	r2, #3
 80056f8:	4650      	mov	r0, sl
 80056fa:	7821      	ldrb	r1, [r4, #0]
 80056fc:	f7ff f8ca 	bl	8004894 <memchr>
 8005700:	b140      	cbz	r0, 8005714 <_vfiprintf_r+0x198>
 8005702:	2340      	movs	r3, #64	; 0x40
 8005704:	eba0 000a 	sub.w	r0, r0, sl
 8005708:	fa03 f000 	lsl.w	r0, r3, r0
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	3401      	adds	r4, #1
 8005710:	4303      	orrs	r3, r0
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005718:	2206      	movs	r2, #6
 800571a:	482c      	ldr	r0, [pc, #176]	; (80057cc <_vfiprintf_r+0x250>)
 800571c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005720:	f7ff f8b8 	bl	8004894 <memchr>
 8005724:	2800      	cmp	r0, #0
 8005726:	d03f      	beq.n	80057a8 <_vfiprintf_r+0x22c>
 8005728:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <_vfiprintf_r+0x254>)
 800572a:	bb1b      	cbnz	r3, 8005774 <_vfiprintf_r+0x1f8>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	3307      	adds	r3, #7
 8005730:	f023 0307 	bic.w	r3, r3, #7
 8005734:	3308      	adds	r3, #8
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573a:	443b      	add	r3, r7
 800573c:	9309      	str	r3, [sp, #36]	; 0x24
 800573e:	e767      	b.n	8005610 <_vfiprintf_r+0x94>
 8005740:	460c      	mov	r4, r1
 8005742:	2001      	movs	r0, #1
 8005744:	fb0c 3202 	mla	r2, ip, r2, r3
 8005748:	e7a5      	b.n	8005696 <_vfiprintf_r+0x11a>
 800574a:	2300      	movs	r3, #0
 800574c:	f04f 0c0a 	mov.w	ip, #10
 8005750:	4619      	mov	r1, r3
 8005752:	3401      	adds	r4, #1
 8005754:	9305      	str	r3, [sp, #20]
 8005756:	4620      	mov	r0, r4
 8005758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800575c:	3a30      	subs	r2, #48	; 0x30
 800575e:	2a09      	cmp	r2, #9
 8005760:	d903      	bls.n	800576a <_vfiprintf_r+0x1ee>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0c5      	beq.n	80056f2 <_vfiprintf_r+0x176>
 8005766:	9105      	str	r1, [sp, #20]
 8005768:	e7c3      	b.n	80056f2 <_vfiprintf_r+0x176>
 800576a:	4604      	mov	r4, r0
 800576c:	2301      	movs	r3, #1
 800576e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005772:	e7f0      	b.n	8005756 <_vfiprintf_r+0x1da>
 8005774:	ab03      	add	r3, sp, #12
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	462a      	mov	r2, r5
 800577a:	4630      	mov	r0, r6
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <_vfiprintf_r+0x258>)
 800577e:	a904      	add	r1, sp, #16
 8005780:	f7fd fe1e 	bl	80033c0 <_printf_float>
 8005784:	4607      	mov	r7, r0
 8005786:	1c78      	adds	r0, r7, #1
 8005788:	d1d6      	bne.n	8005738 <_vfiprintf_r+0x1bc>
 800578a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800578c:	07d9      	lsls	r1, r3, #31
 800578e:	d405      	bmi.n	800579c <_vfiprintf_r+0x220>
 8005790:	89ab      	ldrh	r3, [r5, #12]
 8005792:	059a      	lsls	r2, r3, #22
 8005794:	d402      	bmi.n	800579c <_vfiprintf_r+0x220>
 8005796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005798:	f000 faaf 	bl	8005cfa <__retarget_lock_release_recursive>
 800579c:	89ab      	ldrh	r3, [r5, #12]
 800579e:	065b      	lsls	r3, r3, #25
 80057a0:	f53f af12 	bmi.w	80055c8 <_vfiprintf_r+0x4c>
 80057a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a6:	e711      	b.n	80055cc <_vfiprintf_r+0x50>
 80057a8:	ab03      	add	r3, sp, #12
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	462a      	mov	r2, r5
 80057ae:	4630      	mov	r0, r6
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <_vfiprintf_r+0x258>)
 80057b2:	a904      	add	r1, sp, #16
 80057b4:	f7fe f8a0 	bl	80038f8 <_printf_i>
 80057b8:	e7e4      	b.n	8005784 <_vfiprintf_r+0x208>
 80057ba:	bf00      	nop
 80057bc:	080063cc 	.word	0x080063cc
 80057c0:	080063ec 	.word	0x080063ec
 80057c4:	080063ac 	.word	0x080063ac
 80057c8:	08006254 	.word	0x08006254
 80057cc:	0800625e 	.word	0x0800625e
 80057d0:	080033c1 	.word	0x080033c1
 80057d4:	08005557 	.word	0x08005557
 80057d8:	0800625a 	.word	0x0800625a

080057dc <__swbuf_r>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	460e      	mov	r6, r1
 80057e0:	4614      	mov	r4, r2
 80057e2:	4605      	mov	r5, r0
 80057e4:	b118      	cbz	r0, 80057ee <__swbuf_r+0x12>
 80057e6:	6983      	ldr	r3, [r0, #24]
 80057e8:	b90b      	cbnz	r3, 80057ee <__swbuf_r+0x12>
 80057ea:	f000 f9e7 	bl	8005bbc <__sinit>
 80057ee:	4b21      	ldr	r3, [pc, #132]	; (8005874 <__swbuf_r+0x98>)
 80057f0:	429c      	cmp	r4, r3
 80057f2:	d12b      	bne.n	800584c <__swbuf_r+0x70>
 80057f4:	686c      	ldr	r4, [r5, #4]
 80057f6:	69a3      	ldr	r3, [r4, #24]
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	071a      	lsls	r2, r3, #28
 80057fe:	d52f      	bpl.n	8005860 <__swbuf_r+0x84>
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	b36b      	cbz	r3, 8005860 <__swbuf_r+0x84>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	b2f6      	uxtb	r6, r6
 800580a:	1ac0      	subs	r0, r0, r3
 800580c:	6963      	ldr	r3, [r4, #20]
 800580e:	4637      	mov	r7, r6
 8005810:	4283      	cmp	r3, r0
 8005812:	dc04      	bgt.n	800581e <__swbuf_r+0x42>
 8005814:	4621      	mov	r1, r4
 8005816:	4628      	mov	r0, r5
 8005818:	f000 f93c 	bl	8005a94 <_fflush_r>
 800581c:	bb30      	cbnz	r0, 800586c <__swbuf_r+0x90>
 800581e:	68a3      	ldr	r3, [r4, #8]
 8005820:	3001      	adds	r0, #1
 8005822:	3b01      	subs	r3, #1
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	6022      	str	r2, [r4, #0]
 800582c:	701e      	strb	r6, [r3, #0]
 800582e:	6963      	ldr	r3, [r4, #20]
 8005830:	4283      	cmp	r3, r0
 8005832:	d004      	beq.n	800583e <__swbuf_r+0x62>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	07db      	lsls	r3, r3, #31
 8005838:	d506      	bpl.n	8005848 <__swbuf_r+0x6c>
 800583a:	2e0a      	cmp	r6, #10
 800583c:	d104      	bne.n	8005848 <__swbuf_r+0x6c>
 800583e:	4621      	mov	r1, r4
 8005840:	4628      	mov	r0, r5
 8005842:	f000 f927 	bl	8005a94 <_fflush_r>
 8005846:	b988      	cbnz	r0, 800586c <__swbuf_r+0x90>
 8005848:	4638      	mov	r0, r7
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <__swbuf_r+0x9c>)
 800584e:	429c      	cmp	r4, r3
 8005850:	d101      	bne.n	8005856 <__swbuf_r+0x7a>
 8005852:	68ac      	ldr	r4, [r5, #8]
 8005854:	e7cf      	b.n	80057f6 <__swbuf_r+0x1a>
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <__swbuf_r+0xa0>)
 8005858:	429c      	cmp	r4, r3
 800585a:	bf08      	it	eq
 800585c:	68ec      	ldreq	r4, [r5, #12]
 800585e:	e7ca      	b.n	80057f6 <__swbuf_r+0x1a>
 8005860:	4621      	mov	r1, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f000 f81a 	bl	800589c <__swsetup_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	d0cb      	beq.n	8005804 <__swbuf_r+0x28>
 800586c:	f04f 37ff 	mov.w	r7, #4294967295
 8005870:	e7ea      	b.n	8005848 <__swbuf_r+0x6c>
 8005872:	bf00      	nop
 8005874:	080063cc 	.word	0x080063cc
 8005878:	080063ec 	.word	0x080063ec
 800587c:	080063ac 	.word	0x080063ac

08005880 <__ascii_wctomb>:
 8005880:	4603      	mov	r3, r0
 8005882:	4608      	mov	r0, r1
 8005884:	b141      	cbz	r1, 8005898 <__ascii_wctomb+0x18>
 8005886:	2aff      	cmp	r2, #255	; 0xff
 8005888:	d904      	bls.n	8005894 <__ascii_wctomb+0x14>
 800588a:	228a      	movs	r2, #138	; 0x8a
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4770      	bx	lr
 8005894:	2001      	movs	r0, #1
 8005896:	700a      	strb	r2, [r1, #0]
 8005898:	4770      	bx	lr
	...

0800589c <__swsetup_r>:
 800589c:	4b32      	ldr	r3, [pc, #200]	; (8005968 <__swsetup_r+0xcc>)
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	4606      	mov	r6, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	b125      	cbz	r5, 80058b2 <__swsetup_r+0x16>
 80058a8:	69ab      	ldr	r3, [r5, #24]
 80058aa:	b913      	cbnz	r3, 80058b2 <__swsetup_r+0x16>
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 f985 	bl	8005bbc <__sinit>
 80058b2:	4b2e      	ldr	r3, [pc, #184]	; (800596c <__swsetup_r+0xd0>)
 80058b4:	429c      	cmp	r4, r3
 80058b6:	d10f      	bne.n	80058d8 <__swsetup_r+0x3c>
 80058b8:	686c      	ldr	r4, [r5, #4]
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c0:	0719      	lsls	r1, r3, #28
 80058c2:	d42c      	bmi.n	800591e <__swsetup_r+0x82>
 80058c4:	06dd      	lsls	r5, r3, #27
 80058c6:	d411      	bmi.n	80058ec <__swsetup_r+0x50>
 80058c8:	2309      	movs	r3, #9
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e03e      	b.n	8005956 <__swsetup_r+0xba>
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <__swsetup_r+0xd4>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	d101      	bne.n	80058e2 <__swsetup_r+0x46>
 80058de:	68ac      	ldr	r4, [r5, #8]
 80058e0:	e7eb      	b.n	80058ba <__swsetup_r+0x1e>
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <__swsetup_r+0xd8>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	bf08      	it	eq
 80058e8:	68ec      	ldreq	r4, [r5, #12]
 80058ea:	e7e6      	b.n	80058ba <__swsetup_r+0x1e>
 80058ec:	0758      	lsls	r0, r3, #29
 80058ee:	d512      	bpl.n	8005916 <__swsetup_r+0x7a>
 80058f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f2:	b141      	cbz	r1, 8005906 <__swsetup_r+0x6a>
 80058f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058f8:	4299      	cmp	r1, r3
 80058fa:	d002      	beq.n	8005902 <__swsetup_r+0x66>
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff fb75 	bl	8004fec <_free_r>
 8005902:	2300      	movs	r3, #0
 8005904:	6363      	str	r3, [r4, #52]	; 0x34
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	2300      	movs	r3, #0
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f043 0308 	orr.w	r3, r3, #8
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	b94b      	cbnz	r3, 8005936 <__swsetup_r+0x9a>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592c:	d003      	beq.n	8005936 <__swsetup_r+0x9a>
 800592e:	4621      	mov	r1, r4
 8005930:	4630      	mov	r0, r6
 8005932:	f000 fa07 	bl	8005d44 <__smakebuf_r>
 8005936:	89a0      	ldrh	r0, [r4, #12]
 8005938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800593c:	f010 0301 	ands.w	r3, r0, #1
 8005940:	d00a      	beq.n	8005958 <__swsetup_r+0xbc>
 8005942:	2300      	movs	r3, #0
 8005944:	60a3      	str	r3, [r4, #8]
 8005946:	6963      	ldr	r3, [r4, #20]
 8005948:	425b      	negs	r3, r3
 800594a:	61a3      	str	r3, [r4, #24]
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	b943      	cbnz	r3, 8005962 <__swsetup_r+0xc6>
 8005950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005954:	d1ba      	bne.n	80058cc <__swsetup_r+0x30>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	0781      	lsls	r1, r0, #30
 800595a:	bf58      	it	pl
 800595c:	6963      	ldrpl	r3, [r4, #20]
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	e7f4      	b.n	800594c <__swsetup_r+0xb0>
 8005962:	2000      	movs	r0, #0
 8005964:	e7f7      	b.n	8005956 <__swsetup_r+0xba>
 8005966:	bf00      	nop
 8005968:	2000000c 	.word	0x2000000c
 800596c:	080063cc 	.word	0x080063cc
 8005970:	080063ec 	.word	0x080063ec
 8005974:	080063ac 	.word	0x080063ac

08005978 <abort>:
 8005978:	2006      	movs	r0, #6
 800597a:	b508      	push	{r3, lr}
 800597c:	f000 fa52 	bl	8005e24 <raise>
 8005980:	2001      	movs	r0, #1
 8005982:	f7fc f86e 	bl	8001a62 <_exit>
	...

08005988 <__sflush_r>:
 8005988:	898a      	ldrh	r2, [r1, #12]
 800598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598e:	4605      	mov	r5, r0
 8005990:	0710      	lsls	r0, r2, #28
 8005992:	460c      	mov	r4, r1
 8005994:	d458      	bmi.n	8005a48 <__sflush_r+0xc0>
 8005996:	684b      	ldr	r3, [r1, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc05      	bgt.n	80059a8 <__sflush_r+0x20>
 800599c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dc02      	bgt.n	80059a8 <__sflush_r+0x20>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	d0f9      	beq.n	80059a2 <__sflush_r+0x1a>
 80059ae:	2300      	movs	r3, #0
 80059b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059b4:	682f      	ldr	r7, [r5, #0]
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	d032      	beq.n	8005a20 <__sflush_r+0x98>
 80059ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	075a      	lsls	r2, r3, #29
 80059c0:	d505      	bpl.n	80059ce <__sflush_r+0x46>
 80059c2:	6863      	ldr	r3, [r4, #4]
 80059c4:	1ac0      	subs	r0, r0, r3
 80059c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059c8:	b10b      	cbz	r3, 80059ce <__sflush_r+0x46>
 80059ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059cc:	1ac0      	subs	r0, r0, r3
 80059ce:	2300      	movs	r3, #0
 80059d0:	4602      	mov	r2, r0
 80059d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059d4:	4628      	mov	r0, r5
 80059d6:	6a21      	ldr	r1, [r4, #32]
 80059d8:	47b0      	blx	r6
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	d106      	bne.n	80059ee <__sflush_r+0x66>
 80059e0:	6829      	ldr	r1, [r5, #0]
 80059e2:	291d      	cmp	r1, #29
 80059e4:	d82c      	bhi.n	8005a40 <__sflush_r+0xb8>
 80059e6:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <__sflush_r+0x108>)
 80059e8:	40ca      	lsrs	r2, r1
 80059ea:	07d6      	lsls	r6, r2, #31
 80059ec:	d528      	bpl.n	8005a40 <__sflush_r+0xb8>
 80059ee:	2200      	movs	r2, #0
 80059f0:	6062      	str	r2, [r4, #4]
 80059f2:	6922      	ldr	r2, [r4, #16]
 80059f4:	04d9      	lsls	r1, r3, #19
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	d504      	bpl.n	8005a04 <__sflush_r+0x7c>
 80059fa:	1c42      	adds	r2, r0, #1
 80059fc:	d101      	bne.n	8005a02 <__sflush_r+0x7a>
 80059fe:	682b      	ldr	r3, [r5, #0]
 8005a00:	b903      	cbnz	r3, 8005a04 <__sflush_r+0x7c>
 8005a02:	6560      	str	r0, [r4, #84]	; 0x54
 8005a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a06:	602f      	str	r7, [r5, #0]
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	d0ca      	beq.n	80059a2 <__sflush_r+0x1a>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__sflush_r+0x92>
 8005a14:	4628      	mov	r0, r5
 8005a16:	f7ff fae9 	bl	8004fec <_free_r>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a1e:	e7c1      	b.n	80059a4 <__sflush_r+0x1c>
 8005a20:	6a21      	ldr	r1, [r4, #32]
 8005a22:	2301      	movs	r3, #1
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b0      	blx	r6
 8005a28:	1c41      	adds	r1, r0, #1
 8005a2a:	d1c7      	bne.n	80059bc <__sflush_r+0x34>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0c4      	beq.n	80059bc <__sflush_r+0x34>
 8005a32:	2b1d      	cmp	r3, #29
 8005a34:	d001      	beq.n	8005a3a <__sflush_r+0xb2>
 8005a36:	2b16      	cmp	r3, #22
 8005a38:	d101      	bne.n	8005a3e <__sflush_r+0xb6>
 8005a3a:	602f      	str	r7, [r5, #0]
 8005a3c:	e7b1      	b.n	80059a2 <__sflush_r+0x1a>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	e7ad      	b.n	80059a4 <__sflush_r+0x1c>
 8005a48:	690f      	ldr	r7, [r1, #16]
 8005a4a:	2f00      	cmp	r7, #0
 8005a4c:	d0a9      	beq.n	80059a2 <__sflush_r+0x1a>
 8005a4e:	0793      	lsls	r3, r2, #30
 8005a50:	bf18      	it	ne
 8005a52:	2300      	movne	r3, #0
 8005a54:	680e      	ldr	r6, [r1, #0]
 8005a56:	bf08      	it	eq
 8005a58:	694b      	ldreq	r3, [r1, #20]
 8005a5a:	eba6 0807 	sub.w	r8, r6, r7
 8005a5e:	600f      	str	r7, [r1, #0]
 8005a60:	608b      	str	r3, [r1, #8]
 8005a62:	f1b8 0f00 	cmp.w	r8, #0
 8005a66:	dd9c      	ble.n	80059a2 <__sflush_r+0x1a>
 8005a68:	4643      	mov	r3, r8
 8005a6a:	463a      	mov	r2, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	6a21      	ldr	r1, [r4, #32]
 8005a70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a72:	47b0      	blx	r6
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dc06      	bgt.n	8005a86 <__sflush_r+0xfe>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	e78e      	b.n	80059a4 <__sflush_r+0x1c>
 8005a86:	4407      	add	r7, r0
 8005a88:	eba8 0800 	sub.w	r8, r8, r0
 8005a8c:	e7e9      	b.n	8005a62 <__sflush_r+0xda>
 8005a8e:	bf00      	nop
 8005a90:	20400001 	.word	0x20400001

08005a94 <_fflush_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	690b      	ldr	r3, [r1, #16]
 8005a98:	4605      	mov	r5, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	b913      	cbnz	r3, 8005aa4 <_fflush_r+0x10>
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	b118      	cbz	r0, 8005aae <_fflush_r+0x1a>
 8005aa6:	6983      	ldr	r3, [r0, #24]
 8005aa8:	b90b      	cbnz	r3, 8005aae <_fflush_r+0x1a>
 8005aaa:	f000 f887 	bl	8005bbc <__sinit>
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <_fflush_r+0x6c>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d11b      	bne.n	8005aec <_fflush_r+0x58>
 8005ab4:	686c      	ldr	r4, [r5, #4]
 8005ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0ef      	beq.n	8005a9e <_fflush_r+0xa>
 8005abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ac0:	07d0      	lsls	r0, r2, #31
 8005ac2:	d404      	bmi.n	8005ace <_fflush_r+0x3a>
 8005ac4:	0599      	lsls	r1, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_fflush_r+0x3a>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aca:	f000 f915 	bl	8005cf8 <__retarget_lock_acquire_recursive>
 8005ace:	4628      	mov	r0, r5
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	f7ff ff59 	bl	8005988 <__sflush_r>
 8005ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ad8:	4605      	mov	r5, r0
 8005ada:	07da      	lsls	r2, r3, #31
 8005adc:	d4e0      	bmi.n	8005aa0 <_fflush_r+0xc>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	059b      	lsls	r3, r3, #22
 8005ae2:	d4dd      	bmi.n	8005aa0 <_fflush_r+0xc>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae6:	f000 f908 	bl	8005cfa <__retarget_lock_release_recursive>
 8005aea:	e7d9      	b.n	8005aa0 <_fflush_r+0xc>
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <_fflush_r+0x70>)
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d101      	bne.n	8005af6 <_fflush_r+0x62>
 8005af2:	68ac      	ldr	r4, [r5, #8]
 8005af4:	e7df      	b.n	8005ab6 <_fflush_r+0x22>
 8005af6:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <_fflush_r+0x74>)
 8005af8:	429c      	cmp	r4, r3
 8005afa:	bf08      	it	eq
 8005afc:	68ec      	ldreq	r4, [r5, #12]
 8005afe:	e7da      	b.n	8005ab6 <_fflush_r+0x22>
 8005b00:	080063cc 	.word	0x080063cc
 8005b04:	080063ec 	.word	0x080063ec
 8005b08:	080063ac 	.word	0x080063ac

08005b0c <std>:
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	e9c0 3300 	strd	r3, r3, [r0]
 8005b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b1a:	6083      	str	r3, [r0, #8]
 8005b1c:	8181      	strh	r1, [r0, #12]
 8005b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b20:	81c2      	strh	r2, [r0, #14]
 8005b22:	6183      	str	r3, [r0, #24]
 8005b24:	4619      	mov	r1, r3
 8005b26:	2208      	movs	r2, #8
 8005b28:	305c      	adds	r0, #92	; 0x5c
 8005b2a:	f7fd fba3 	bl	8003274 <memset>
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <std+0x38>)
 8005b30:	6224      	str	r4, [r4, #32]
 8005b32:	6263      	str	r3, [r4, #36]	; 0x24
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <std+0x3c>)
 8005b36:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <std+0x40>)
 8005b3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <std+0x44>)
 8005b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	08005e5d 	.word	0x08005e5d
 8005b48:	08005e7f 	.word	0x08005e7f
 8005b4c:	08005eb7 	.word	0x08005eb7
 8005b50:	08005edb 	.word	0x08005edb

08005b54 <_cleanup_r>:
 8005b54:	4901      	ldr	r1, [pc, #4]	; (8005b5c <_cleanup_r+0x8>)
 8005b56:	f000 b8af 	b.w	8005cb8 <_fwalk_reent>
 8005b5a:	bf00      	nop
 8005b5c:	08005a95 	.word	0x08005a95

08005b60 <__sfmoreglue>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	2568      	movs	r5, #104	; 0x68
 8005b64:	1e4a      	subs	r2, r1, #1
 8005b66:	4355      	muls	r5, r2
 8005b68:	460e      	mov	r6, r1
 8005b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b6e:	f7ff fa89 	bl	8005084 <_malloc_r>
 8005b72:	4604      	mov	r4, r0
 8005b74:	b140      	cbz	r0, 8005b88 <__sfmoreglue+0x28>
 8005b76:	2100      	movs	r1, #0
 8005b78:	e9c0 1600 	strd	r1, r6, [r0]
 8005b7c:	300c      	adds	r0, #12
 8005b7e:	60a0      	str	r0, [r4, #8]
 8005b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b84:	f7fd fb76 	bl	8003274 <memset>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}

08005b8c <__sfp_lock_acquire>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sfp_lock_acquire+0x8>)
 8005b8e:	f000 b8b3 	b.w	8005cf8 <__retarget_lock_acquire_recursive>
 8005b92:	bf00      	nop
 8005b94:	200002d8 	.word	0x200002d8

08005b98 <__sfp_lock_release>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__sfp_lock_release+0x8>)
 8005b9a:	f000 b8ae 	b.w	8005cfa <__retarget_lock_release_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	200002d8 	.word	0x200002d8

08005ba4 <__sinit_lock_acquire>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__sinit_lock_acquire+0x8>)
 8005ba6:	f000 b8a7 	b.w	8005cf8 <__retarget_lock_acquire_recursive>
 8005baa:	bf00      	nop
 8005bac:	200002d3 	.word	0x200002d3

08005bb0 <__sinit_lock_release>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__sinit_lock_release+0x8>)
 8005bb2:	f000 b8a2 	b.w	8005cfa <__retarget_lock_release_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	200002d3 	.word	0x200002d3

08005bbc <__sinit>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	f7ff fff0 	bl	8005ba4 <__sinit_lock_acquire>
 8005bc4:	69a3      	ldr	r3, [r4, #24]
 8005bc6:	b11b      	cbz	r3, 8005bd0 <__sinit+0x14>
 8005bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bcc:	f7ff bff0 	b.w	8005bb0 <__sinit_lock_release>
 8005bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <__sinit+0x68>)
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <__sinit+0x6c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	bf08      	it	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	4620      	mov	r0, r4
 8005be6:	bf08      	it	eq
 8005be8:	61a3      	streq	r3, [r4, #24]
 8005bea:	f000 f81f 	bl	8005c2c <__sfp>
 8005bee:	6060      	str	r0, [r4, #4]
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 f81b 	bl	8005c2c <__sfp>
 8005bf6:	60a0      	str	r0, [r4, #8]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 f817 	bl	8005c2c <__sfp>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2104      	movs	r1, #4
 8005c02:	60e0      	str	r0, [r4, #12]
 8005c04:	6860      	ldr	r0, [r4, #4]
 8005c06:	f7ff ff81 	bl	8005b0c <std>
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2109      	movs	r1, #9
 8005c0e:	68a0      	ldr	r0, [r4, #8]
 8005c10:	f7ff ff7c 	bl	8005b0c <std>
 8005c14:	2202      	movs	r2, #2
 8005c16:	2112      	movs	r1, #18
 8005c18:	68e0      	ldr	r0, [r4, #12]
 8005c1a:	f7ff ff77 	bl	8005b0c <std>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	61a3      	str	r3, [r4, #24]
 8005c22:	e7d1      	b.n	8005bc8 <__sinit+0xc>
 8005c24:	08006028 	.word	0x08006028
 8005c28:	08005b55 	.word	0x08005b55

08005c2c <__sfp>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	4607      	mov	r7, r0
 8005c30:	f7ff ffac 	bl	8005b8c <__sfp_lock_acquire>
 8005c34:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <__sfp+0x84>)
 8005c36:	681e      	ldr	r6, [r3, #0]
 8005c38:	69b3      	ldr	r3, [r6, #24]
 8005c3a:	b913      	cbnz	r3, 8005c42 <__sfp+0x16>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff ffbd 	bl	8005bbc <__sinit>
 8005c42:	3648      	adds	r6, #72	; 0x48
 8005c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	d503      	bpl.n	8005c54 <__sfp+0x28>
 8005c4c:	6833      	ldr	r3, [r6, #0]
 8005c4e:	b30b      	cbz	r3, 8005c94 <__sfp+0x68>
 8005c50:	6836      	ldr	r6, [r6, #0]
 8005c52:	e7f7      	b.n	8005c44 <__sfp+0x18>
 8005c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c58:	b9d5      	cbnz	r5, 8005c90 <__sfp+0x64>
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <__sfp+0x88>)
 8005c5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c60:	60e3      	str	r3, [r4, #12]
 8005c62:	6665      	str	r5, [r4, #100]	; 0x64
 8005c64:	f000 f847 	bl	8005cf6 <__retarget_lock_init_recursive>
 8005c68:	f7ff ff96 	bl	8005b98 <__sfp_lock_release>
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4629      	mov	r1, r5
 8005c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c78:	6025      	str	r5, [r4, #0]
 8005c7a:	61a5      	str	r5, [r4, #24]
 8005c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c80:	f7fd faf8 	bl	8003274 <memset>
 8005c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c90:	3468      	adds	r4, #104	; 0x68
 8005c92:	e7d9      	b.n	8005c48 <__sfp+0x1c>
 8005c94:	2104      	movs	r1, #4
 8005c96:	4638      	mov	r0, r7
 8005c98:	f7ff ff62 	bl	8005b60 <__sfmoreglue>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	6030      	str	r0, [r6, #0]
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d1d5      	bne.n	8005c50 <__sfp+0x24>
 8005ca4:	f7ff ff78 	bl	8005b98 <__sfp_lock_release>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	e7ee      	b.n	8005c8c <__sfp+0x60>
 8005cae:	bf00      	nop
 8005cb0:	08006028 	.word	0x08006028
 8005cb4:	ffff0001 	.word	0xffff0001

08005cb8 <_fwalk_reent>:
 8005cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	4688      	mov	r8, r1
 8005cc0:	2700      	movs	r7, #0
 8005cc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cca:	f1b9 0901 	subs.w	r9, r9, #1
 8005cce:	d505      	bpl.n	8005cdc <_fwalk_reent+0x24>
 8005cd0:	6824      	ldr	r4, [r4, #0]
 8005cd2:	2c00      	cmp	r4, #0
 8005cd4:	d1f7      	bne.n	8005cc6 <_fwalk_reent+0xe>
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cdc:	89ab      	ldrh	r3, [r5, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d907      	bls.n	8005cf2 <_fwalk_reent+0x3a>
 8005ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <_fwalk_reent+0x3a>
 8005cea:	4629      	mov	r1, r5
 8005cec:	4630      	mov	r0, r6
 8005cee:	47c0      	blx	r8
 8005cf0:	4307      	orrs	r7, r0
 8005cf2:	3568      	adds	r5, #104	; 0x68
 8005cf4:	e7e9      	b.n	8005cca <_fwalk_reent+0x12>

08005cf6 <__retarget_lock_init_recursive>:
 8005cf6:	4770      	bx	lr

08005cf8 <__retarget_lock_acquire_recursive>:
 8005cf8:	4770      	bx	lr

08005cfa <__retarget_lock_release_recursive>:
 8005cfa:	4770      	bx	lr

08005cfc <__swhatbuf_r>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	460e      	mov	r6, r1
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	4614      	mov	r4, r2
 8005d06:	2900      	cmp	r1, #0
 8005d08:	461d      	mov	r5, r3
 8005d0a:	b096      	sub	sp, #88	; 0x58
 8005d0c:	da07      	bge.n	8005d1e <__swhatbuf_r+0x22>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	89b3      	ldrh	r3, [r6, #12]
 8005d14:	061a      	lsls	r2, r3, #24
 8005d16:	d410      	bmi.n	8005d3a <__swhatbuf_r+0x3e>
 8005d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d1c:	e00e      	b.n	8005d3c <__swhatbuf_r+0x40>
 8005d1e:	466a      	mov	r2, sp
 8005d20:	f000 f902 	bl	8005f28 <_fstat_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	dbf2      	blt.n	8005d0e <__swhatbuf_r+0x12>
 8005d28:	9a01      	ldr	r2, [sp, #4]
 8005d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d32:	425a      	negs	r2, r3
 8005d34:	415a      	adcs	r2, r3
 8005d36:	602a      	str	r2, [r5, #0]
 8005d38:	e7ee      	b.n	8005d18 <__swhatbuf_r+0x1c>
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	b016      	add	sp, #88	; 0x58
 8005d42:	bd70      	pop	{r4, r5, r6, pc}

08005d44 <__smakebuf_r>:
 8005d44:	898b      	ldrh	r3, [r1, #12]
 8005d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d48:	079d      	lsls	r5, r3, #30
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	d507      	bpl.n	8005d60 <__smakebuf_r+0x1c>
 8005d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	6163      	str	r3, [r4, #20]
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	466a      	mov	r2, sp
 8005d62:	ab01      	add	r3, sp, #4
 8005d64:	f7ff ffca 	bl	8005cfc <__swhatbuf_r>
 8005d68:	9900      	ldr	r1, [sp, #0]
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff f989 	bl	8005084 <_malloc_r>
 8005d72:	b948      	cbnz	r0, 8005d88 <__smakebuf_r+0x44>
 8005d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d78:	059a      	lsls	r2, r3, #22
 8005d7a:	d4ef      	bmi.n	8005d5c <__smakebuf_r+0x18>
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	e7e3      	b.n	8005d50 <__smakebuf_r+0xc>
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <__smakebuf_r+0x7c>)
 8005d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	6020      	str	r0, [r4, #0]
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	9b00      	ldr	r3, [sp, #0]
 8005d98:	6120      	str	r0, [r4, #16]
 8005d9a:	6163      	str	r3, [r4, #20]
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	b15b      	cbz	r3, 8005db8 <__smakebuf_r+0x74>
 8005da0:	4630      	mov	r0, r6
 8005da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da6:	f000 f8d1 	bl	8005f4c <_isatty_r>
 8005daa:	b128      	cbz	r0, 8005db8 <__smakebuf_r+0x74>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	89a0      	ldrh	r0, [r4, #12]
 8005dba:	4305      	orrs	r5, r0
 8005dbc:	81a5      	strh	r5, [r4, #12]
 8005dbe:	e7cd      	b.n	8005d5c <__smakebuf_r+0x18>
 8005dc0:	08005b55 	.word	0x08005b55

08005dc4 <_malloc_usable_size_r>:
 8005dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc8:	1f18      	subs	r0, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bfbc      	itt	lt
 8005dce:	580b      	ldrlt	r3, [r1, r0]
 8005dd0:	18c0      	addlt	r0, r0, r3
 8005dd2:	4770      	bx	lr

08005dd4 <_raise_r>:
 8005dd4:	291f      	cmp	r1, #31
 8005dd6:	b538      	push	{r3, r4, r5, lr}
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	d904      	bls.n	8005de8 <_raise_r+0x14>
 8005dde:	2316      	movs	r3, #22
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dea:	b112      	cbz	r2, 8005df2 <_raise_r+0x1e>
 8005dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005df0:	b94b      	cbnz	r3, 8005e06 <_raise_r+0x32>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f830 	bl	8005e58 <_getpid_r>
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e02:	f000 b817 	b.w	8005e34 <_kill_r>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d00a      	beq.n	8005e20 <_raise_r+0x4c>
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	d103      	bne.n	8005e16 <_raise_r+0x42>
 8005e0e:	2316      	movs	r3, #22
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	2001      	movs	r0, #1
 8005e14:	e7e7      	b.n	8005de6 <_raise_r+0x12>
 8005e16:	2400      	movs	r4, #0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e1e:	4798      	blx	r3
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7e0      	b.n	8005de6 <_raise_r+0x12>

08005e24 <raise>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <raise+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f7ff bfd3 	b.w	8005dd4 <_raise_r>
 8005e2e:	bf00      	nop
 8005e30:	2000000c 	.word	0x2000000c

08005e34 <_kill_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	2300      	movs	r3, #0
 8005e38:	4d06      	ldr	r5, [pc, #24]	; (8005e54 <_kill_r+0x20>)
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	f7fb fdfe 	bl	8001a42 <_kill>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d102      	bne.n	8005e50 <_kill_r+0x1c>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	b103      	cbz	r3, 8005e50 <_kill_r+0x1c>
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	200002cc 	.word	0x200002cc

08005e58 <_getpid_r>:
 8005e58:	f7fb bdec 	b.w	8001a34 <_getpid>

08005e5c <__sread>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	f000 f894 	bl	8005f90 <_read_r>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	bfab      	itete	ge
 8005e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e70:	181b      	addge	r3, r3, r0
 8005e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e76:	bfac      	ite	ge
 8005e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e7a:	81a3      	strhlt	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__swrite>:
 8005e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	461f      	mov	r7, r3
 8005e84:	898b      	ldrh	r3, [r1, #12]
 8005e86:	4605      	mov	r5, r0
 8005e88:	05db      	lsls	r3, r3, #23
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	d505      	bpl.n	8005e9c <__swrite+0x1e>
 8005e90:	2302      	movs	r3, #2
 8005e92:	2200      	movs	r2, #0
 8005e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e98:	f000 f868 	bl	8005f6c <_lseek_r>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	4632      	mov	r2, r6
 8005ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb2:	f000 b817 	b.w	8005ee4 <_write_r>

08005eb6 <__sseek>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 f855 	bl	8005f6c <_lseek_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	bf15      	itete	ne
 8005ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ed2:	81a3      	strheq	r3, [r4, #12]
 8005ed4:	bf18      	it	ne
 8005ed6:	81a3      	strhne	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__sclose>:
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 b813 	b.w	8005f08 <_close_r>
	...

08005ee4 <_write_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	2200      	movs	r2, #0
 8005eee:	4d05      	ldr	r5, [pc, #20]	; (8005f04 <_write_r+0x20>)
 8005ef0:	602a      	str	r2, [r5, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fb fddc 	bl	8001ab0 <_write>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_write_r+0x1e>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_write_r+0x1e>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	200002cc 	.word	0x200002cc

08005f08 <_close_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4d05      	ldr	r5, [pc, #20]	; (8005f24 <_close_r+0x1c>)
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	f7fb fde8 	bl	8001ae8 <_close>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_close_r+0x1a>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_close_r+0x1a>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	200002cc 	.word	0x200002cc

08005f28 <_fstat_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4d06      	ldr	r5, [pc, #24]	; (8005f48 <_fstat_r+0x20>)
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	f7fb fde2 	bl	8001afe <_fstat>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	d102      	bne.n	8005f44 <_fstat_r+0x1c>
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	b103      	cbz	r3, 8005f44 <_fstat_r+0x1c>
 8005f42:	6023      	str	r3, [r4, #0]
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
 8005f46:	bf00      	nop
 8005f48:	200002cc 	.word	0x200002cc

08005f4c <_isatty_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	2300      	movs	r3, #0
 8005f50:	4d05      	ldr	r5, [pc, #20]	; (8005f68 <_isatty_r+0x1c>)
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	f7fb fde0 	bl	8001b1c <_isatty>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_isatty_r+0x1a>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_isatty_r+0x1a>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	200002cc 	.word	0x200002cc

08005f6c <_lseek_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_lseek_r+0x20>)
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb fdd8 	bl	8001b30 <_lseek>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_lseek_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_lseek_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	200002cc 	.word	0x200002cc

08005f90 <_read_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4d05      	ldr	r5, [pc, #20]	; (8005fb0 <_read_r+0x20>)
 8005f9c:	602a      	str	r2, [r5, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f7fb fd69 	bl	8001a76 <_read>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_read_r+0x1e>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_read_r+0x1e>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	200002cc 	.word	0x200002cc

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
